<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>This is xingyu.</title>
  
  <subtitle>要成为光，因为有怕黑的人</subtitle>
  <link href="http://blog.eltaos.top/atom.xml" rel="self"/>
  
  <link href="http://blog.eltaos.top/"/>
  <updated>2023-12-08T11:11:02.724Z</updated>
  <id>http://blog.eltaos.top/</id>
  
  <author>
    <name>Xingyu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>T</title>
    <link href="http://blog.eltaos.top/2023/TV/"/>
    <id>http://blog.eltaos.top/2023/TV/</id>
    <published>2023-12-08T11:10:07.000Z</published>
    <updated>2023-12-08T11:11:02.724Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bf0df5c794d6d97d6e683607e7d0493cbe8b3892575be5c5d456575f414b0196">334eeb0d5cc453c218779814cebe696c8b6489923b4448f2de778460b9bb0626aaded6a4b010a0a8f477881407799f4f</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Graph-Notes</title>
    <link href="http://blog.eltaos.top/2023/Graph-Notes/"/>
    <id>http://blog.eltaos.top/2023/Graph-Notes/</id>
    <published>2023-12-07T16:00:00.000Z</published>
    <updated>2023-12-08T11:28:22.101Z</updated>
    
    <content type="html"><![CDATA[<h1>基础</h1><p>不写了。</p><h1>优化建图</h1><h2 id="线段树优化建图">线段树优化建图</h2><p>点 $\to$ 区间：直接线段树查询。</p><p>区间 $\to$ 区间：建虚点再连虚点。</p><p>CF786B &amp; P6348 就是基本的两棵线段树优化建图，注意区间连点时线段树方向向上，点连区间时线段树方向向下。用两棵线段树时下面的子节点要逐一相连，因为他们本质是一样的。</p><p>例题：P3588</p><p>考虑建出线段树，对于每个给定区间，用他给的数分割这些区间，建立虚点连向这些被分割的区间，边权为 $0$，然后将给定的点连向虚点，边权为 $1$，然后拓扑排序模拟差分约束即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P3588 [POI2015] PUS</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P3588</span></span><br><span class="line"><span class="comment">// Memory Limit: 128 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> link,to,w;</span><br><span class="line">&#125;E[<span class="number">40000001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">2000001</span>],deg[<span class="number">4000005</span>],vi[<span class="number">4000005</span>],tot,cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">E[tot].w=w;</span><br><span class="line">deg[v]++;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;&quot;     &quot;&lt;&lt;u&lt;&lt;&quot; &quot;&lt;&lt;v&lt;&lt;&#x27; &#x27;&lt;&lt;w&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,q,m,id[<span class="number">2000005</span>],ans[<span class="number">2000005</span>];</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bulid</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">vi[now]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">mp[now]=l;</span><br><span class="line">id[l]=now;</span><br><span class="line">cnt=<span class="built_in">max</span>(cnt,now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">addE</span>(now,now&lt;&lt;<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">addE</span>(now,now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr,<span class="type">int</span> st)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)&#123;</span><br><span class="line"><span class="built_in">addE</span>(st,now,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)<span class="built_in">add</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid),st);</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)<span class="built_in">add</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr,st);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dis[<span class="number">4000005</span>];</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">4000005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">topo</span><span class="params">()</span></span>&#123;</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)<span class="keyword">if</span>(ans[i])dis[i]=ans[i];<span class="keyword">else</span> dis[i]=<span class="number">1e9</span>;</span><br><span class="line"><span class="comment">//for(int i=1;i&lt;=cnt;i++)cerr&lt;&lt;dis[i]&lt;&lt;&quot; &quot;&lt;&lt;deg[i]&lt;&lt;&quot; &quot;&lt;&lt;vi[i]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vi[i]&amp;&amp;deg[i]==<span class="number">0</span>)q.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">q.<span class="built_in">pop</span>(); </span><br><span class="line"><span class="comment">//cerr&lt;&lt;u&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(ans[u]&amp;&amp;dis[u]&lt;ans[u])&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;NIE&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dis[u]&lt;<span class="number">1</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;NIE&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=E[i].link)&#123;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;deg[E[i].to]&lt;&lt;&quot; &quot;&lt;&lt;E[i].to&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">deg[E[i].to]--;</span><br><span class="line">dis[E[i].to]=<span class="built_in">min</span>(dis[E[i].to],dis[u]-E[i].w);</span><br><span class="line"><span class="keyword">if</span>(deg[E[i].to]==<span class="number">0</span>)&#123;</span><br><span class="line">q.<span class="built_in">push</span>(E[i].to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;topo ended.\n&quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(vi[i]&amp;&amp;!vis[i])&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;i&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">cout&lt;&lt;<span class="string">&quot;NIE&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;q&gt;&gt;m;</span><br><span class="line"><span class="built_in">bulid</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="type">int</span> o;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">cin&gt;&gt;o;</span><br><span class="line">cin&gt;&gt;ans[id[o]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x,y,z,u;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line"><span class="type">int</span> pos=x;</span><br><span class="line">cnt++;</span><br><span class="line">vi[cnt]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=z;j++)&#123;</span><br><span class="line">cin&gt;&gt;u;</span><br><span class="line"><span class="built_in">addE</span>(id[u],cnt,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=u<span class="number">-1</span>)<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,n,pos,u<span class="number">-1</span>,cnt);</span><br><span class="line">pos=u+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pos&lt;=y)<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,n,pos,y,cnt);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">topo</span>();</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;TAK\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cout&lt;&lt;dis[id[i]]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例题：P5025</p><p>考虑这道题暴力连边的话就是计算该点能达到的区间。</p><p>使用线段树优化建图，tarjan 缩点之后，发现每个点内的所有子点的区间就是所有子点能达到的最远区间，预处理时记录线段树每个节点的区间即可。</p><p>然后一遍 dfs 求出从这个点出发能达到的所有点的最大区间，与原来的点的最大区间合并，然后就得到了点内所有子点的答案，即 $r_i-l_i+1$。</p><p>最后统计答案即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P5025 [SNOI2017] 鐐稿脊</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P5025</span></span><br><span class="line"><span class="comment">// Memory Limit: 512 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2500 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">6000001</span>],scc[<span class="number">6000001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">2000001</span>],tot;</span><br><span class="line"><span class="type">int</span> headscc[<span class="number">2000001</span>],totscc,w[<span class="number">2000001</span>];</span><br><span class="line"><span class="type">int</span> ll[<span class="number">2000001</span>],rr[<span class="number">2000001</span>];</span><br><span class="line"><span class="type">int</span> sccl[<span class="number">2000001</span>],sccr[<span class="number">2000001</span>];</span><br><span class="line"><span class="type">int</span> id[<span class="number">2000001</span>];</span><br><span class="line"><span class="type">bool</span> isex[<span class="number">2000001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;u&lt;&lt;&quot; -&gt; &quot;&lt;&lt;v&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addscc</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">scc[++totscc].link=headscc[u];</span><br><span class="line">scc[totscc].to=v;</span><br><span class="line">headscc[u]=totscc;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ccnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bulid</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">ll[now]=l;</span><br><span class="line">rr[now]=r;</span><br><span class="line">isex[now]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> id[l]=now,ccnt=<span class="built_in">max</span>(now,ccnt),<span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">addE</span>(now,now&lt;&lt;<span class="number">1</span>);</span><br><span class="line"><span class="built_in">addE</span>(now,now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr,<span class="type">int</span> st)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)<span class="keyword">return</span> <span class="built_in">addE</span>(st,now),<span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)<span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid),st);</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)<span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr,st);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> scccnt,belong[<span class="number">2000001</span>];</span><br><span class="line"><span class="type">int</span> dfncnt,dfn[<span class="number">2000001</span>],low[<span class="number">2000001</span>];</span><br><span class="line"><span class="type">bool</span> instack[<span class="number">2000001</span>];</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;u&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">dfn[u]=low[u]=++dfncnt;</span><br><span class="line">s.<span class="built_in">push</span>(u);</span><br><span class="line">instack[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(!dfn[E[i].to])&#123;</span><br><span class="line"><span class="built_in">tarjan</span>(E[i].to);</span><br><span class="line">low[u]=<span class="built_in">min</span>(low[u],low[E[i].to]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(instack[E[i].to])low[u]=<span class="built_in">min</span>(low[u],dfn[E[i].to]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;low[u]&lt;&lt;&quot; &quot;&lt;&lt;dfn[u]&lt;&lt;&quot; hanghang\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(low[u]==dfn[u])&#123;</span><br><span class="line">scccnt++;</span><br><span class="line">sccl[scccnt]=<span class="number">1e9</span>;</span><br><span class="line">sccr[scccnt]=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> temp=s.<span class="built_in">top</span>();</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">temp=s.<span class="built_in">top</span>();</span><br><span class="line"><span class="comment">//cout&lt;&lt;temp&lt;&lt;&quot; &quot;&lt;&lt;scccnt&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">instack[temp]=<span class="number">0</span>;</span><br><span class="line">belong[temp]=scccnt;</span><br><span class="line">sccl[scccnt]=<span class="built_in">min</span>(sccl[scccnt],ll[temp]);</span><br><span class="line">sccr[scccnt]=<span class="built_in">max</span>(sccr[scccnt],rr[temp]);</span><br><span class="line">s.<span class="built_in">pop</span>();</span><br><span class="line">&#125;<span class="keyword">while</span>(temp!=u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> X[<span class="number">500001</span>],R[<span class="number">500001</span>];</span><br><span class="line"><span class="type">int</span> sx[<span class="number">500001</span>];</span><br><span class="line"><span class="type">bool</span> vi[<span class="number">2000001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">vi[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=headscc[u];k;k=scc[k].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vi[scc[k].to])<span class="built_in">dfs</span>(scc[k].to);</span><br><span class="line">sccl[u]=<span class="built_in">min</span>(sccl[u],sccl[scc[k].to]);</span><br><span class="line">sccr[u]=<span class="built_in">max</span>(sccr[u],sccr[scc[k].to]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">bulid</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;X[i]&gt;&gt;R[i];</span><br><span class="line">sx[i]=X[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> lef=<span class="built_in">lower_bound</span>(X+<span class="number">1</span>,X+n+<span class="number">1</span>,X[i]-R[i])-X;</span><br><span class="line"><span class="type">int</span> righ=<span class="built_in">upper_bound</span>(X+<span class="number">1</span>,X+n+<span class="number">1</span>,X[i]+R[i])-X<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,lef,righ,id[i]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;lef&lt;&lt;&quot; &quot;&lt;&lt;righ&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">tarjan</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ccnt;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(isex[i])&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=head[i];k;k=E[k].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(belong[i]!=belong[E[k].to])<span class="built_in">addscc</span>(belong[i],belong[E[k].to]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=scccnt;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vi[i])<span class="built_in">dfs</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//for(int i=1;i&lt;=n;i++)cout&lt;&lt;belong[id[i]]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">ans+=<span class="number">1ll</span>*i*(sccr[belong[id[i]]]-sccl[belong[id[i]]]+<span class="number">1</span>)%<span class="number">1000000007ll</span>;</span><br><span class="line">ans%=<span class="number">1000000007ll</span>;</span><br><span class="line"><span class="comment">//cout&lt;&lt;(sccr[belong[id[i]]]-sccl[belong[id[i]]]+1)&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>塔杨写挂了，然后调了很久，看来需要进行 tarjan 的复习了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;基础&lt;/h1&gt;
&lt;p&gt;不写了。&lt;/p&gt;
&lt;h1&gt;优化建图&lt;/h1&gt;
&lt;h2 id=&quot;线段树优化建图&quot;&gt;线段树优化建图&lt;/h2&gt;
&lt;p&gt;点 $&#92;to$ 区间：直接线段树查询。&lt;/p&gt;
&lt;p&gt;区间 $&#92;to$ 区间：建虚点再连虚点。&lt;/p&gt;
&lt;p&gt;CF786B &amp;amp; P</summary>
      
    
    
    
    <category term="OI" scheme="http://blog.eltaos.top/categories/OI/"/>
    
    
    <category term="OI" scheme="http://blog.eltaos.top/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>Advanced-Data_Structures</title>
    <link href="http://blog.eltaos.top/2023/Advanced-Data-Structures/"/>
    <id>http://blog.eltaos.top/2023/Advanced-Data-Structures/</id>
    <published>2023-12-07T16:00:00.000Z</published>
    <updated>2023-12-08T11:31:50.834Z</updated>
    
    <content type="html"><![CDATA[<h1>线段树&amp;平衡树</h1><h2 id="FHQ-Treap">FHQ-Treap</h2><p>其实就是一个通过笛卡尔树的微妙性质实现的平衡树。</p><p>不谈复杂度，只需要分析分裂合并都该如何实现就行了。</p><ul class="lvl-0"><li class="lvl-2"><p>分裂：</p></li></ul><p>就是将一棵树分裂成一个权值小于等于 $a$ 和大于 $a$ 两部分。分裂途中遍历到当前节点，如果该节点权值小于等于 $a$，那么将左子树全部合并到左边的 Treap，反之亦然。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> k,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span>&#123;<span class="comment">//返回x,y：是分裂出两棵 Treap 的根,now初始值为rt</span></span><br><span class="line">    <span class="keyword">if</span>(!now)x=y=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(val[now]&lt;=k)x=now,<span class="built_in">split</span>(ch[now][<span class="number">1</span>],k,ch[now][<span class="number">1</span>],y);</span><br><span class="line">        <span class="keyword">else</span> y=now,<span class="built_in">split</span>(ch[now][<span class="number">0</span>],k,x,ch[now][<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">pushup</span>(now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>合并：</p></li></ul><p>这个操作就是对于根为 $x$ 和 $y$ 的两棵树合并起来，其中要保证 $x$ 树的权值比 $y$ 小。合并的时候不难发现为了保持平衡，我们需要用堆的性质比较当前的两个节点。</p><p>如果当前 $x$ 树的节点比 $y$ 树的节点的优先值更小，那么当前 $x$ 树的节点就是 $y$ 树目前根的父亲（右儿子），反之亦然。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;<span class="comment">//返回值是根结点编号</span></span><br><span class="line">    <span class="keyword">if</span>(!x||!y)<span class="keyword">return</span> x+y;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pri[x]&gt;pri[y])&#123;</span><br><span class="line">        ch[x][<span class="number">1</span>]=<span class="built_in">merge</span>(ch[x][<span class="number">1</span>],y);</span><br><span class="line">        <span class="built_in">pushup</span>(x);</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        ch[y][<span class="number">0</span>]=<span class="built_in">merge</span>(x,ch[y][<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">pushup</span>(y);</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>区间操作：类似于文艺平衡树的题需要使用。</p><p>这个时候就要用到 Treap 的第二种分裂方式了：按前 $k$ 个分裂，即前 $k$ 个分到一个 Treap 中，另外的分到另一个 Treap 中。</p><p>和权值分裂类似，就是如果第 $k$ 大在左子树中，那么将这个节点放到分裂出来后右边的 Treap 遍历左儿子，否则放到左边的 Treap 然后遍历右儿子。</p><p>文艺平衡树要实现的区间翻转操作非常好，就是维护左右儿子翻转的 tag 就行了。按 siz 分裂，按堆合并就行了，但是要当心 $0$ 节点的 siz 要为 $0$。注意要把区间完全分裂出来进行操作，即先 <code>split(rt,r,x,y);</code>，再 <code>split(x,l-1,w,z);</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P3391 【模板】文艺平衡树</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P3391</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,x,y;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> siz[maxn],ch[maxn][<span class="number">2</span>],pri[maxn],tag[maxn];</span><br><span class="line"><span class="type">int</span> cnt,rt;</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">addP</span><span class="params">(<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">siz[++cnt]=<span class="number">1</span>;</span><br><span class="line">pri[cnt]=<span class="built_in">rnd</span>();</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">siz[now]=siz[ch[now][<span class="number">0</span>]]+siz[ch[now][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tag[now])&#123;</span><br><span class="line">tag[now]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">swap</span>(ch[now][<span class="number">0</span>],ch[now][<span class="number">1</span>]);</span><br><span class="line">tag[ch[now][<span class="number">0</span>]]^=<span class="number">1</span>;</span><br><span class="line">tag[ch[now][<span class="number">1</span>]]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> k,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!now)<span class="keyword">return</span> x=y=<span class="number">0</span>,<span class="built_in">void</span>();</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(now);</span><br><span class="line"><span class="keyword">if</span>(k&lt;=siz[ch[now][<span class="number">0</span>]])y=now,<span class="built_in">split</span>(ch[now][<span class="number">0</span>],k,x,ch[now][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">else</span> x=now,<span class="built_in">split</span>(ch[now][<span class="number">1</span>],k-siz[ch[now][<span class="number">0</span>]]<span class="number">-1</span>,ch[now][<span class="number">1</span>],y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x||!y)<span class="keyword">return</span> x+y;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pri[x]&gt;pri[y])&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line">ch[x][<span class="number">1</span>]=<span class="built_in">merge</span>(ch[x][<span class="number">1</span>],y);</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(y);</span><br><span class="line">ch[y][<span class="number">0</span>]=<span class="built_in">merge</span>(x,ch[y][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">pushup</span>(y);</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!now)<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">pushdown</span>(now);</span><br><span class="line"><span class="built_in">print</span>(ch[now][<span class="number">0</span>]);</span><br><span class="line">cout&lt;&lt;now&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(ch[now][<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n,m,x,y;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">rt=<span class="built_in">merge</span>(rt,<span class="built_in">addP</span>(i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l,r,w,z;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="built_in">split</span>(rt,r,x,y);</span><br><span class="line"><span class="built_in">split</span>(x,l<span class="number">-1</span>,w,z);</span><br><span class="line">tag[z]^=<span class="number">1</span>;</span><br><span class="line">rt=<span class="built_in">merge</span>(<span class="built_in">merge</span>(w,z),y);</span><br><span class="line"><span class="comment">//print(rt);</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;\n&quot;&lt;&lt;rt&lt;&lt;&quot; &quot;&lt;&lt;w&lt;&lt;&quot; &quot;&lt;&lt;z&lt;&lt;&quot; &quot;&lt;&lt;siz[rt]&lt;&lt;&quot; &quot;&lt;&lt;siz[0]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(rt);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Trick-1-复杂信息合并">Trick 1: 复杂信息合并</h2><p>直接拆标记就行了。</p><p>例题：P7706</p><p>题意：有两个序列 $A_i$ 和 $B_i$，支持对两个序列单点修改，查询一个区间的 $A_i+A_k-\min(B_j)\ (i&lt;j&lt;k)$ 最大值。</p><p>首先，由于外面的那层最大值，如果 $B_j$ 不是最小那么一定不满足最大，所以式子可以简化成 $A_i+A_k-B_j$。</p><p>然后直接考虑如何合并区间标记。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/43c8kkbu.png" alt=""></p><p>第一种情况，合并后的 $i,j,k$ 在左右区间其中一个。</p><p>直接继承即可。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/j2063lrr.png" alt=""></p><p>第二种情况，合并后的 $i,j,k$ 在不同区间。</p><p>其中 $i$ 或 $k$ 独占一个区间的情况本质相同，这里只分析 $k$ 独占一个区间的情况。</p><p>不难发现，此时 $k$ 可以是右区间任意数，最优情况是右区间最大值。这下只有 $A_i-B_j$ 需要满足最大了，显然不能直接维护，仍然要拆标记。</p><p>第一种情况和第一张图类似，直接继承即可。</p><p>第二种情况其实就是左区间的最大值减去右区间的最小值，相应维护就行了。</p><p>这样就解决这道题了。注意答案有可能为负数，初始值要设置正确。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P7706 「Wdsr-2.7」文文的摄影布置</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P7706</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[maxn],b[maxn];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line"><span class="type">int</span> ij,jk,maxA,minB,ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;ij=jk=ans=<span class="number">-1e9</span>,maxA=<span class="number">-1e9</span>,minB=<span class="number">1e9</span>;&#125;</span><br><span class="line">&#125;xds[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function">node <span class="title">merge</span><span class="params">(node A,node B)</span></span>&#123;</span><br><span class="line">node res;</span><br><span class="line">res.<span class="built_in">init</span>();</span><br><span class="line">res.ij=<span class="built_in">max</span>(A.maxA-B.minB,<span class="built_in">max</span>(A.ij,B.ij));</span><br><span class="line">res.jk=<span class="built_in">max</span>(B.maxA-A.minB,<span class="built_in">max</span>(A.jk,B.jk));</span><br><span class="line">res.maxA=<span class="built_in">max</span>(A.maxA,B.maxA);</span><br><span class="line">res.minB=<span class="built_in">min</span>(A.minB,B.minB);</span><br><span class="line">res.ans=<span class="built_in">max</span>(<span class="built_in">max</span>(A.ij+B.maxA,A.maxA+B.jk),<span class="built_in">max</span>(A.ans,B.ans));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">xds[now]=<span class="built_in">merge</span>(xds[now&lt;&lt;<span class="number">1</span>],xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bulid</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">xds[now].<span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> xds[now].maxA=a[l],xds[now].minB=b[l],<span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdfA</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> q,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> xds[now].maxA=v,<span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(q&lt;=mid)<span class="built_in">mdfA</span>(now&lt;&lt;<span class="number">1</span>,l,mid,q,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">mdfA</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,q,v);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdfB</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> q,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> xds[now].minB=v,<span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(q&lt;=mid)<span class="built_in">mdfB</span>(now&lt;&lt;<span class="number">1</span>,l,mid,q,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">mdfB</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,q,v);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">q</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)<span class="keyword">return</span> xds[now];</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">node res;</span><br><span class="line">res.<span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)res=<span class="built_in">merge</span>(res,<span class="built_in">q</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(mid,sr)));</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)res=<span class="built_in">merge</span>(res,<span class="built_in">q</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr));</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;b[i];</span><br><span class="line"><span class="built_in">bulid</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="type">int</span> op,x,y;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;m&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">cin&gt;&gt;op&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>)<span class="built_in">mdfA</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)<span class="built_in">mdfB</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y);</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;(<span class="built_in">q</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y)).ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Trick-2-复杂标记的处理">Trick 2: 复杂标记的处理</h2><p>例题 1：P3215</p><p>首先想想询问怎么实现。</p><p>对于一个区间，如果我们知道其区间没有匹配的右括号前缀最大值和没有匹配的左括号的后缀最大值，那么答案就是 $\lceil\frac{premax}{2}\rceil+\lceil\frac{sufmax}{2}\rceil$。取左括号是 $1$，右括号为 $-1$，那么就是求区间前缀最小值和区间后缀最大值，那么合并的时候只需要对跨区间的区间操作进行处理就行了。注意到有翻转操作，那么需要维护前缀最大最小值和后缀最大最小值。</p><p>对于 <code>Swap</code> 操作，不难发现除翻转两个儿子外还需要前缀后缀的最值一一交换。</p><p>对于 <code>Replace</code> 操作，这个是简单的。</p><p><code>pushdown</code> 时，还要考虑是先进行 <code>swap</code> 还是 <code>replace</code>。如果在打 <code>replace</code> 标记的时候清空 <code>swap</code> 标记，那么这个顺序其实没有什么影响。</p><p>最后就是最简单的 <code>Invert</code> 操作了，不难发现这种操作只有 $2$ 种可能性，那么直接维护两种情况的信息就行了（开两颗平衡树就行了）。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P3215 [HNOI2011] 括号修复 /  [JSOI2011]括号序列</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P3215</span></span><br><span class="line"><span class="comment">// Memory Limit: 128 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> siz[maxn],sum[maxn],swa[maxn],premax[maxn],premin[maxn],sufmax[maxn],sufmin[maxn];</span><br><span class="line"><span class="type">int</span> rep[maxn],ch[maxn][<span class="number">2</span>],val[maxn],pri[maxn];</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"><span class="type">int</span> rt1,rt2,cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">addP</span><span class="params">(<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">siz[++cnt]=<span class="number">1</span>;</span><br><span class="line">sum[cnt]=v;</span><br><span class="line">val[cnt]=v;</span><br><span class="line">pri[cnt]=<span class="built_in">rnd</span>();</span><br><span class="line">premax[cnt]=<span class="built_in">max</span>(sum[cnt],premax[cnt]);</span><br><span class="line">premin[cnt]=<span class="built_in">min</span>(sum[cnt],premin[cnt]);</span><br><span class="line">sufmax[cnt]=<span class="built_in">max</span>(sum[cnt],sufmax[cnt]);</span><br><span class="line">sufmin[cnt]=<span class="built_in">min</span>(sum[cnt],sufmin[cnt]);</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">siz[now]=siz[ch[now][<span class="number">0</span>]]+siz[ch[now][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">sum[now]=sum[ch[now][<span class="number">0</span>]]+sum[ch[now][<span class="number">1</span>]]+val[now];</span><br><span class="line">premax[now]=<span class="built_in">max</span>(premax[ch[now][<span class="number">0</span>]],sum[ch[now][<span class="number">0</span>]]+val[now]+premax[ch[now][<span class="number">1</span>]]);</span><br><span class="line">premin[now]=<span class="built_in">min</span>(premin[ch[now][<span class="number">0</span>]],sum[ch[now][<span class="number">0</span>]]+val[now]+premin[ch[now][<span class="number">1</span>]]);</span><br><span class="line">sufmin[now]=<span class="built_in">min</span>(sufmin[ch[now][<span class="number">1</span>]],sum[ch[now][<span class="number">1</span>]]+val[now]+sufmin[ch[now][<span class="number">0</span>]]);</span><br><span class="line">sufmax[now]=<span class="built_in">max</span>(sufmax[ch[now][<span class="number">1</span>]],sum[ch[now][<span class="number">1</span>]]+val[now]+sufmax[ch[now][<span class="number">0</span>]]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">S</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="built_in">swap</span>(premax[x],sufmax[x]);</span><br><span class="line"><span class="built_in">swap</span>(premin[x],sufmin[x]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sw</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="built_in">swap</span>(ch[x][<span class="number">0</span>],ch[x][<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">S</span>(x);</span><br><span class="line">swa[x]^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">repl</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">sum[x]=siz[x]*v;</span><br><span class="line">val[x]=v;</span><br><span class="line"><span class="keyword">if</span>(v==<span class="number">1</span>)premax[x]=sufmax[x]=sum[x],premin[x]=sufmin[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> premin[x]=sufmin[x]=sum[x],premax[x]=sufmax[x]=<span class="number">0</span>;</span><br><span class="line">rep[x]=v;</span><br><span class="line">swa[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(rep[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[x][<span class="number">0</span>])<span class="built_in">repl</span>(ch[x][<span class="number">0</span>],rep[x]);</span><br><span class="line"><span class="keyword">if</span>(ch[x][<span class="number">1</span>])<span class="built_in">repl</span>(ch[x][<span class="number">1</span>],rep[x]);</span><br><span class="line">rep[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(swa[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[x][<span class="number">0</span>])<span class="built_in">sw</span>(ch[x][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(ch[x][<span class="number">1</span>])<span class="built_in">sw</span>(ch[x][<span class="number">1</span>]);</span><br><span class="line">swa[x]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> k,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!now)x=y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(now);</span><br><span class="line"><span class="keyword">if</span>(siz[ch[now][<span class="number">0</span>]]&gt;=k)y=now,<span class="built_in">split</span>(ch[now][<span class="number">0</span>],k,x,ch[now][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">else</span> x=now,<span class="built_in">split</span>(ch[now][<span class="number">1</span>],k-siz[ch[now][<span class="number">0</span>]]<span class="number">-1</span>,ch[now][<span class="number">1</span>],y);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x||!y)<span class="keyword">return</span> x+y;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pri[x]&gt;pri[y])&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line">ch[x][<span class="number">1</span>]=<span class="built_in">merge</span>(ch[x][<span class="number">1</span>],y);</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(y);</span><br><span class="line">ch[y][<span class="number">0</span>]=<span class="built_in">merge</span>(x,ch[y][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">pushup</span>(y);</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">char</span> o;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getv</span><span class="params">(<span class="type">char</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u==<span class="string">&#x27;(&#x27;</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;o;</span><br><span class="line"><span class="type">int</span> vv=<span class="built_in">getv</span>(o);</span><br><span class="line">rt1=<span class="built_in">merge</span>(rt1,<span class="built_in">addP</span>(vv));</span><br><span class="line">rt2=<span class="built_in">merge</span>(rt2,<span class="built_in">addP</span>(-vv));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l,r,x,y,z,w;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r&gt;&gt;o;</span><br><span class="line"><span class="type">int</span> vv=<span class="built_in">getv</span>(o);</span><br><span class="line"><span class="built_in">split</span>(rt1,r,x,y);</span><br><span class="line"><span class="built_in">split</span>(x,l<span class="number">-1</span>,z,w);</span><br><span class="line"><span class="built_in">repl</span>(w,vv);</span><br><span class="line">rt1=<span class="built_in">merge</span>(<span class="built_in">merge</span>(z,w),y);</span><br><span class="line"><span class="built_in">split</span>(rt2,r,x,y);</span><br><span class="line"><span class="built_in">split</span>(x,l<span class="number">-1</span>,z,w);</span><br><span class="line"><span class="built_in">repl</span>(w,-vv);</span><br><span class="line">rt2=<span class="built_in">merge</span>(<span class="built_in">merge</span>(z,w),y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;S&#x27;</span>)&#123;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="built_in">split</span>(rt1,r,x,y);</span><br><span class="line"><span class="built_in">split</span>(x,l<span class="number">-1</span>,z,w);</span><br><span class="line"><span class="built_in">sw</span>(w);</span><br><span class="line">rt1=<span class="built_in">merge</span>(<span class="built_in">merge</span>(z,w),y);</span><br><span class="line"><span class="built_in">split</span>(rt2,r,x,y);</span><br><span class="line"><span class="built_in">split</span>(x,l<span class="number">-1</span>,z,w);</span><br><span class="line"><span class="built_in">sw</span>(w);</span><br><span class="line">rt2=<span class="built_in">merge</span>(<span class="built_in">merge</span>(z,w),y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;I&#x27;</span>)&#123;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="type">int</span> xx,yy,zz,ww;</span><br><span class="line"><span class="built_in">split</span>(rt1,r,x,y);</span><br><span class="line"><span class="built_in">split</span>(x,l<span class="number">-1</span>,z,w);</span><br><span class="line"><span class="built_in">split</span>(rt2,r,xx,yy);</span><br><span class="line"><span class="built_in">split</span>(xx,l<span class="number">-1</span>,zz,ww);</span><br><span class="line"><span class="built_in">swap</span>(w,ww);</span><br><span class="line">rt1=<span class="built_in">merge</span>(<span class="built_in">merge</span>(z,w),y);</span><br><span class="line">rt2=<span class="built_in">merge</span>(<span class="built_in">merge</span>(zz,ww),yy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="built_in">split</span>(rt1,r,x,y);</span><br><span class="line"><span class="built_in">split</span>(x,l<span class="number">-1</span>,z,w);</span><br><span class="line">cout&lt;&lt;<span class="built_in">ceil</span>(<span class="built_in">abs</span>(premin[w])/<span class="number">2.0</span>)+<span class="built_in">ceil</span>(<span class="built_in">abs</span>(sufmax[w])/<span class="number">2.0</span>)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">rt1=<span class="built_in">merge</span>(<span class="built_in">merge</span>(z,w),y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码可能有一些锅，数据真的很水。</p><p>例题 2：P7739</p><p>这个如如题要用矩阵，等我学了矩阵维护数列之后再来写。</p><p>回来啦！</p><p>这个题还是比较抽象的。</p><p>考虑对于一次转移，即 $\frac{x}{y}$ 变为 $\frac{y}{ay+x}$，对于矩阵 $[x\ \ \ y]$ 就是乘上 $\begin{bmatrix}<br>a &amp; 1\<br>1 &amp; 0<br>\end{bmatrix}$。</p><p>那么不难发现初始值为 $[1\ \ \ 0]$，答案矩阵就是初始矩阵乘上操作矩阵在乘上 $a=0$ 和 $1$ 的两个转移矩阵。</p><p>对于 <code>W</code> 操作，有 $\begin{bmatrix}<br>1 &amp; 1\<br>0 &amp; 1<br>\end{bmatrix}\times\begin{bmatrix}<br>a &amp; 1\<br>1 &amp; 0<br>\end{bmatrix}=\begin{bmatrix}<br>a+1 &amp; 1\<br>1 &amp; 0<br>\end{bmatrix}$。所以直接左乘一个 $\begin{bmatrix}<br>1 &amp; 1\<br>0 &amp; 1<br>\end{bmatrix}$ 即可。考虑到这道题有翻转操作，所以在维护区间的时候要维护翻转后的乘积。那么直接按操作顺序正序与逆序都乘一遍就行了。（正序是放在右边乘，逆序是放在左边乘）</p><p>对于 <code>E</code> 操作，手玩一下可以发现两种情况最终变换出的结果是相同的。由于这种维护方式无法维护到倒数第二个数列的数到底是什么，所以直接对加数那种操作进行模拟。根据答案是逆序乘的原理，这个操作的答案矩阵也应该是该操作所有子操作的矩阵乘起来。加数和加减值前面都提到是什么矩阵，乘起来得到这个操作的矩阵是 $\begin{bmatrix}<br>2 &amp; -1\<br>1 &amp; 0<br>\end{bmatrix}$。</p><p>对于翻转操作，除了翻转该节点自己的两个儿子，还要交换该节点自己的正序积和逆序积，并下传标记。</p><p>对于 <code>FILP</code> 操作，也是最简单的，直接维护两棵平衡树即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P7739 [NOI2021] 密码箱</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P7739</span></span><br><span class="line"><span class="comment">// Memory Limit: 1 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">6e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> S=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span>&#123;</span><br><span class="line"><span class="type">int</span> num[<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;S;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;S;j++)&#123;</span><br><span class="line">num[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">I</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> o=<span class="number">0</span>;o&lt;S;o++)num[o][o]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">matrix <span class="keyword">operator</span> * (<span class="type">const</span> matrix a) <span class="type">const</span>&#123;</span><br><span class="line">matrix res;</span><br><span class="line">res.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;S;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;S;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;S;k++)&#123;</span><br><span class="line">res.num[i][j]+=a.num[k][j]*num[i][k]%mod;</span><br><span class="line">res.num[i][j]+=mod;</span><br><span class="line">res.num[i][j]%=mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">out</span><span class="params">()</span></span>&#123;</span><br><span class="line">cout&lt;&lt;num[<span class="number">0</span>][<span class="number">0</span>]%mod&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;num[<span class="number">0</span>][<span class="number">1</span>]%mod&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">matrix rev[maxn],mul[maxn],mat[maxn];</span><br><span class="line"><span class="type">bool</span> tag[maxn];</span><br><span class="line"><span class="type">int</span> ch[maxn][<span class="number">2</span>],pri[maxn],siz[maxn];</span><br><span class="line"><span class="function">mt19937 <span class="title">rnd</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"><span class="type">int</span> rt1,rt2,cnt;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">addP</span><span class="params">(matrix v)</span></span>&#123;</span><br><span class="line">mul[++cnt]=v;</span><br><span class="line">rev[cnt]=v;</span><br><span class="line">mat[cnt]=v;</span><br><span class="line">siz[cnt]=<span class="number">1</span>;</span><br><span class="line">pri[cnt]=<span class="built_in">rnd</span>();</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">siz[now]=<span class="number">1</span>+siz[ch[now][<span class="number">0</span>]]+siz[ch[now][<span class="number">1</span>]];</span><br><span class="line">mul[now]=mul[ch[now][<span class="number">0</span>]]*mat[now]*mul[ch[now][<span class="number">1</span>]];</span><br><span class="line">rev[now]=rev[ch[now][<span class="number">1</span>]]*mat[now]*rev[ch[now][<span class="number">0</span>]];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">matrix W,E;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushrev</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="built_in">swap</span>(ch[now][<span class="number">0</span>],ch[now][<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">swap</span>(mul[now],rev[now]);</span><br><span class="line">tag[now]^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tag[now])&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[now][<span class="number">0</span>])<span class="built_in">pushrev</span>(ch[now][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">if</span>(ch[now][<span class="number">1</span>])<span class="built_in">pushrev</span>(ch[now][<span class="number">1</span>]);</span><br><span class="line">tag[now]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> k,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!now)x=y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(now);</span><br><span class="line"><span class="keyword">if</span>(siz[ch[now][<span class="number">0</span>]]&gt;=k)y=now,<span class="built_in">split</span>(ch[now][<span class="number">0</span>],k,x,ch[y][<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">else</span> x=now,<span class="built_in">split</span>(ch[now][<span class="number">1</span>],k-siz[ch[now][<span class="number">0</span>]]<span class="number">-1</span>,ch[x][<span class="number">1</span>],y);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x||!y)<span class="keyword">return</span> x+y;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(pri[x]&gt;pri[y])&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(x);</span><br><span class="line">ch[x][<span class="number">1</span>]=<span class="built_in">merge</span>(ch[x][<span class="number">1</span>],y);</span><br><span class="line"><span class="built_in">pushup</span>(x);</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">pushdown</span>(y);</span><br><span class="line">ch[y][<span class="number">0</span>]=<span class="built_in">merge</span>(x,ch[y][<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">pushup</span>(y);</span><br><span class="line"><span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line">matrix ned1,ned2,ans;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;maxn;i++)rev[i].<span class="built_in">I</span>(),mul[i].<span class="built_in">I</span>(),mat[i].<span class="built_in">I</span>();</span><br><span class="line">W.<span class="built_in">clear</span>();</span><br><span class="line">W.<span class="built_in">I</span>(),W.num[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">E.<span class="built_in">clear</span>();</span><br><span class="line">E.num[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">2</span>,E.num[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">-1</span>,E.num[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;c;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;W&#x27;</span>)&#123;</span><br><span class="line">rt1=<span class="built_in">merge</span>(rt1,<span class="built_in">addP</span>(W));</span><br><span class="line">rt2=<span class="built_in">merge</span>(rt2,<span class="built_in">addP</span>(E));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">rt1=<span class="built_in">merge</span>(rt1,<span class="built_in">addP</span>(E));</span><br><span class="line">rt2=<span class="built_in">merge</span>(rt2,<span class="built_in">addP</span>(W));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">ned1.num[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">ned2=W;</span><br><span class="line">ans=ned1*rev[rt1]*ned2;</span><br><span class="line">ans.<span class="built_in">out</span>();</span><br><span class="line"><span class="type">int</span> x,y,z,w,xx,yy,zz,ww;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">cin&gt;&gt;c;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;W&#x27;</span>)&#123;</span><br><span class="line">rt1=<span class="built_in">merge</span>(rt1,<span class="built_in">addP</span>(W));</span><br><span class="line">rt2=<span class="built_in">merge</span>(rt2,<span class="built_in">addP</span>(E));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">rt1=<span class="built_in">merge</span>(rt1,<span class="built_in">addP</span>(E));</span><br><span class="line">rt2=<span class="built_in">merge</span>(rt2,<span class="built_in">addP</span>(W));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;F&#x27;</span>)&#123;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="built_in">split</span>(rt1,r,x,y);</span><br><span class="line"><span class="built_in">split</span>(x,l<span class="number">-1</span>,z,w);</span><br><span class="line"><span class="built_in">split</span>(rt2,r,xx,yy);</span><br><span class="line"><span class="built_in">split</span>(xx,l<span class="number">-1</span>,zz,ww);</span><br><span class="line"><span class="built_in">swap</span>(ww,w);</span><br><span class="line">rt1=<span class="built_in">merge</span>(<span class="built_in">merge</span>(z,w),y);</span><br><span class="line">rt2=<span class="built_in">merge</span>(<span class="built_in">merge</span>(zz,ww),yy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line"><span class="built_in">split</span>(rt1,r,x,y);</span><br><span class="line"><span class="built_in">split</span>(x,l<span class="number">-1</span>,z,w);</span><br><span class="line"><span class="built_in">pushrev</span>(w);</span><br><span class="line">rt1=<span class="built_in">merge</span>(<span class="built_in">merge</span>(z,w),y);</span><br><span class="line"><span class="built_in">split</span>(rt2,r,x,y);</span><br><span class="line"><span class="built_in">split</span>(x,l<span class="number">-1</span>,z,w);</span><br><span class="line"><span class="built_in">pushrev</span>(w);</span><br><span class="line">rt2=<span class="built_in">merge</span>(<span class="built_in">merge</span>(z,w),y);</span><br><span class="line">&#125;</span><br><span class="line">ans=ned1*rev[rt1]*ned2;</span><br><span class="line">ans.<span class="built_in">out</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Trick-3-矩阵维护数列">Trick 3: 矩阵维护数列</h2><p>这个是我自己加的。</p><p>通常来讲，一道题的修改都是线性变换时可以使用矩阵来维护数列。</p><p>最通俗的理解，就是一个矩阵每一列是对应参数的系数，每一行是变换后最终的数。</p><p>比如说区间加，区间赋值，区间赋值为另一个数列的 $k$ 倍，区间乘都可以维护：</p><p>（按顺序）<br>$$<br>\begin{bmatrix}<br>1 &amp; v\<br>0 &amp; 1<br>\end{bmatrix}<br>$$<br>（横 1 是区间和，横 2 是区间长度）<br>$$<br>\begin{bmatrix}<br>0 &amp; v\<br>0 &amp; 1<br>\end{bmatrix}<br>$$<br>（横 1 是区间和，横 2 是区间长度）<br>$$<br>\begin{bmatrix}<br>0 &amp; k &amp; 0\<br>0 &amp; 1 &amp; 0\<br>0 &amp; 0 &amp; 1<br>\end{bmatrix}<br>$$<br>（横 1 是区间和，横 2 是赋值数列区间和，横 3 是区间长度）<br>$$<br>\begin{bmatrix}<br>k &amp; 0\<br>0 &amp; 1<br>\end{bmatrix}<br>$$<br>（横 1 是区间和，横 2 是区间长度）</p><p>当然还有一些复杂一点的。</p><p>典题：P7453 大魔法师</p><p>对于每一个操作的矩阵：</p><p>（横 1 是 $A$ 区间和，横 2 是 $B$ 区间和，横 3 是 $C$ 区间和，横 4 为区间长度）<br>$$<br>\begin{bmatrix}<br>1 &amp; 1 &amp; 0 &amp; 0\<br>0 &amp; 1 &amp; 0 &amp; 0\<br>0 &amp; 0 &amp; 1 &amp; 0\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\end{bmatrix}<br>$$</p><p>$$<br>\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0\<br>0 &amp; 1 &amp; 1 &amp; 0\<br>0 &amp; 0 &amp; 1 &amp; 0\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\end{bmatrix}<br>$$</p><p>$$<br>\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0\<br>0 &amp; 1 &amp; 0 &amp; 0\<br>1 &amp; 0 &amp; 1 &amp; 0\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\end{bmatrix}<br>$$</p><p>$$<br>\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; v\<br>0 &amp; 1 &amp; 0 &amp; 0\<br>0 &amp; 0 &amp; 1 &amp; 0\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\end{bmatrix}<br>$$</p><p>$$<br>\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0\<br>0 &amp; v &amp; 0 &amp; 0\<br>0 &amp; 0 &amp; 1 &amp; 0\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\end{bmatrix}<br>$$</p><p>$$<br>\begin{bmatrix}<br>1 &amp; 0 &amp; 0 &amp; 0\<br>0 &amp; 1 &amp; 0 &amp; 0\<br>0 &amp; 0 &amp; 0 &amp; v\<br>0 &amp; 0 &amp; 0 &amp; 1<br>\end{bmatrix}<br>$$</p><p>注意到代码中用的答案矩阵是横着的，为了更好地维护信息，最好选择这样，能规避左乘带来的奇怪问题，尽量转化成右乘，所以矩阵都要沿对角线对称一下。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P7453 [THUSCH2017] 大魔法师</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P7453</span></span><br><span class="line"><span class="comment">// Memory Limit: 500 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 5000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> S=<span class="number">4</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">an</span>&#123;</span><br><span class="line"><span class="type">int</span> a,b,c;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">a=<span class="number">0</span>,b=<span class="number">0</span>,c=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">an <span class="keyword">operator</span> + (<span class="type">const</span> an p)<span class="type">const</span>&#123;</span><br><span class="line">an res;</span><br><span class="line">res.<span class="built_in">init</span>();</span><br><span class="line">res.a=p.a+a;</span><br><span class="line">res.b=p.b+b;</span><br><span class="line">res.c=p.c+c;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span>&#123;</span><br><span class="line"><span class="type">int</span> num[S][S];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;S;i++)<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;S;j++)num[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">I</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;S;i++)num[i][i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> == (<span class="type">const</span> matrix a) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;S;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;S;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a.num[i][j]!=num[i][j])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line">matrix <span class="keyword">operator</span> * (<span class="type">const</span> matrix a) <span class="type">const</span> &#123;</span><br><span class="line">matrix res;</span><br><span class="line">res.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;S;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;S;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;S;k++)&#123;</span><br><span class="line">res.num[i][j]+=a.num[k][j]*num[i][k];</span><br><span class="line">&#125;</span><br><span class="line">res.num[i][j]%=mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">matrix <span class="keyword">operator</span> + (<span class="type">const</span> matrix a) <span class="type">const</span> &#123;</span><br><span class="line">matrix res;</span><br><span class="line">res.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;S;j++)&#123;<span class="comment">//maxi=0</span></span><br><span class="line">res.num[i][j]=num[i][j]+a.num[i][j];</span><br><span class="line">res.num[i][j]%=mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">P</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;S;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;S;j++)&#123;</span><br><span class="line">cout&lt;&lt;num[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> _4(<span class="type">int</span> v)&#123;</span><br><span class="line">num[<span class="number">3</span>][<span class="number">0</span>]=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> _5(<span class="type">int</span> v)&#123;</span><br><span class="line">num[<span class="number">1</span>][<span class="number">1</span>]=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> _6(<span class="type">int</span> v)&#123;</span><br><span class="line">num[<span class="number">3</span>][<span class="number">2</span>]=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">num[<span class="number">0</span>][<span class="number">0</span>]=a;</span><br><span class="line">num[<span class="number">0</span>][<span class="number">1</span>]=b;</span><br><span class="line">num[<span class="number">0</span>][<span class="number">2</span>]=c;</span><br><span class="line">num[<span class="number">0</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">an <span class="title">getans</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;num[<span class="number">0</span>][<span class="number">0</span>],num[<span class="number">0</span>][<span class="number">1</span>],num[<span class="number">0</span>][<span class="number">2</span>]&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2.5e5</span>+<span class="number">5</span>;</span><br><span class="line">matrix I,_1,_2,_3,_4,_5,_6,org[maxn];</span><br><span class="line">matrix xds[maxn&lt;&lt;<span class="number">2</span>],lazy[maxn&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prework</span><span class="params">()</span></span>&#123;</span><br><span class="line">I.<span class="built_in">I</span>();</span><br><span class="line">_1.<span class="built_in">I</span>();</span><br><span class="line">_2.<span class="built_in">I</span>();</span><br><span class="line">_3.<span class="built_in">I</span>();</span><br><span class="line">_4.<span class="built_in">I</span>();</span><br><span class="line">_5.<span class="built_in">I</span>();</span><br><span class="line">_6.<span class="built_in">I</span>();</span><br><span class="line">_1.num[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">_2.num[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">_3.num[<span class="number">0</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">_6.num[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">xds[now]=xds[now&lt;&lt;<span class="number">1</span>]+xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="comment">//if(lazy[now]==I)&#123;</span></span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>]=xds[now&lt;&lt;<span class="number">1</span>]*lazy[now];</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*lazy[now];</span><br><span class="line">lazy[now&lt;&lt;<span class="number">1</span>]=lazy[now&lt;&lt;<span class="number">1</span>]*lazy[now];</span><br><span class="line">lazy[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lazy[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]*lazy[now];</span><br><span class="line">lazy[now].<span class="built_in">I</span>();</span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bulid</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">lazy[now].<span class="built_in">I</span>();</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> xds[now]=org[l],<span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr,matrix v)</span></span>&#123;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)&#123;</span><br><span class="line">xds[now]=xds[now]*v;</span><br><span class="line">lazy[now]=lazy[now]*v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)<span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid),v);</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)<span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(mid+<span class="number">1</span>,sl),sr,v);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">an <span class="title">q</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)<span class="keyword">return</span> xds[now].<span class="built_in">getans</span>();</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">an res;</span><br><span class="line">res.<span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)res=res+<span class="built_in">q</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(mid,sr));</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)res=res+<span class="built_in">q</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(mid+<span class="number">1</span>,sl),sr);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">prework</span>();</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> a,b,c,op;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">org[i].<span class="built_in">init</span>(a,b,c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">bulid</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line"><span class="comment">// xds[1].P();</span></span><br><span class="line"><span class="comment">//cerr&lt;&lt;m&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">cin&gt;&gt;op&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,a,b,_1);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,a,b,_2);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,a,b,_3);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">4</span>)&#123;</span><br><span class="line">cin&gt;&gt;c;</span><br><span class="line">_4._4(c);</span><br><span class="line"><span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,a,b,_4);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">5</span>)&#123;</span><br><span class="line">cin&gt;&gt;c;</span><br><span class="line">_5._5(c);</span><br><span class="line"><span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,a,b,_5);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">6</span>)&#123;</span><br><span class="line">cin&gt;&gt;c;</span><br><span class="line">_6._6(c);</span><br><span class="line"><span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,a,b,_6);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">an buf=<span class="built_in">q</span>(<span class="number">1</span>,<span class="number">1</span>,n,a,b);</span><br><span class="line">cout&lt;&lt;buf.a%mod&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;buf.b%mod&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;buf.c%mod&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Trick-4-pre数组的技巧">Trick 4: pre数组的技巧</h2><p>这种思想差不多就是对于一个询问，按右端点排序之后，我们完全可以只关注出现过的数的最右边的那个就行了。</p><p>也就是说读取到一个数时，如果前面已经出现过这个数，直接把这个数产生的贡献删除，再加入当前点的贡献，本质是一种时间线上的离线扫描线。</p><p>预处理时要预处理出这个数之前在哪里出现过，即 <code>pre</code> 数组，通常用于去除重复贡献。</p><p>板子题：P1972 HH 的项链</p><p>一句话：贡献的加入和删除直接在下标上完成（即指当前该位置上是否可能对答案有贡献），询问时直接区间和就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P1972 [SDOI2009] HH的项链</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P1972</span></span><br><span class="line"><span class="comment">// Memory Limit: 512 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> t[<span class="number">1000001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">t[x]+=v;</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">q</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">res+=t[x];</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> pre[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> a[<span class="number">1000001</span>],nxt[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> ans[<span class="number">1000001</span>];</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; L[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> m,l,r;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">if</span>(nxt[a[i]])pre[i]=nxt[a[i]];</span><br><span class="line">nxt[a[i]]=i;</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r;</span><br><span class="line">L[r].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(l,i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">mdf</span>(pre[i],<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">mdf</span>(i,<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> std=<span class="built_in">q</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> p:L[i])&#123;</span><br><span class="line">ans[p.second]=std-<span class="built_in">q</span>(p.first<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>lxl 的例题：P6617</p><p>考虑开始的时候记录最近的一个数与该数和为 $w$。然后发现没法修改，这个时候不难发现如果最近的和为 $w$ 的数比最近的相同的数远，可以将这个数的 $pre$ 设置为 $0$，这样就能保证修改复杂度正确。</p><p>对于修改，使用 <code>set</code> 作为桶维护数再哪些地方出现，然后大力分讨即可。可能出现改变的 $pre$ 只有五个：本身，原数的后面的第一个相等和和为 $w$ 的数，新数的后面的第一个相等和和为 $w$ 的数。</p><p>细节较多，注意合理使用哨兵。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P6617 鏌ユ壘 Search</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P6617</span></span><br><span class="line"><span class="comment">// Memory Limit: 128 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-11-30 20:40:25</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> pre[<span class="number">500005</span>],nxt[<span class="number">500005</span>],a[<span class="number">500005</span>];</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s[<span class="number">500005</span>];</span><br><span class="line"><span class="type">int</span> xds[<span class="number">2000200</span>];</span><br><span class="line"><span class="type">int</span> n,m,w;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">xds[now]=<span class="built_in">max</span>(xds[now&lt;&lt;<span class="number">1</span>],xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bulid</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> xds[now]=pre[l],<span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> q,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(q&gt;n||q&lt;<span class="number">1</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> xds[now]=v,<span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(q&lt;=mid)<span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>,l,mid,q,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,q,v);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmax</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)<span class="keyword">return</span> xds[now];</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)res=<span class="built_in">max</span>(res,<span class="built_in">qmax</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid)));</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)res=<span class="built_in">max</span>(res,<span class="built_in">qmax</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr));</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> op,x,y,C;</span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator it,ot;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;w;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">s[a[i]].<span class="built_in">insert</span>(i);</span><br><span class="line"><span class="keyword">if</span>(nxt[a[i]]&lt;=nxt[w-a[i]])pre[i]=nxt[w-a[i]];</span><br><span class="line">nxt[a[i]]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">bulid</span>(<span class="number">1</span>,<span class="number">1</span>,n); </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=w;i++)s[i].<span class="built_in">insert</span>(<span class="number">0</span>),s[i].<span class="built_in">insert</span>(n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin&gt;&gt;op&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[x]==y)<span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">//if(y==w/2)return 0;</span></span><br><span class="line"><span class="comment">// int org=a[x];</span></span><br><span class="line">s[a[x]].<span class="built_in">erase</span>(x);</span><br><span class="line"><span class="comment">/*Deal with itself*/</span></span><br><span class="line">it=s[w-y].<span class="built_in">upper_bound</span>(x);</span><br><span class="line">it--;</span><br><span class="line">ot=s[y].<span class="built_in">upper_bound</span>(x);</span><br><span class="line">ot--;</span><br><span class="line"><span class="keyword">if</span>(*it&gt;=*ot)<span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,*it);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//cout&lt;&lt;*it&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">/*Deal with orginal pre*/</span></span><br><span class="line">it=s[a[x]].<span class="built_in">lower_bound</span>(x);</span><br><span class="line">ot=s[w-a[x]].<span class="built_in">lower_bound</span>(x);</span><br><span class="line"><span class="keyword">if</span>(*it&gt;=*ot)&#123;</span><br><span class="line">it--,ot--;</span><br><span class="line"><span class="keyword">if</span>(*it&gt;=*ot)<span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,*(++ot),*it);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,*(++ot),<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">it--,ot--;</span><br><span class="line"><span class="keyword">if</span>(*it&gt;=*ot)<span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,*(++it),<span class="number">0</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,*(++it),*ot);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Deal with new pre*/</span></span><br><span class="line">a[x]=y;</span><br><span class="line">s[a[x]].<span class="built_in">insert</span>(x);</span><br><span class="line">it=s[a[x]].<span class="built_in">upper_bound</span>(x);</span><br><span class="line">ot=s[w-a[x]].<span class="built_in">upper_bound</span>(x);</span><br><span class="line"><span class="keyword">if</span>(*it&gt;=*ot)<span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,*ot,x);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,*it,<span class="number">0</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">x^=C,y^=C;</span><br><span class="line"><span class="comment">//if(y&lt;x)return 0;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;&quot; &quot;&lt;&lt;qmax(1,0,n,x,y)&lt;&lt;&quot; &quot;&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">qmax</span>(<span class="number">1</span>,<span class="number">1</span>,n,x,y)&gt;=x)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">C++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>均摊</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;线段树&amp;amp;平衡树&lt;/h1&gt;
&lt;h2 id=&quot;FHQ-Treap&quot;&gt;FHQ-Treap&lt;/h2&gt;
&lt;p&gt;其实就是一个通过笛卡尔树的微妙性质实现的平衡树。&lt;/p&gt;
&lt;p&gt;不谈复杂度，只需要分析分裂合并都该如何实现就行了。&lt;/p&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;</summary>
      
    
    
    
    <category term="OI" scheme="http://blog.eltaos.top/categories/OI/"/>
    
    
    <category term="OI" scheme="http://blog.eltaos.top/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>Strings</title>
    <link href="http://blog.eltaos.top/2023/Strings/"/>
    <id>http://blog.eltaos.top/2023/Strings/</id>
    <published>2023-12-07T16:00:00.000Z</published>
    <updated>2023-12-08T11:28:58.886Z</updated>
    
    <content type="html"><![CDATA[<h1>字符串哈希</h1><p>定义一个字符串到整数的映射 $f$，称为 Hash 函数。Hash 的核心思想是将输入的字符串转化为整数方便比较。</p><h2 id="哈希方式">哈希方式</h2><p>通用的方法是把字符串看成一个 $base$ 进制的数，即 $f_i=f_{i-1}\times base+s_i$。</p><p>这种哈希方法需要对大质数取模或者使用自然溢出。</p><p>不难发现这种方法存在类通项公式：<br>$$<br>f_i=s_1\times base^{i-1}+s_2\times base^{i-2}+\cdots+s_i\times base^0<br>$$<br>不难发现区间 $[l,r]$ 所形成的子串的哈希值是 $f_r-f_{l-1}\times base^{r-l+1}$。预处理 $base$ 的幂可以做到 $O(1)$ 处理子串哈希值。</p><h2 id="哈希错误率">哈希错误率</h2><p>取模数为 $10^9+7$，经过计算可得正确率：</p><ul class="lvl-0"><li class="lvl-2"><p>$O(n)=10^4$，有 $P=95.12%$。</p></li><li class="lvl-2"><p>$O(n)=10^5$，有 $P&lt;0.1%$。</p></li></ul><p>发现在大数据情况下极其容易出现哈希碰撞。</p><p>所以，对于较大的数据，可以对两个不同的大质数取模，或者取多个不同的 $base$，称作 <code>多哈希</code>。</p><h2 id="哈希经典应用">哈希经典应用</h2><h3 id="字符串匹配">字符串匹配</h3><p>取模式串的哈希值，预处理文本串哈希值，$O(1)$ 求出文本串中每个与模式串长度相同的子串的哈希值进行比较即可。</p><h3 id="最长回文子串">最长回文子串</h3><p>可以枚举回文中心（有 $2n$ 个）然后二分答案，时间复杂度是 $O(n\log n)$ 的，注意需要分别预处理正着和倒着的哈希值。</p><p>记 $ans_i$ 为以 $i$ 结尾的最长回文子串的长度，考虑 $ans_i\leq ans_{i-1}+2$，如果不合法就暴力向下递减。不难发现这个值是线性变化的，所以暴力最多要跑 $2n$ 次，总时间复杂度为 $O(n)$。</p><h3 id="最长公共前缀">最长公共前缀</h3><p>二分 + 哈希，二分前缀长度即可。</p><h2 id="例题">例题</h2><h3 id="P4824">P4824</h3><p>维护一个栈，每次计算哈希值，如果这个栈的后缀是违禁词，那么暴力删除即可，使用 $O(1)$ 哈希比较。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P4824 [USACO15FEB] Censoring S</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P4824</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-12-01 20:48:01</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string s,x;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> base1=<span class="number">11453</span>,base2=<span class="number">29521</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> _1[<span class="number">1000001</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> _2[<span class="number">1000001</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> hash1[<span class="number">1000001</span>],hx1[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> hash2[<span class="number">1000001</span>],hx2[<span class="number">1000001</span>];</span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="title">gethash</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make_pair</span>((hash1[r]%mod-_1[r-l+<span class="number">1</span>]*hash1[l<span class="number">-1</span>]%mod+mod)%mod,</span><br><span class="line">hash2[r]-_2[r-l+<span class="number">1</span>]*hash2[l<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f[<span class="number">1000001</span>],ff[<span class="number">1000001</span>];</span><br><span class="line">deque&lt;<span class="type">char</span>&gt; st;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000000</span>;i++)_1[i]=_1[i<span class="number">-1</span>]*base1%mod,_2[i]=_2[i<span class="number">-1</span>]*base2;</span><br><span class="line">cin&gt;&gt;s&gt;&gt;x;</span><br><span class="line"><span class="type">int</span> sizx=x.<span class="built_in">size</span>();</span><br><span class="line">hx1[<span class="number">0</span>]=hx2[<span class="number">0</span>]=x[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;sizx;i++)hx1[i]=(hx1[i<span class="number">-1</span>]*base1+x[i])%mod,hx2[i]=hx2[i<span class="number">-1</span>]*base2+x[i];</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; P=<span class="built_in">make_pair</span>(hx1[sizx<span class="number">-1</span>],hx2[sizx<span class="number">-1</span>]);</span><br><span class="line"><span class="type">int</span> sizs=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="type">int</span> top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;sizs;i++)&#123;</span><br><span class="line">top++;</span><br><span class="line">st.<span class="built_in">push_back</span>(s[i]);</span><br><span class="line">hash1[top]=(hash1[top<span class="number">-1</span>]*base1+s[i])%mod,hash2[top]=hash2[top<span class="number">-1</span>]*base2+s[i];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">gethash</span>(top-sizx+<span class="number">1</span>,top)==P)&#123;</span><br><span class="line">top=top-sizx;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=sizx;k++)st.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!st.<span class="built_in">empty</span>())cout&lt;&lt;st.<span class="built_in">front</span>(),st.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P3498">P3498</h3><p>直接枚举 $k$ 然后计算即可。时间复杂度为 $O(\sum_{i=1}^n \left\lfloor\frac{n}{k}\right\rfloor)=O(n \ln n)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P3498 [POI2010] KOR-Beads</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P3498</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-12-02 08:20:24</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> base1=<span class="number">99887</span>,base2=<span class="number">32997</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">hash_pair</span>&#123;</span><br><span class="line"><span class="function"><span class="type">size_t</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="type">const</span> pair&lt;<span class="type">long</span> <span class="type">long</span> ,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&gt; a)</span><span class="type">const</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> ((a.first+a.second)*<span class="number">10001</span>%mod+<span class="number">1007</span>*a.first+<span class="number">10007</span>*a.second)%mod;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">unordered_set&lt;pair&lt;<span class="type">long</span> <span class="type">long</span> ,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&gt;,hash_pair&gt; s;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> hash1[<span class="number">200001</span>],hx1[<span class="number">200005</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> hash2[<span class="number">200001</span>],hx2[<span class="number">200005</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> _1[<span class="number">200001</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> _2[<span class="number">200001</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; A[<span class="number">200001</span>];</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">int</span> n,a[<span class="number">200001</span>];</span><br><span class="line"><span class="function">pair&lt;<span class="type">long</span> <span class="type">long</span>,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&gt; <span class="title">gethash</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make_pair</span>(((hash1[r]-hash1[l<span class="number">-1</span>]*_1[r-l+<span class="number">1</span>]%mod)%mod+mod)%mod,</span><br><span class="line">hash2[r]-hash2[l<span class="number">-1</span>]*_2[r-l+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">pair&lt;<span class="type">long</span> <span class="type">long</span>,<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&gt; _gethash(<span class="type">int</span> l,<span class="type">int</span> r)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make_pair</span>(((hx1[l]-hx1[r+<span class="number">1</span>]*_1[r-l+<span class="number">1</span>]%mod)%mod+mod)%mod,</span><br><span class="line">hx2[l]-hx2[r+<span class="number">1</span>]*_2[r-l+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200000</span>;i++)_1[i]=_1[i<span class="number">-1</span>]*base1%mod,_2[i]=_2[i<span class="number">-1</span>]*base2;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">hash1[i]=(hash1[i<span class="number">-1</span>]*base1%mod+a[i])%mod;</span><br><span class="line">hash2[i]=hash2[i<span class="number">-1</span>]*base2+a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">hx1[i]=(hx1[i+<span class="number">1</span>]*base1%mod+a[i])%mod;</span><br><span class="line">hx2[i]=hx2[i+<span class="number">1</span>]*base2+a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j*i&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">count</span>(_gethash((j<span class="number">-1</span>)*i+<span class="number">1</span>,j*i)))<span class="keyword">continue</span>;</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="built_in">gethash</span>((j<span class="number">-1</span>)*i+<span class="number">1</span>,j*i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> siz=s.<span class="built_in">size</span>();</span><br><span class="line">A[siz].<span class="built_in">push_back</span>(i);</span><br><span class="line">ans=<span class="built_in">max</span>(ans,siz);</span><br><span class="line">s.<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;A[ans].<span class="built_in">size</span>()&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> p:A[ans])cout&lt;&lt;p&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P3538">P3538</h3><p>考虑判定循环节长度是否合法就是比较 $[l+len,r]$ 与 $[l,r-len]$ 哈希值是否相等。分解质因数后进行判定，若当前除去质因子后合法，那么保留该次除去的影响，直到找到最小解，这样可以做到 $O(q\log n)$。</p><p>下面是未加快读版：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P3538 [POI2012] OKR-A Horrible Poem</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P3538</span></span><br><span class="line"><span class="comment">// Memory Limit: 128 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-12-02 09:49:23</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> base=<span class="number">277</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> _[<span class="number">500001</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> hsh[<span class="number">500001</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">gethash</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hsh[r]-hsh[l<span class="number">-1</span>]*_[r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> prim[<span class="number">100001</span>],pcnt,isp[<span class="number">500001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">prework</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">500000</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!isp[i])prim[++pcnt]=i,isp[i]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=pcnt&amp;&amp;prim[j]*i&lt;=<span class="number">500000</span>;j++)&#123;</span><br><span class="line">isp[prim[j]*i]=prim[j];</span><br><span class="line"><span class="keyword">if</span>(i%prim[j]==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)_[i]=_[i<span class="number">-1</span>]*base;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;c;</span><br><span class="line">hsh[i]=hsh[i<span class="number">-1</span>]*base+c;</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="built_in">prework</span>();</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="type">int</span> len=y-x+<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> buf=len;</span><br><span class="line"><span class="keyword">while</span>(buf!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">// cout&lt;&lt;buf&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="type">int</span> pr=len/isp[buf];</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">gethash</span>(x+pr,y)==<span class="built_in">gethash</span>(x,y-pr))len=pr;</span><br><span class="line">buf/=isp[buf];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;len&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P4398">P4398</h3><p>二维哈希，类比二维前缀和做即可。通用的方法是先用 <code>base1</code> 算出横向哈希，再用 <code>base2</code> 算出纵向哈希值（这里是前缀和形式）。具体可见代码。</p><p>这道题要二分矩形边长，用 <code>unordered_set</code> 维护哈希值是否出现。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P4398 [JSOI2008] Blue Mary的战役地图</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P4398</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-12-02 11:05:51</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> base1=<span class="number">277</span>,base2=<span class="number">921</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> hsh[<span class="number">1001</span>][<span class="number">1001</span>],hx[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> _1[<span class="number">1001</span>]=&#123;<span class="number">1</span>&#125;,_2[<span class="number">1001</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">gethsh</span><span class="params">(<span class="type">int</span> X1,<span class="type">int</span> Y1,<span class="type">int</span> X2,<span class="type">int</span> Y2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hsh[X2][Y2]-hsh[X2][Y1<span class="number">-1</span>]*_1[Y2-Y1+<span class="number">1</span>]-</span><br><span class="line">hsh[X1<span class="number">-1</span>][Y2]*_2[X2-X1+<span class="number">1</span>]+hsh[X1<span class="number">-1</span>][Y1<span class="number">-1</span>]*_1[Y2-Y1+<span class="number">1</span>]*_2[X2-X1+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">gethx</span><span class="params">(<span class="type">int</span> X1,<span class="type">int</span> Y1,<span class="type">int</span> X2,<span class="type">int</span> Y2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hx[X2][Y2]-hx[X2][Y1<span class="number">-1</span>]*_1[Y2-Y1+<span class="number">1</span>]-</span><br><span class="line">hx[X1<span class="number">-1</span>][Y2]*_2[X2-X1+<span class="number">1</span>]+hx[X1<span class="number">-1</span>][Y1<span class="number">-1</span>]*_1[Y2-Y1+<span class="number">1</span>]*_2[X2-X1+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">unordered_set&lt;<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span>&gt; s;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1001</span>][<span class="number">1001</span>],b[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">s.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=x;j&lt;=n;j++)&#123;</span><br><span class="line">s.<span class="built_in">insert</span>(<span class="built_in">gethsh</span>(i-x+<span class="number">1</span>,j-x+<span class="number">1</span>,i,j));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=x;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">count</span>(<span class="built_in">gethx</span>(i-x+<span class="number">1</span>,j-x+<span class="number">1</span>,i,j)))<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)_1[i]=base1*_1[i<span class="number">-1</span>],_2[i]=base2*_2[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)cin&gt;&gt;a[i][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)cin&gt;&gt;b[i][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">hsh[i][j]=hsh[i][j<span class="number">-1</span>]*base1+a[i][j];</span><br><span class="line">hx[i][j]=hx[i][j<span class="number">-1</span>]*base1+b[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">hsh[i][j]+=hsh[i<span class="number">-1</span>][j]*base2;</span><br><span class="line">hx[i][j]+=hx[i<span class="number">-1</span>][j]*base2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=n,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid))ans=mid,l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P2601">P2601</h3><p>枚举对称正方形的中心，进行二分，二分出最远的满足条件的地方并统计答案。</p><p>要维护三个不同方向的哈希值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P2601 [ZJOI2009] 对称的正方形</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P2601</span></span><br><span class="line"><span class="comment">// Memory Limit: 128 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-12-02 11:51:52</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> base1=<span class="number">599</span>,base2=<span class="number">971</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> hsh1[<span class="number">1005</span>][<span class="number">1005</span>],hsh2[<span class="number">1005</span>][<span class="number">1005</span>],hsh3[<span class="number">1005</span>][<span class="number">1005</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> _1[<span class="number">1001</span>]=&#123;<span class="number">1</span>&#125;,_2[<span class="number">1001</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">gethash1</span><span class="params">(<span class="type">int</span> X1,<span class="type">int</span> Y1,<span class="type">int</span> X2,<span class="type">int</span> Y2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hsh1[X2][Y2]-hsh1[X2][Y1<span class="number">-1</span>]*_1[Y2-Y1+<span class="number">1</span>]</span><br><span class="line">-hsh1[X1<span class="number">-1</span>][Y2]*_2[X2-X1+<span class="number">1</span>]</span><br><span class="line">+hsh1[X1<span class="number">-1</span>][Y1<span class="number">-1</span>]*_1[Y2-Y1+<span class="number">1</span>]*_2[X2-X1+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">gethash2</span><span class="params">(<span class="type">int</span> X1,<span class="type">int</span> Y1,<span class="type">int</span> X2,<span class="type">int</span> Y2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hsh2[X1][Y2]-hsh2[X1][Y1<span class="number">-1</span>]*_1[Y2-Y1+<span class="number">1</span>]</span><br><span class="line">-hsh2[X2+<span class="number">1</span>][Y2]*_2[X2-X1+<span class="number">1</span>]</span><br><span class="line">+hsh2[X2+<span class="number">1</span>][Y1<span class="number">-1</span>]*_1[Y2-Y1+<span class="number">1</span>]*_2[X2-X1+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">gethash3</span><span class="params">(<span class="type">int</span> X1,<span class="type">int</span> Y1,<span class="type">int</span> X2,<span class="type">int</span> Y2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hsh3[X2][Y1]-hsh3[X2][Y2+<span class="number">1</span>]*_1[Y2-Y1+<span class="number">1</span>]</span><br><span class="line">-hsh3[X1<span class="number">-1</span>][Y1]*_2[X2-X1+<span class="number">1</span>]</span><br><span class="line">+hsh3[X1<span class="number">-1</span>][Y2+<span class="number">1</span>]*_1[Y2-Y1+<span class="number">1</span>]*_2[X2-X1+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> X1,<span class="type">int</span> Y1,<span class="type">int</span> X2,<span class="type">int</span> Y2)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gethash1</span>(X1,Y1,X2,Y2)==<span class="built_in">gethash2</span>(X1,Y1,X2,Y2)&amp;&amp;<span class="built_in">gethash1</span>(X1,Y1,X2,Y2)==<span class="built_in">gethash3</span>(X1,Y1,X2,Y2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++)_1[i]=_1[i<span class="number">-1</span>]*base1,_2[i]=_2[i<span class="number">-1</span>]*base2;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cin&gt;&gt;a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">hsh1[i][j]=hsh1[i][j<span class="number">-1</span>]*base1+a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">hsh1[i][j]+=hsh1[i<span class="number">-1</span>][j]*base2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">hsh2[i][j]=hsh2[i][j<span class="number">-1</span>]*base1+a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">hsh2[i][j]+=hsh2[i+<span class="number">1</span>][j]*base2;</span><br><span class="line"><span class="comment">// if(j==1)cout&lt;&lt;hsh2[i][j]-hsh2[i+1][j]*base2&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line">hsh3[i][j]=hsh3[i][j+<span class="number">1</span>]*base1+a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=m;j&gt;=<span class="number">1</span>;j--)&#123;</span><br><span class="line">hsh3[i][j]+=hsh3[i<span class="number">-1</span>][j]*base2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="comment">// cout&lt;&lt;check(1,1,1,1)&lt;&lt;&quot; &quot;&lt;&lt;gethash1(1,1,1,1)&lt;&lt;&quot; &quot;&lt;&lt;gethash2(1,1,1,1)&lt;&lt;&quot; &quot;&lt;&lt;hsh2[4][1]-hsh2[5][1]*base2&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">/*Deal with odd situations*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="type">int</span> nowans=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=<span class="built_in">min</span>(<span class="built_in">min</span>(n-i+<span class="number">1</span>,i),<span class="built_in">min</span>(m-j+<span class="number">1</span>,j));</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(i-mid+<span class="number">1</span>,j-mid+<span class="number">1</span>,i+mid<span class="number">-1</span>,j+mid<span class="number">-1</span>))nowans=mid,l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cout&lt;&lt;nowans&lt;&lt;&quot; &quot;;</span></span><br><span class="line">ans+=nowans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cout&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Deal with even situations*/</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;m;j++)&#123;</span><br><span class="line"><span class="type">int</span> nowans=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=<span class="built_in">min</span>(<span class="built_in">min</span>(n-i,i),<span class="built_in">min</span>(m-j,j));</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(i-mid+<span class="number">1</span>,j-mid+<span class="number">1</span>,i+mid,j+mid))nowans=mid,l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans+=nowans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SP4103">SP4103</h3><p>暴力用哈希长度从大到小查找最长回文后缀即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Extend to Palindrome</span></span><br><span class="line"><span class="comment">// Contest: SPOJ - Classical</span></span><br><span class="line"><span class="comment">// URL: https://www.spoj.com/problems/EPALIN/</span></span><br><span class="line"><span class="comment">// Memory Limit: 1536 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-12-02 15:42:17</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> base=<span class="number">1001</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> hsh[<span class="number">100001</span>],_hsh[<span class="number">100005</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> _[<span class="number">100001</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">char</span> s[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">gethash</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hsh[r]-hsh[l<span class="number">-1</span>]*_[r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> _gethash(<span class="type">int</span> l,<span class="type">int</span> r)&#123;</span><br><span class="line"><span class="keyword">return</span> _hsh[l]-_hsh[r+<span class="number">1</span>]*_[r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ed;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gethash</span>(ed-x+<span class="number">1</span>,ed-x+x/<span class="number">2</span>)==_gethash(ed-x/<span class="number">2</span>+<span class="number">1</span>,ed);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ed;i++)s[i]=hsh[i]=_hsh[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100000</span>;i++)_[i]=_[i<span class="number">-1</span>]*base;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;(s+<span class="number">1</span>))&#123;</span><br><span class="line">ed=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line"><span class="comment">// cout&lt;&lt;ed&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// int l=1,r=ed;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ed;i++)hsh[i]=hsh[i<span class="number">-1</span>]*base+s[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=ed;i&gt;=<span class="number">1</span>;i--)_hsh[i]=_hsh[i+<span class="number">1</span>]*base+s[i];</span><br><span class="line"><span class="type">int</span> nowans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(nowans=ed;nowans&gt;=<span class="number">1</span>;nowans--)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(nowans))<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ed-(nowans+<span class="number">1</span>)/<span class="number">2</span>;i++)cout&lt;&lt;s[i];</span><br><span class="line"><span class="keyword">if</span>(nowans&amp;<span class="number">1</span>)cout&lt;&lt;s[ed-(nowans+<span class="number">1</span>)/<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=ed-(nowans+<span class="number">1</span>)/<span class="number">2</span>;i&gt;=<span class="number">1</span>;i--)cout&lt;&lt;s[i];</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P3167">P3167</h3><p>考虑枚举每个通配符出现的位置，枚举每个通配符后面的一串字符，暴力用哈希 $O(1)$ 判断匹配，有如下 dp 方程式：<br>$$<br>f_{i,j+len_i-1}=f_{i-1,j-2}\ (op_i=?)<br>\f_{i,j+len_i-1}=\max_{k=1}^jf_{i-1,k}\ (op_i=*)<br>$$<br>暴力转移 + 哈希判断子串匹配即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P3167 [CQOI2014] 通配符匹配</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P3167</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-12-04 14:28:37</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> tpf[<span class="number">11</span>],len[<span class="number">11</span>],st,tcnt;</span><br><span class="line">string s;</span><br><span class="line">string t;</span><br><span class="line"><span class="type">int</span> ssiz,tsiz;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> base=<span class="number">359</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> hsh[<span class="number">100001</span>],hx[<span class="number">100001</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> _[<span class="number">100001</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">bool</span> f[<span class="number">11</span>][<span class="number">100005</span>];</span><br><span class="line"><span class="type">char</span> tt[<span class="number">11</span>];</span><br><span class="line"><span class="type">int</span> minn;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">gethasho</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hsh[r]-hsh[l<span class="number">-1</span>]*_[r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">gethasht</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hx[r]-hx[l<span class="number">-1</span>]*_[r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> le,<span class="type">int</span> st1,<span class="type">int</span> st2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(le&lt;<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(st1+le<span class="number">-1</span>&gt;tsiz||st2+le<span class="number">-1</span>&gt;ssiz)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="comment">/*cerr&lt;&lt;gethasho(st1,st1+le-1)&lt;&lt;&quot; &quot;&lt;&lt;gethasht(st2,st2+le-1)&lt;&lt;&quot;\n&quot;,*/</span><span class="built_in">gethasho</span>(st2,st2+le<span class="number">-1</span>)==<span class="built_in">gethasht</span>(st1,st1+le<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">ssiz=s.<span class="built_in">size</span>();</span><br><span class="line">s=<span class="string">&#x27; &#x27;</span>+s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ssiz;i++)hsh[i]=hsh[i<span class="number">-1</span>]*base+s[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100000</span>;i++)_[i]=_[i<span class="number">-1</span>]*base;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ssiz;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;*&#x27;</span>||s[i]==<span class="string">&#x27;?&#x27;</span>)tpf[++tcnt]=i,tt[tcnt]=s[i],len[tcnt<span class="number">-1</span>]=tpf[tcnt]-tpf[tcnt<span class="number">-1</span>]<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">len[tcnt]=ssiz-tpf[tcnt];</span><br><span class="line">st=tpf[<span class="number">1</span>];</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line">tsiz=t.<span class="built_in">size</span>();</span><br><span class="line">t=<span class="string">&#x27; &#x27;</span>+t;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tsiz;i++)hx[i]=hx[i<span class="number">-1</span>]*base+t[i];</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">check</span>(st<span class="number">-1</span>,<span class="number">1</span>,<span class="number">1</span>))&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;st&lt;&lt;&quot; &quot;&lt;&lt;n+1&lt;&lt;&quot; remaining , now start\n&quot;;</span></span><br><span class="line">f[<span class="number">0</span>][st<span class="number">-1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tcnt;i++)&#123;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;tt[i]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(tt[i]==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line"><span class="type">int</span> j=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;=tsiz;j++)<span class="keyword">if</span>(f[i<span class="number">-1</span>][j])<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span>(j==tsiz+<span class="number">1</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;len[i]&lt;&lt;&quot; &quot;&lt;&lt;j&lt;&lt;&quot; &quot;&lt;&lt;tpf[i]&lt;&lt;&quot; &quot;&lt;&lt;check(3,1,2)&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(len[i]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(;j&lt;=tsiz;j++)f[i][j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">for</span>(j++;j&lt;=tsiz;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(len[i],j,tpf[i]+<span class="number">1</span>))f[i][j+len[i]<span class="number">-1</span>]=<span class="number">1</span>;<span class="comment">//,cout&lt;&lt;j+len[i]-1&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=tsiz;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(f[i<span class="number">-1</span>][j<span class="number">-1</span>]&amp;&amp;<span class="built_in">check</span>(len[i],j+<span class="number">1</span>,tpf[i]+<span class="number">1</span>))f[i][j+len[i]]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f[tcnt][tsiz])cout&lt;&lt;<span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tcnt;i++)<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=tsiz;j++)f[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意要特殊关注一下几个通配符挤在一起的情况，因为这个时候接在后面的子串长度 $len_i=0$。</p><h3 id="P3449">P3449</h3><p>不难发现，符合条件的二元组 $(a,b)$ 满足 $a$ 是 $b$ 的前缀且 $b$ 除去 $a$ 的部分仍是回文串。前者用 Trie 维护，后者哈希判断，最后只在 Trie 上加能产生贡献的点，最后每个字符串逐一进行贡献的询问即可。设此时答案为 $ans$，那么最终答案即为 $ans\times 2+n$，因为当满足贡献时，原串被分成两部分回文串，二元组中元素可以互换。而原串为回文串，那么自己接自己一定有贡献。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P3449 [POI2006] PAL-Palindromes</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P3449</span></span><br><span class="line"><span class="comment">// Memory Limit: 375 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-12-04 18:03:30</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> hsh[<span class="number">2000005</span>],hx[<span class="number">2000005</span>];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> base=<span class="number">277</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> _[<span class="number">2000005</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">gethash1</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hsh[r]-hsh[l<span class="number">-1</span>]*_[r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">gethash2</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hx[l]-hx[r+<span class="number">1</span>]*_[r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">chkpalin</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> ed)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gethash1</span>(ed-len/<span class="number">2</span>+<span class="number">1</span>,ed)==<span class="built_in">gethash2</span>(ed-len+<span class="number">1</span>,ed-len+len/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> W[<span class="number">2000005</span>],*w[<span class="number">2000005</span>];</span><br><span class="line"><span class="type">char</span> S[<span class="number">2000005</span>],*s[<span class="number">2000005</span>];</span><br><span class="line"><span class="type">int</span> ch[<span class="number">2000005</span>][<span class="number">26</span>],cnt[<span class="number">2000005</span>],now,len[<span class="number">2000005</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> now=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> o=<span class="number">0</span>;o&lt;len[id];o++)&#123;</span><br><span class="line"><span class="type">int</span> nxt=(ch[now][s[id][o]-<span class="string">&#x27;a&#x27;</span>]?ch[now][s[id][o]-<span class="string">&#x27;a&#x27;</span>]:ch[now][s[id][o]-<span class="string">&#x27;a&#x27;</span>]=++tot);</span><br><span class="line">cnt[nxt]+=w[id][o];</span><br><span class="line">now=nxt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> now=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> o=<span class="number">0</span>;o&lt;len[id];o++)&#123;</span><br><span class="line">now=ch[now][s[id][o]-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt[now];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">200000</span>;i++)_[i]=_[i<span class="number">-1</span>]*base;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">s[<span class="number">1</span>]=S,w[<span class="number">1</span>]=W;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;i&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">cin&gt;&gt;len[i];</span><br><span class="line">w[i+<span class="number">1</span>]=w[i]+len[i];</span><br><span class="line">s[i+<span class="number">1</span>]=s[i]+len[i];</span><br><span class="line">cin&gt;&gt;s[i];</span><br><span class="line"><span class="comment">// cerr&lt;&lt;i&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">hsh[<span class="number">0</span>]=s[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;len[i];j++)hsh[j]=hsh[j<span class="number">-1</span>]*base+s[i][j];</span><br><span class="line"><span class="comment">// hx[len[i]]=0;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=len[i]<span class="number">-1</span>;j&gt;=<span class="number">1</span>;j--)hx[j]=hx[j+<span class="number">1</span>]*base+s[i][j];</span><br><span class="line"><span class="comment">// w[i][len[i]-1]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> L=<span class="number">1</span>;L&lt;len[i];L++)w[i][len[i]-L<span class="number">-1</span>]=<span class="built_in">chkpalin</span>(L,len[i]<span class="number">-1</span>);<span class="comment">//,cerr&lt;&lt;L&lt;&lt;&quot;\n&quot;;;</span></span><br><span class="line"><span class="comment">// cerr&lt;&lt;i&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="built_in">insert</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)ans+=<span class="built_in">calc</span>(i);</span><br><span class="line">cout&lt;&lt;ans*<span class="number">2</span>+n;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CF504E">CF504E</h3><p>在树上二分前缀长度即可。</p><p>这题非常毒瘤，不想多说了，主要就是把路径分成 $3$ 大段来求解二分区间，然后直接二分找到答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Misha and LCP on Tree</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/CF504E</span></span><br><span class="line"><span class="comment">// Memory Limit: 500 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 8000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-12-04 19:30:24</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">600001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">300005</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> base1=<span class="number">277</span>,base2=<span class="number">487</span>,mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">ksm</span><span class="params">(<span class="type">long</span> <span class="type">long</span> a,<span class="type">long</span> <span class="type">long</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">1</span>)<span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> (b&amp;<span class="number">1</span>?a:<span class="number">1</span>)*<span class="built_in">ksm</span>(a*a%mod,b/<span class="number">2</span>)%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> _1[<span class="number">300005</span>]=&#123;<span class="number">1</span>&#125;,_2[<span class="number">300005</span>]=&#123;<span class="number">1</span>&#125;,i1[<span class="number">300005</span>],i2[<span class="number">300005</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> hsh1[<span class="number">300005</span>],hsh2[<span class="number">300005</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> hx1[<span class="number">300005</span>],hx2[<span class="number">300005</span>];</span><br><span class="line"><span class="type">char</span> w[<span class="number">300005</span>];</span><br><span class="line"><span class="type">int</span> dep[<span class="number">300005</span>],siz[<span class="number">300005</span>],fa[<span class="number">300005</span>][<span class="number">21</span>],lson[<span class="number">300005</span>];</span><br><span class="line"><span class="type">int</span> maxdep[<span class="number">300005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">hsh1[now]=(hsh1[f]*base1+w[now<span class="number">-1</span>])%mod;</span><br><span class="line">hsh2[now]=(hsh2[f]*base2+w[now<span class="number">-1</span>])%mod;</span><br><span class="line">hx1[now]=(hx1[f]+_1[dep[now]]*w[now<span class="number">-1</span>])%mod;</span><br><span class="line">hx2[now]=(hx2[f]+_2[dep[now]]*w[now<span class="number">-1</span>])%mod;</span><br><span class="line">fa[now][<span class="number">0</span>]=f;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;fa[now][i];)i++,fa[now][i]=fa[fa[now][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">maxdep[E[i].to]=dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line">maxdep[now]=<span class="built_in">max</span>(maxdep[now],maxdep[E[i].to]);</span><br><span class="line"><span class="keyword">if</span>(maxdep[E[i].to]&gt;maxdep[lson[now]])lson[now]=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfn[<span class="number">300005</span>],dfncnt,rk[<span class="number">300005</span>],L[<span class="number">300005</span>],R[<span class="number">300005</span>],RK[<span class="number">600005</span>],rkcnt;</span><br><span class="line"><span class="type">int</span> ltop[<span class="number">300005</span>],llen[<span class="number">300005</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; v[<span class="number">300005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> top)</span></span>&#123;</span><br><span class="line">dfn[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line">ltop[now]=top;</span><br><span class="line">L[now]=++rkcnt;</span><br><span class="line">RK[rkcnt]=now;</span><br><span class="line">llen[top]=<span class="built_in">max</span>(dep[now]-dep[top]+<span class="number">1</span>,llen[top]);</span><br><span class="line"><span class="keyword">if</span>(lson[now])<span class="built_in">dfs2</span>(lson[now],top),RK[++rkcnt]=now;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now][<span class="number">0</span>]||E[i].to==lson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(E[i].to,E[i].to);</span><br><span class="line">RK[++rkcnt]=now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(now==top)&#123;</span><br><span class="line">v[now].<span class="built_in">push_back</span>(now);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=llen[now];i++)&#123;</span><br><span class="line">v[now].<span class="built_in">push_back</span>(fa[v[now][i<span class="number">-1</span>]][<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">R[now]=rkcnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> lg[<span class="number">600005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">kth</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)<span class="keyword">return</span> now;</span><br><span class="line"><span class="comment">// exit(0);</span></span><br><span class="line"><span class="type">int</span> o=lg[k];</span><br><span class="line"><span class="comment">// exit(0);</span></span><br><span class="line">now=fa[now][o];</span><br><span class="line"><span class="comment">// exit(0);</span></span><br><span class="line">k=k-(<span class="number">1</span>&lt;&lt;o);</span><br><span class="line"><span class="comment">// cerr&lt;&lt;k-(dfn[now]-dfn[ltop[now]])&lt;&lt;&quot; &quot;&lt;&lt;v[ltop[now]].size();</span></span><br><span class="line"><span class="comment">// if(k-(dfn[now]-dfn[ltop[now]])&gt;=(int)v[ltop[now]].size())cout&lt;&lt;now&lt;&lt;&quot; &quot;&lt;&lt;dfn[now]&lt;&lt;&quot; &quot;&lt;&lt;dfn[ltop[now]]&lt;&lt;&quot; &quot;&lt;&lt;ltop[now]&lt;&lt;&quot; &quot;&lt;&lt;k-(dfn[now]-dfn[ltop[now]])&lt;&lt;&quot; &quot;&lt;&lt;v[ltop[now]].size()&lt;&lt;&quot; &quot;&lt;&lt;v[ltop[now]][v[ltop[now]].size()-1]&lt;&lt;&quot; &quot;&lt;&lt;(1&lt;&lt;o)&lt;&lt;&quot; in\n&quot;,exit(0);</span></span><br><span class="line"><span class="comment">// exit(0);</span></span><br><span class="line"><span class="comment">// cerr&lt;&lt;&quot;\n&quot;&lt;&lt;now&lt;&lt;&quot; &quot;&lt;&lt;k&lt;&lt;&quot; &quot;&lt;&lt;dfn[now]-dfn[ltop[now]]&lt;&lt;&quot; in kth\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(dfn[now]-dfn[ltop[now]]&gt;=k)<span class="keyword">return</span> rk[dfn[now]-k];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="comment">/*cout&lt;&lt;2&lt;&lt;&quot; hanghang\n&quot;,*/</span>v[ltop[now]][k-(dfn[now]-dfn[ltop[now]])];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> st[<span class="number">600005</span>][<span class="number">21</span>];</span><br><span class="line"><span class="type">int</span> seq[<span class="number">600005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">lcainit</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=rkcnt;i++)&#123;</span><br><span class="line">st[i][<span class="number">0</span>]=dep[RK[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> o=<span class="number">1</span>;o&lt;=<span class="number">20</span>;o++)</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=rkcnt-(<span class="number">1</span>&lt;&lt;(o))+<span class="number">1</span>;i++)&#123;</span><br><span class="line">st[i][o]=<span class="built_in">min</span>(st[i][o<span class="number">-1</span>],st[i+(<span class="number">1</span>&lt;&lt;(o<span class="number">-1</span>))][o<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="comment">// if(dfn[u]&gt;dfn[v])swap(u,v);</span></span><br><span class="line"><span class="comment">// if(L[u]&lt;L[v]&amp;&amp;R[v]&lt;R[u])return u;</span></span><br><span class="line"><span class="comment">// cerr&lt;&lt;u&lt;&lt;&quot; &quot;&lt;&lt;v&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="type">int</span> ll=<span class="built_in">min</span>(L[u],L[v]),rr=<span class="built_in">max</span>(R[u],R[v]);</span><br><span class="line"><span class="type">int</span> cha=rr-ll+<span class="number">1</span>;</span><br><span class="line"><span class="comment">// if(lg[cha]&gt;=20)cout&lt;&lt;lg[cha]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// cerr&lt;&lt;cha&lt;&lt;&quot; &quot;&lt;&lt;ll&lt;&lt;&quot; &quot;&lt;&lt;rr-(1&lt;&lt;lg[cha])+1&lt;&lt;&quot; &quot;&lt;&lt;st[ll][lg[cha]]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">kth</span>(u,dep[u]-<span class="built_in">min</span>(st[ll][lg[cha]],st[rr-(<span class="number">1</span>&lt;&lt;lg[cha])+<span class="number">1</span>][lg[cha]]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// int lca(int u,int v)&#123;</span></span><br><span class="line"><span class="comment">// if(dep[u]&gt;dep[v])swap(u,v);</span></span><br><span class="line"><span class="comment">// for(int i=dep[v]-dep[u],ci=0;i;i&gt;&gt;=1,ci++)if(i&amp;1)v=fa[v][ci];</span></span><br><span class="line"><span class="comment">// if(u==v)return v;</span></span><br><span class="line"><span class="comment">// for(int i=19;i&gt;=0;i--)if(fa[u][i]!=fa[v][i])u=fa[u][i],v=fa[v][i];</span></span><br><span class="line"><span class="comment">// return fa[u][0];</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="type">int</span> a,b,c,d;</span><br><span class="line"><span class="function">pair&lt;<span class="type">long</span> <span class="type">long</span>,<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">uphash</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make_pair</span>(((hx1[u]-hx1[fa[v][<span class="number">0</span>]]+mod)*i1[dep[v]])%mod,</span><br><span class="line">((hx2[u]-hx2[fa[v][<span class="number">0</span>]]+mod)*i2[dep[v]])%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pair&lt;<span class="type">long</span> <span class="type">long</span>,<span class="type">long</span> <span class="type">long</span>&gt; <span class="title">downhash</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make_pair</span>(((hsh1[v]-hsh1[fa[u][<span class="number">0</span>]]*_1[dep[v]-dep[u]+<span class="number">1</span>])%mod+mod)%mod,</span><br><span class="line">((hsh2[v]-hsh2[fa[u][<span class="number">0</span>]]*_2[dep[v]-dep[u]+<span class="number">1</span>])%mod+mod)%mod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">600000</span>;i++)lg[i]=lg[i/<span class="number">2</span>]+<span class="number">1</span>;</span><br><span class="line"><span class="comment">// cout&lt;&lt;lg[600000];</span></span><br><span class="line">i1[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">i2[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">300000</span>;i++)_1[i]=_1[i<span class="number">-1</span>]*base1%mod,_2[i]=_2[i<span class="number">-1</span>]*base2%mod,i1[i]=<span class="built_in">ksm</span>(_1[i],mod<span class="number">-2</span>),i2[i]=<span class="built_in">ksm</span>(_2[i],mod<span class="number">-2</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">cin&gt;&gt;w;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)cin&gt;&gt;x&gt;&gt;y,<span class="built_in">addE</span>(x,y),<span class="built_in">addE</span>(y,x);</span><br><span class="line"><span class="comment">// return 0;</span></span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">lcainit</span>();</span><br><span class="line"><span class="comment">// if(n==300000&amp;&amp;w[0]==&#x27;c&#x27;)cout&lt;&lt;rkcnt&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// dep[0]=-1;</span></span><br><span class="line"><span class="comment">// return 0;</span></span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d;</span><br><span class="line"><span class="type">int</span> lca1=<span class="built_in">lca</span>(a,b);</span><br><span class="line"><span class="type">int</span> lca2=<span class="built_in">lca</span>(c,d);</span><br><span class="line"><span class="comment">// return 0;</span></span><br><span class="line"><span class="type">int</span> l1=dep[a]-dep[lca1],l2=dep[c]-dep[lca2];</span><br><span class="line"><span class="keyword">if</span>(l1&gt;l2)&#123;</span><br><span class="line"><span class="built_in">swap</span>(a,c);</span><br><span class="line"><span class="built_in">swap</span>(b,d);</span><br><span class="line"><span class="built_in">swap</span>(lca1,lca2);</span><br><span class="line"><span class="built_in">swap</span>(l1,l2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;a&lt;&lt;&quot; &quot;&lt;&lt;b&lt;&lt;&quot; &quot;&lt;&lt;c&lt;&lt;&quot; &quot;&lt;&lt;d&lt;&lt;&quot; &quot;&lt;&lt;lca1&lt;&lt;&quot; &quot;&lt;&lt;lca2&lt;&lt;&quot; &quot;&lt;&lt;dep[a]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">pair&lt;<span class="type">long</span> <span class="type">long</span>,<span class="type">long</span> <span class="type">long</span>&gt; p1=<span class="built_in">uphash</span>(a,lca1),p2=<span class="built_in">uphash</span>(c,<span class="built_in">kth</span>(c,dep[a]-dep[lca1]));</span><br><span class="line"><span class="comment">// cerr&lt;&lt;p1.first&lt;&lt;&quot; &quot;&lt;&lt;p2.first&lt;&lt;&quot; &quot;&lt;&lt;hx1[0]&lt;&lt;&quot; &quot;&lt;&lt;hx1[1]&lt;&lt;&quot; &quot;&lt;&lt;uphash(1,1).first&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// return 0;</span></span><br><span class="line"><span class="keyword">if</span>(p1==p2)&#123;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;&quot;in 1\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(dep[a]+dep[b]<span class="number">-2</span>*dep[lca1]&lt;dep[c]-dep[lca2])p1=<span class="built_in">make_pair</span>(<span class="number">-1</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">else</span> p1=<span class="built_in">downhash</span>(lca1,<span class="built_in">kth</span>(b,dep[a]+dep[b]<span class="number">-2</span>*dep[lca1]-(dep[c]-dep[lca2])));</span><br><span class="line">p2=<span class="built_in">uphash</span>(<span class="built_in">kth</span>(c,dep[a]-dep[lca1]),lca2);</span><br><span class="line"><span class="comment">// cerr&lt;&lt;&quot;over chk 1\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(p1==p2)&#123;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;&quot;in 2\n&quot;;</span></span><br><span class="line">ans=dep[c]-dep[lca2]+<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> st=dep[a]+dep[b]<span class="number">-2</span>*dep[lca1]-(dep[c]-dep[lca2]);</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>,l=<span class="number">1</span>,r=<span class="built_in">min</span>(st,dep[d]-dep[lca2]);</span><br><span class="line"><span class="comment">// cerr&lt;&lt;st&lt;&lt;&quot; &quot;&lt;&lt;kth(5,1)&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// cerr&lt;&lt;kth(b,st)&lt;&lt;&quot; &quot;&lt;&lt;kth(b,st-1)&lt;&lt;&quot; &quot;&lt;&lt;lca2&lt;&lt;&quot; &quot;&lt;&lt;kth(d,dep[d]-dep[lca2]-1)&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">downhash</span>(<span class="built_in">kth</span>(b,st),<span class="built_in">kth</span>(b,st-mid))==<span class="built_in">downhash</span>(lca2,<span class="built_in">kth</span>(d,dep[d]-dep[lca2]-mid)))res=mid,l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans+=res;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ans=dep[a]-dep[lca1]+<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> st=dep[b]-dep[lca1];</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>,l=<span class="number">1</span>,r=<span class="built_in">min</span>(dep[b]-dep[lca1],dep[c]-dep[lca2]-(dep[a]-dep[lca1]));</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">downhash</span>(<span class="built_in">kth</span>(b,st),<span class="built_in">kth</span>(b,st-mid))==<span class="built_in">uphash</span>(<span class="built_in">kth</span>(c,dep[a]-dep[lca1]),<span class="built_in">kth</span>(c,dep[a]-dep[lca1]+mid)))res=mid,l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ans+=res;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="type">int</span> l=<span class="number">0</span>,r=dep[a]-dep[lca1];</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">uphash</span>(a,<span class="built_in">kth</span>(a,mid))==<span class="built_in">uphash</span>(c,<span class="built_in">kth</span>(c,mid)))ans=mid+<span class="number">1</span>,l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P9576">P9576</h3><p>考虑把问题简化成选择 $[l_1,r_1]$ 和 $[l_2,r_2]$ 区间的字符串拼在一起，使得拼完之后的串为 $t$，因为原问题中把一个区间的字符串与 $t$ 完全匹配的答案是好求的。</p><p>考虑计算每个点为起点与 $t$ 的最长公共前缀和每个点为终点与 $t$ 的最长公共后缀。二分 + 哈希即可，然后特判完全匹配的串，把它当做只差一个字符匹配的串，并晚加贡献，那么贡献就是 $pre_i+suf_j-|t|+1$，使用线段树维护。不难发现上面式子有限制 $i\leq j-|t|$，从 $tsiz$ 处开始扫一遍即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P9576 「TAOI-2」Ciallo～(∠・ω&lt; )⌒★</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P9576</span></span><br><span class="line"><span class="comment">// Memory Limit: 512 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-12-05 15:36:31</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> hsh1[<span class="number">400005</span>],hsh2[<span class="number">200005</span>];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> base=<span class="number">279</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> _[<span class="number">400005</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">char</span> s[<span class="number">400005</span>],t[<span class="number">200005</span>];</span><br><span class="line"><span class="type">int</span> tsiz,ssiz;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">gethash1</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hsh1[r]-hsh1[l<span class="number">-1</span>]*_[r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">gethash2</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hsh2[r]-hsh2[l<span class="number">-1</span>]*_[r-l+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> len,<span class="type">int</span> st1,<span class="type">int</span> st2)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(len&lt;<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(st1+len<span class="number">-1</span>&gt;ssiz||st2+len<span class="number">-1</span>&gt;tsiz)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">gethash1</span>(st1,st1+len<span class="number">-1</span>)==<span class="built_in">gethash2</span>(st2,st2+len<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> pre[<span class="number">400005</span>],suf[<span class="number">400005</span>];</span><br><span class="line"><span class="type">int</span> xds[<span class="number">1600005</span>],cnt[<span class="number">1600005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">xds[now]=xds[now&lt;&lt;<span class="number">1</span>]+xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">cnt[now]=cnt[now&lt;&lt;<span class="number">1</span>]+cnt[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> xds[now]+=q,cnt[now]++,<span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(q&lt;=mid)<span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>,l,mid,q);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,q);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line">&#125;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="keyword">operator</span> + (<span class="type">const</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; a,<span class="type">const</span> pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; b)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make_pair</span>(a.first+b.first,a.second+b.second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="title">qsum</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)<span class="keyword">return</span> <span class="built_in">make_pair</span>(xds[now],cnt[now]);</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; res=<span class="built_in">make_pair</span>(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)res=res+<span class="built_in">qsum</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid));</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)res=res+<span class="built_in">qsum</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;s&gt;&gt;t;</span><br><span class="line">ssiz=<span class="built_in">strlen</span>(s);</span><br><span class="line">tsiz=<span class="built_in">strlen</span>(t);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">400000</span>;i++)_[i]=_[i<span class="number">-1</span>]*base;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ssiz;i++)hsh1[i]=hsh1[i<span class="number">-1</span>]*base+s[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tsiz;i++)hsh2[i]=hsh2[i<span class="number">-1</span>]*base+t[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ssiz;i++)&#123;</span><br><span class="line"><span class="type">int</span> l=<span class="number">0</span>,r=<span class="built_in">min</span>(ssiz-i+<span class="number">1</span>,tsiz);</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid,i,<span class="number">1</span>))pre[i]=mid,l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;pre[i]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ssiz;i++)&#123;</span><br><span class="line"><span class="type">int</span> l=<span class="number">0</span>,r=<span class="built_in">min</span>(i,tsiz);</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid,i-mid+<span class="number">1</span>,tsiz-mid+<span class="number">1</span>))suf[i]=mid,l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// return 0;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=tsiz;i&lt;=ssiz;i++)&#123;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;pre[i]&lt;&lt;&quot; &quot;&lt;&lt;suf[i]&lt;&lt;&quot; &quot;&lt;&lt;ans&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(pre[i-tsiz+<span class="number">1</span>])<span class="keyword">if</span>(suf[i]!=tsiz)<span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,tsiz,pre[i-tsiz+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(suf[i]==tsiz)ans+=(i-tsiz)*(i-tsiz<span class="number">-1</span>)/<span class="number">2</span>+ssiz-tsiz+(ssiz-i)*(ssiz-i<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(suf[i]!=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">int</span> Q=tsiz-suf[i];</span><br><span class="line"><span class="keyword">if</span>(suf[i]==tsiz)Q++;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; res=<span class="built_in">qsum</span>(<span class="number">1</span>,<span class="number">1</span>,tsiz,Q,tsiz);</span><br><span class="line"><span class="comment">// cerr&lt;&lt;&quot;in &quot;&lt;&lt;res.first-res.second*(tsiz-suf[i]-1)&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">ans+=res.first-res.second*(Q<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(suf[i]==tsiz)<span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,tsiz,pre[i-tsiz+<span class="number">1</span>]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P5184">P5184</h3><p>不难发现比较字典序可以使用二分 + 哈希的方式比较，找出最长前缀之后比较下一个字符即可。</p><p>注意不要把数组建在结构体内，这样复杂度就变成 $O(n^3)$ 了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P5184 [COCI2009-2010#2] PASIJANS</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P5184</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1500 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-12-05 18:51:37</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> base=<span class="number">277</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> _[<span class="number">1001</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> num[<span class="number">1003</span>][<span class="number">1003</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> hsh[<span class="number">1003</span>][<span class="number">1003</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">seq</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">gethash</span><span class="params">(<span class="type">int</span> L,<span class="type">int</span> R)</span><span class="type">const</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> hsh[R][id]-hsh[L<span class="number">-1</span>][id]*_[R-L+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> seq o,<span class="type">const</span> seq a)&#123;</span><br><span class="line"><span class="type">int</span> L=<span class="number">0</span>,R=<span class="built_in">min</span>(o.r-o.l+<span class="number">1</span>,a.r-a.l+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(L&lt;=R)&#123;</span><br><span class="line"><span class="type">int</span> mid=(L+R)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(o.<span class="built_in">gethash</span>(o.l,o.l+mid<span class="number">-1</span>)==a.<span class="built_in">gethash</span>(a.l,a.l+mid<span class="number">-1</span>))res=mid,L=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> R=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(L&gt;<span class="built_in">min</span>(o.r-o.l+<span class="number">1</span>,a.r-a.l+<span class="number">1</span>))<span class="keyword">return</span> o.r-o.l+<span class="number">1</span>&lt;a.r-a.l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> num[o.l+res][o.id]&gt;num[a.l+res][a.id];</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;seq&gt; q;</span><br><span class="line"><span class="type">int</span> n,o;</span><br><span class="line">seq temp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++)_[i]=_[i<span class="number">-1</span>]*base;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> idcnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line">cin&gt;&gt;o;</span><br><span class="line">++idcnt;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=o;i++)cin&gt;&gt;num[i][idcnt];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=o;i++)hsh[i][idcnt]=hsh[i<span class="number">-1</span>][idcnt]*base+num[i][idcnt];</span><br><span class="line">temp.l=<span class="number">1</span>,temp.r=o,temp.id=idcnt;</span><br><span class="line">q.<span class="built_in">push</span>(temp);</span><br><span class="line"><span class="comment">//for(int i=1;i&lt;=o;i++)temp.num[i]=temp.hsh[i]=0;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">temp=q.<span class="built_in">top</span>();</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">temp.l++;</span><br><span class="line">cout&lt;&lt;num[temp.l<span class="number">-1</span>][temp.id]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(temp.l&lt;=temp.r)&#123;</span><br><span class="line">q.<span class="built_in">push</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完工！</p><h1>KMP</h1><p>其实 KMP 本身用于字符串匹配其实实用性价值不大，因为字符串哈希也能做到相同的复杂度。KMP 最有优势的地方是它能快速求出 $s$ 任意前缀的最长 border（既是一个串的真前缀又是一个串的真后缀）。</p><h2 id="思想">思想</h2><p>考虑不难发现，我们假如说已经求出 $[1,k]$ 的所有最长 border 长度，而有一个数组记录了这些长度，考虑如何求出第 $k+1$ 位置的最长 border 长度。</p><p>假定字符串从 $0$ 开始。<s>（虽然图是从 $1$ 开始的）</s></p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/8uv32hye.png" alt=""></p><p>一个非常 trival 的想法是，最优情况下，$k+1$ 位置的 border 可以直接继承前面 $pi_k$ 的 border 长度，那么就只需要比较 $s_{pi_k}$ 与 $s_{k+1}$ 就行了？</p><p>是的。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/ksxolf9y.png" alt=""></p><p>但如果不匹配呢？</p><p>不难发现，图中绿色的部分就是 $[0,k]$ 的最长 border。</p><p>如果最长 border 不匹配怎么办？那就找次长 border 再来试试！</p><p>如何找到次长 border 呢？考虑次长 border 一定是左边绿色部分的真前缀，也是右边绿色部分的真后缀。而绿色部分是一样的！！！</p><p>所以我们得到了次长 border 是最长 border 的最长 border，也就是说第 $k$ 长 border 是第 $k-1$ 长 border 的最长 border。</p><p>那么暴力找到这些 border 然后一个一个看能不能与下一位 $s_{k+1}$ 匹配即可。</p><p>核心代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pre_func</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> siz=s.<span class="built_in">size</span>();</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pi</span><span class="params">(siz)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;siz;i++)&#123;</span><br><span class="line">        <span class="type">int</span> j=pi[i<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i]!=s[j])j=pi[j<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s[i]==s[j])j++;</span><br><span class="line">        pi[i]=j;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pi;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="应用">应用</h2><h3 id="字符串的周期">字符串的周期</h3><p>不难发现，$p$ 为 $s$ 的周期 $\Leftrightarrow$ $s[1,n-p]$ 为 $s$ 的 border，有周期的长为 $n$ 的字符串的最短周期为 $n-next_n$。</p><h3 id="失配树">失配树</h3><p>根据上面的 KMP 思想的阐述，我们直接对于 $(pi_i,i)$ 加一条边，因为 $pi_i&lt;i$，所以连出来的图就是一棵树。此时不难发现对于该树上的每一个节点 $i$，他的每一个祖先 $j$ 都满足 $[1,j]$ 是 $[1,i]$ 的 border。</p><p>该树被称作 <code>失配树</code>。</p><h2 id="例题-2">例题</h2><h3 id="P5829-【模板】失配树">P5829 【模板】失配树</h3><p>考虑最长公共 border 一定满足是这两个前缀的 border，那么根据失配树的性质，建出失配树跑 LCA 就行了。</p><p>注意当 LCA 是这两个原来节点中的其中一个的时候，要输出它的父亲，因为一个字符串的 border 不能是他自己。</p><p>还要注意如果用树剖写的话要保证节点编号不为 $0$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P5829 【模板】失配树</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P5829</span></span><br><span class="line"><span class="comment">// Memory Limit: 512 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-12-06 08:25:12</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> si;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pre_func</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line">si=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pi</span><span class="params">(si)</span></span>;</span><br><span class="line"><span class="comment">// pi[0]=0;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;si;i++)&#123;</span><br><span class="line"><span class="type">int</span> j=pi[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i]!=s[j])j=pi[j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(s[i]==s[j])j++;</span><br><span class="line">pi[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;&quot;11111\n&quot;;</span></span><br><span class="line"><span class="keyword">return</span> pi;</span><br><span class="line">&#125;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> m,l,r;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">2000005</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">1000005</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="comment">// cout&lt;&lt;u&lt;&lt;&quot; &quot;&lt;&lt;v&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dep[<span class="number">1000005</span>],siz[<span class="number">1000005</span>],hson[<span class="number">1000005</span>],fa[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now]=f;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line"><span class="keyword">if</span>(siz[hson[now]]&lt;siz[E[i].to])hson[now]=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfn[<span class="number">1000005</span>],rk[<span class="number">1000005</span>],dfncnt;</span><br><span class="line"><span class="type">int</span> ltop[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> top)</span></span>&#123;</span><br><span class="line">ltop[now]=top;</span><br><span class="line">dfn[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line"><span class="keyword">if</span>(!hson[now])<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(hson[now],top);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(E[i].to,E[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lca</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(ltop[u]!=ltop[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[ltop[u]]&gt;dep[ltop[v]])u=fa[ltop[u]];</span><br><span class="line"><span class="keyword">else</span> v=fa[ltop[v]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> rk[<span class="built_in">min</span>(dfn[u],dfn[v])];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; pi=<span class="built_in">pre_func</span>(s);</span><br><span class="line"><span class="comment">// cerr&lt;&lt;&quot;\n?&quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;si;i++)<span class="built_in">addE</span>(i+<span class="number">2</span>,pi[i]+<span class="number">1</span>),<span class="built_in">addE</span>(pi[i]+<span class="number">1</span>,i+<span class="number">2</span>);</span><br><span class="line"><span class="type">int</span> m,x,y;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="type">int</span> lc=<span class="built_in">lca</span>(x+<span class="number">1</span>,y+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(lc==x+<span class="number">1</span>||lc==y+<span class="number">1</span>)lc=fa[lc];</span><br><span class="line">cout&lt;&lt;lc<span class="number">-1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P2375-动物园">P2375 动物园</h3><p>失配树上倍增找第一个不重叠的 border 就行了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P2375 [NOI2014] 动物园</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P2375</span></span><br><span class="line"><span class="comment">// Memory Limit: 512 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-12-06 15:31:47</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">2000001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">1000005</span>],tot;</span><br><span class="line"><span class="type">int</span> si,n;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pre_func</span><span class="params">(string &amp;s)</span></span>&#123;</span><br><span class="line">si=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pi</span><span class="params">(si)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;si;i++)&#123;</span><br><span class="line"><span class="type">int</span> j=pi[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i]!=s[j])j=pi[j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(s[i]==s[j])j++;</span><br><span class="line">pi[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pi;</span><br><span class="line">&#125;</span><br><span class="line">string s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dep[<span class="number">1000005</span>],siz[<span class="number">1000005</span>],fa[<span class="number">1000005</span>][<span class="number">21</span>],mfd[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=si+<span class="number">2</span>;i++)head[i]=<span class="number">0</span>;</span><br><span class="line"><span class="comment">// for(int i=1;i&lt;=1000000;i++)for(int j=1;j&lt;=20;j++)fa[i][j]=0;</span></span><br><span class="line"><span class="comment">// for(int i=1;i&lt;=tot;i++)E[i]=&#123;0,0&#125;;</span></span><br><span class="line">tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now][<span class="number">0</span>]=f;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> o;</span><br><span class="line"><span class="keyword">for</span>(o=<span class="number">0</span>;fa[now][o];)o++,fa[now][o]=fa[fa[now][o<span class="number">-1</span>]][o<span class="number">-1</span>];</span><br><span class="line">mfd[now]=o<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getans</span><span class="params">(<span class="type">int</span> pos)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> org=pos;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> o=mfd[pos];o&gt;=<span class="number">0</span>;o--)<span class="keyword">if</span>(fa[pos][o]<span class="number">-1</span>&gt;(org<span class="number">-1</span>)/<span class="number">2</span>)pos=fa[pos][o];</span><br><span class="line"><span class="comment">// cout&lt;&lt;dep[fa[pos][0]]&lt;&lt;&quot; hanghang shi xiachou\n&quot;;</span></span><br><span class="line"><span class="keyword">return</span> dep[fa[pos][<span class="number">0</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line"><span class="built_in">clear</span>();</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; pi=<span class="built_in">pre_func</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;si;i++)<span class="built_in">addE</span>(i+<span class="number">2</span>,pi[i]+<span class="number">1</span>),<span class="built_in">addE</span>(pi[i]+<span class="number">1</span>,i+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=si+<span class="number">1</span>;i++)ans*=(<span class="built_in">getans</span>(i)+<span class="number">1</span>),ans%=<span class="number">1000000007ll</span>;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CF526D">CF526D</h3><p>考虑合法时的前缀函数是怎样的。不难发现当一般情况时，前缀函数算出的一个类循环节段数 $len$，必定满足 $len/k&gt; len\bmod k$，而当原串有循环节时，满足 $len/k&gt;len\bmod k$，这个结论手玩一下 A 为空，B 为空，A/B=a/b$\times$ 循环节长度就能得到。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Om Nom and Necklace</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/CF526D</span></span><br><span class="line"><span class="comment">// Memory Limit: 250 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-12-06 17:02:52</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> si;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pre_func</span><span class="params">(string &amp;s)</span></span>&#123;</span><br><span class="line">si=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pi</span><span class="params">(si)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;si;i++)&#123;</span><br><span class="line"><span class="type">int</span> j=pi[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i]!=s[j])j=pi[j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(s[i]==s[j])j++;</span><br><span class="line">pi[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pi;</span><br><span class="line">&#125;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;k&gt;&gt;k;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; pi=<span class="built_in">pre_func</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;si;i++)&#123;</span><br><span class="line"><span class="type">int</span> len=i-pi[i]+<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> cnt=(i+<span class="number">1</span>)/len;</span><br><span class="line"><span class="keyword">if</span>((i+<span class="number">1</span>)%len)cout&lt;&lt;(cnt/k&gt;cnt%k);</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;(cnt/k&gt;=cnt%k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CF432D">CF432D</h3><p>手玩一下可以发现一个 border 在原串的出现次数就是失配树上该长度对应节点的子树大小。那么直接统计即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Prefixes and Suffixes</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/CF432D</span></span><br><span class="line"><span class="comment">// Memory Limit: 250 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-12-06 20:09:29</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> si;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pre_func</span><span class="params">(string &amp;s)</span></span>&#123;</span><br><span class="line">si=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pi</span><span class="params">(si)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;si;i++)&#123;</span><br><span class="line"><span class="type">int</span> j=pi[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i]!=s[j])j=pi[j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(s[i]==s[j])j++;</span><br><span class="line">pi[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pi;</span><br><span class="line">&#125;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">200005</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">100005</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> siz[<span class="number">100005</span>],fa[<span class="number">100005</span>],dep[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line">fa[now]=f;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; ans[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; pi=<span class="built_in">pre_func</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;si;i++)<span class="built_in">addE</span>(i+<span class="number">2</span>,pi[i]+<span class="number">1</span>),<span class="built_in">addE</span>(pi[i]+<span class="number">1</span>,i+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> pos=si+<span class="number">1</span>,cnt=dep[pos];</span><br><span class="line"><span class="keyword">while</span>(pos!=<span class="number">1</span>)&#123;</span><br><span class="line">ans[cnt--]=<span class="built_in">make_pair</span>(pos<span class="number">-1</span>,siz[pos]);</span><br><span class="line">pos=fa[pos];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;dep[si+<span class="number">1</span>]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=dep[si+<span class="number">1</span>];i++)cout&lt;&lt;ans[i].first&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans[i].second&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P3435">P3435</h3><p>考虑使用失配树。不难发现 <code>最长周期</code> 长度就是原字符串长度减其最小 border 的长度，放到失配树上，就是求一个节点在失配树上距离他最远的非根祖先。直接暴力 dfs 记录即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P3435 [POI2006] OKR-Periods of Words</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P3435</span></span><br><span class="line"><span class="comment">// Memory Limit: 128 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-12-06 20:49:40</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> si;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pre_func</span><span class="params">(string &amp;s)</span></span>&#123;</span><br><span class="line">si=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pi</span><span class="params">(si)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;si;i++)&#123;</span><br><span class="line"><span class="type">int</span> j=pi[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i]!=s[j])j=pi[j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(s[i]==s[j])j++;</span><br><span class="line">pi[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pi;</span><br><span class="line">&#125;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">2000005</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">1000005</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ff[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">ff[now]=v;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">init</span>(E[i].to,now,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[<span class="number">1</span>];i;i=E[i].link)&#123;</span><br><span class="line"><span class="built_in">init</span>(E[i].to,<span class="number">1</span>,E[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;si;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; pi=<span class="built_in">pre_func</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;si;i++)<span class="built_in">addE</span>(i+<span class="number">2</span>,pi[i]+<span class="number">1</span>),<span class="built_in">addE</span>(pi[i]+<span class="number">1</span>,i+<span class="number">2</span>);</span><br><span class="line"><span class="built_in">dfs</span>();</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=si+<span class="number">1</span>;i++)ans+=i-ff[i];</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="exKMP">exKMP</h2><p>可以在线性时间内跑出一个串的每个后缀和本身的最长前缀长度（即 $z$ 数组），通常用于优化 dp，但是很少有题会卡哈希 + 二分。</p><h3 id="思想-2">思想</h3><p>思想和 KMP 本质差不多，就是用现在已有的信息优化求出剩下的信息。</p><p>加入我们现在已经求出 $z[0\cdots i]$ 了，我们来想如何用前面的信息求出 $z[i+1]$。</p><p>我们称上一次匹配的区间为 Z-box，显然，如果目前 $i+1&gt;r$，那么这个点与之前的所有的比较都无关，需要暴力跑出该点的 $z$ 值。</p><p>而 $i+1\leq r$，情况就不太一样了。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/fzi73khe.png" alt=""></p><p>不难发现，此时的字符串是长成这样的。由于我们保证 $i+1&gt;l$，所以有 $s[i+1\cdots r]=s[i+1-l\cdots r-l]$。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/h5zo6eqp.png" alt=""></p><p>现在我们成功的把目标字符串的前缀转化到了一个我们已经求出 $z$ 的位置。考虑这个时候直接调用 $z[i+1-l]$ 就能得到此时的 $z$ 函数值。</p><p>这时要分两种情况。如果这时的 $z$ 值小于我们的字符串长度，那么当前的 $z$ 值就是原来的 $z$ 值。</p><p>而如果大于等于，我们就只能得到 $z[i+1]\geq z[i+1-l]$ 的信息。那么就把 $z[i+1]$ 暴力赋值成 $r-i$ 后继续跑暴力。</p><p>复杂度不会证明，应该是 $O(n)$ 的。</p><p>而如果要求其他串每个长度的后缀与原串的最长公共前缀，就要使用原串的 $z$ 函数值来计算新串的信息，过程与上面相似。</p><h3 id="例题-3">例题</h3><h4 id="P5410-【模板】扩展-KMP-exKMP（Z-函数）">P5410 【模板】扩展 KMP/exKMP（Z 函数）</h4><p>模板题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P5410 【模板】扩展 KMP/exKMP（Z 函数）</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P5410</span></span><br><span class="line"><span class="comment">// Memory Limit: 500 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-12-07 15:13:53</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> si;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">getZ</span><span class="params">(string &amp;s)</span></span>&#123;</span><br><span class="line">si=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">z</span><span class="params">(si)</span></span>;</span><br><span class="line">z[<span class="number">0</span>]=si;</span><br><span class="line"><span class="type">int</span> zl=<span class="number">0</span>,zr=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;si;i++)&#123;</span><br><span class="line"><span class="type">int</span> j=i;</span><br><span class="line"><span class="keyword">if</span>(i&lt;=zr)&#123;</span><br><span class="line"><span class="keyword">if</span>(z[i-zl]&lt;zr-i+<span class="number">1</span>)z[i]=z[i-zl],j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> j+=zr-i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(j)&#123;</span><br><span class="line"><span class="keyword">while</span>(s[j]==s[j-i]&amp;&amp;j&lt;si)j++;</span><br><span class="line">z[i]=j-i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i+z[i]<span class="number">-1</span>&gt;zr)zl=i,zr=i+z[i]<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">exZ</span><span class="params">(string &amp;s,string &amp;t)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> ssi=s.<span class="built_in">size</span>();</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; sz=<span class="built_in">getZ</span>(s);</span><br><span class="line">si=t.<span class="built_in">size</span>();</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">z</span><span class="params">(si)</span></span>;</span><br><span class="line"><span class="type">int</span> zl=<span class="number">-1</span>,zr=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;si;i++)&#123;</span><br><span class="line"><span class="type">int</span> j=i;</span><br><span class="line"><span class="keyword">if</span>(i&lt;=zr)&#123;</span><br><span class="line"><span class="keyword">if</span>(sz[i-zl]&lt;zr-i+<span class="number">1</span>)z[i]=sz[i-zl],j=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> j+=zr-i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;j&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(j!=<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(j&lt;si&amp;&amp;j&lt;ssi+i&amp;&amp;t[j]==s[j-i])j++;</span><br><span class="line">z[i]=j-i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i+z[i]<span class="number">-1</span>&gt;zr)zl=i,zr=i+z[i]<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ssiz,tsiz;</span><br><span class="line">string s,t;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;t&gt;&gt;s;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; sz=<span class="built_in">getZ</span>(s);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;si;i++)ans^=<span class="number">1ll</span>*(i+<span class="number">1</span>)*(sz[i]+<span class="number">1</span>);</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">ans=<span class="number">0</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; tz=<span class="built_in">exZ</span>(s,t);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;si;i++)ans^=<span class="number">1ll</span>*(i+<span class="number">1</span>)*(tz[i]+<span class="number">1</span>);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="一些题">一些题</h2><h3 id="P3193">P3193</h3><p>设 $g[i][j]$ 为当前匹配 $i$ 位之后再加一个字符变为匹配 $j$ 位的方案数，这个用 KMP 易求（不过 $m\leq20$，唐），那么有 dp 方程：<br>$$<br>dp_{i,j}=\sum_{k=0}^{m-1}dp_{i-1,k}\times g_{k,j}<br>$$<br>矩阵乘法优化即可，时间复杂度 $O(m^3\log n)$。</p><p>代码调试语句较多。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P3193 [HNOI2008] GT考试</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P3193</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-12-07 21:20:50</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> si;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pre_func</span><span class="params">(string &amp;s)</span></span>&#123;</span><br><span class="line">si=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">pi</span><span class="params">(si)</span></span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;si;i++)&#123;</span><br><span class="line"><span class="type">int</span> j=pi[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">while</span>(j&gt;<span class="number">0</span>&amp;&amp;s[i]!=s[j])j=pi[j<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(s[i]==s[j])j++;</span><br><span class="line">pi[i]=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line">string ss;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">matrix</span>&#123;</span><br><span class="line"><span class="type">int</span> s[<span class="number">21</span>][<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line">s[i][j]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">I</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m;i++)&#123;</span><br><span class="line">s[i][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">cerr&lt;&lt;m&lt;&lt;<span class="string">&quot; nima\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cerr&lt;&lt;s[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">cerr&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">matrix <span class="keyword">operator</span> * (<span class="type">const</span> matrix &amp;a) <span class="type">const</span>&#123;</span><br><span class="line"><span class="comment">// exit(0);</span></span><br><span class="line">matrix res;</span><br><span class="line">res.<span class="built_in">clear</span>();</span><br><span class="line"><span class="comment">// cerr&lt;&lt;k&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// // exit(0);</span></span><br><span class="line"><span class="comment">// cerr&lt;&lt;m&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// for(int i=0;i&lt;=m;i++)&#123;</span></span><br><span class="line"><span class="comment">// for(int j=0;j&lt;=m;j++)&#123;</span></span><br><span class="line"><span class="comment">// cerr&lt;&lt;s[i][j]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// cerr&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// for(int i=0;i&lt;=m;i++)&#123;</span></span><br><span class="line"><span class="comment">// for(int j=0;j&lt;=m;j++)&#123;</span></span><br><span class="line"><span class="comment">// cerr&lt;&lt;a.s[i][j]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// cerr&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> o=<span class="number">0</span>;o&lt;=m;o++)&#123;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;k&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">res.s[i][j]+=s[i][o]*a.s[o][j];</span><br><span class="line">res.s[i][j]%=k;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;k&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// a.print();</span></span><br><span class="line"><span class="comment">// res.print();</span></span><br><span class="line"><span class="comment">// exit(0);</span></span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;dp,g;</span><br><span class="line">matrix I;</span><br><span class="line"><span class="function">matrix <span class="title">ksm</span><span class="params">(matrix a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;k&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)<span class="keyword">return</span> I;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">1</span>)<span class="keyword">return</span> a;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;&quot;???\n&quot;;</span></span><br><span class="line"><span class="keyword">return</span> (b&amp;<span class="number">1</span>?a:I)*<span class="built_in">ksm</span>(a*a,b/<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt[<span class="number">10</span>],anow=<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;ss;</span><br><span class="line"><span class="comment">// cout&lt;&lt;k&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">I.<span class="built_in">I</span>();</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; pi=<span class="built_in">pre_func</span>(ss);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;si<span class="number">-1</span>;i++)&#123;</span><br><span class="line"><span class="comment">// cout&lt;&lt;i+1&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">anow=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)cnt[i]=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> pos=pi[i];</span><br><span class="line">g.s[i+<span class="number">1</span>][i+<span class="number">2</span>]=<span class="number">1</span>,cnt[ss[i+<span class="number">1</span>]-<span class="string">&#x27;0&#x27;</span>]++,anow--;</span><br><span class="line"><span class="comment">// cout&lt;&lt;anow&lt;&lt;&quot; &quot;&lt;&lt;ss[i+1]-&#x27;0&#x27;&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">while</span>(pos&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">// cout&lt;&lt;pos&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="keyword">if</span>(!cnt[ss[pos]-<span class="string">&#x27;0&#x27;</span>])g.s[i+<span class="number">1</span>][pos+<span class="number">1</span>]=<span class="number">1</span>,cnt[ss[pos]-<span class="string">&#x27;0&#x27;</span>]++,anow--;<span class="comment">//,cout&lt;&lt;ss[pi[pos]]-&#x27;0&#x27;&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(pos&lt;=<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">pos=pi[pos<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cout&lt;&lt;&quot;\n&quot;&lt;&lt;anow&lt;&lt;&quot;\n\n&quot;;</span></span><br><span class="line">g.s[i+<span class="number">1</span>][<span class="number">0</span>]=anow;</span><br><span class="line">&#125;</span><br><span class="line">g.s[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">g.s[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">9</span>;</span><br><span class="line">g.s[m][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="comment">// g.s[m][m]=10;</span></span><br><span class="line">dp.s[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">// g.print();</span></span><br><span class="line">dp=dp*<span class="built_in">ksm</span>(g,n);</span><br><span class="line"><span class="comment">// return 0;</span></span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)ans+=dp.s[<span class="number">0</span>][i];</span><br><span class="line">cout&lt;&lt;ans%k;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CF1051E">CF1051E</h3><p>前缀和优化 dp。</p><p>不难发现可以列出一个这样的 dp 方程式：<br>$$<br>dp_i=\sum_{j=len_l}^{len_r}dp_{i-j}\times[l\leq \operatorname{atoi}(s[i-j+1\cdots i])\leq r]\times[s[i-j+1]\not=0]<br>$$<br>其中 $j\in[len_l+1,len_r-1]$ 中的情况可以直接累加，使用前缀和 $O(1)$ 转移，我们要判断的是在边界时的划分出的数与 $l$ 与 $r$ 的大小关系。</p><p>使用哈希 + 二分可以做到 $O(n\log n)$，但是对 $l$ 与 $r$ 求解 Z 函数可以做到 $O(n)$。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;字符串哈希&lt;/h1&gt;
&lt;p&gt;定义一个字符串到整数的映射 $f$，称为 Hash 函数。Hash 的核心思想是将输入的字符串转化为整数方便比较。&lt;/p&gt;
&lt;h2 id=&quot;哈希方式&quot;&gt;哈希方式&lt;/h2&gt;
&lt;p&gt;通用的方法是把字符串看成一个 $base$ 进制的数，即 $f_i</summary>
      
    
    
    
    <category term="OI" scheme="http://blog.eltaos.top/categories/OI/"/>
    
    
    <category term="OI" scheme="http://blog.eltaos.top/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>floj-logs</title>
    <link href="http://blog.eltaos.top/2023/floj-logs/"/>
    <id>http://blog.eltaos.top/2023/floj-logs/</id>
    <published>2023-11-04T05:27:10.000Z</published>
    <updated>2023-11-04T05:28:53.538Z</updated>
    
    <content type="html"><![CDATA[<p>可能是非官方的 floj 更新日志。</p><hr><h1>2023.11.4前</h1><p>配置好基本功能。网站基本可以运作。外网暂不能访问。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;可能是非官方的 floj 更新日志。&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;2023.11.4前&lt;/h1&gt;
&lt;p&gt;配置好基本功能。网站基本可以运作。外网暂不能访问。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="OI" scheme="http://blog.eltaos.top/categories/OI/"/>
    
    
    <category term="FLOJ" scheme="http://blog.eltaos.top/tags/FLOJ/"/>
    
  </entry>
  
  <entry>
    <title>Simple-Algos-Notes</title>
    <link href="http://blog.eltaos.top/2023/Simple-Algos-Notes/"/>
    <id>http://blog.eltaos.top/2023/Simple-Algos-Notes/</id>
    <published>2023-11-02T12:36:19.000Z</published>
    <updated>2023-11-30T10:04:39.737Z</updated>
    
    <content type="html"><![CDATA[<h1>二分</h1><p>分为二分序列，二分数据结构，和二分答案。</p><p>需要满足有单调性才能二分。如果是一个凸壳可以三分。</p><h2 id="二分答案">二分答案</h2><h3 id="例题：P6069">例题：P6069</h3><p>注意这题对于方差何时最小是不能贪心处理的。</p><p>首先要排序，然后二分剩下的人数 $k$，枚举各个长为 $k$ 的区间内的方差即可。需要推一下方差式子，时间复杂度 $O(n\log n)$。</p><p>可以尺取做到 $O(n)$。</p><p>排序是为了选取的数连续，因为一些不连续的数向序列中连续的数转移一定不劣。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P6069 『MdOI R1』Group</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P6069</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> a[<span class="number">200005</span>];__int128 s[<span class="number">200005</span>],m[<span class="number">200005</span>];<span class="type">long</span> <span class="type">long</span> k,p;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n-x+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;((m[i+x-1]-m[i-1])-1.0*(s[i+x-1]-s[i-1])*(s[i+x-1]-s[i-1])/x)&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(k&gt;=((m[i+x<span class="number">-1</span>]-m[i<span class="number">-1</span>])<span class="number">-1.0</span>*(s[i+x<span class="number">-1</span>]-s[i<span class="number">-1</span>])*(s[i+x<span class="number">-1</span>]-s[i<span class="number">-1</span>])/x))<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//for(int i=1;i&lt;=n;i++)cout&lt;&lt;a[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)s[i]=s[i<span class="number">-1</span>]+a[i],m[i]=a[i]*a[i]+m[i<span class="number">-1</span>];</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=n,ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid))ans=mid,l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;n-ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题：P2898">例题：P2898</h3><p>比较考思维。</p><p>首先，二分答案。</p><p>然后考虑如何设计出 $check$ 函数。</p><p>首先，题中的 <code>矛盾</code> 有两个条件：</p><ol><li class="lvl-3"><p>当前区间与其他区间形成 <code>不可能合法</code> 的情况。</p></li><li class="lvl-3"><p>当前区间与其他相同权值的区间无交。</p></li></ol><p>第二种情况求区间交，简单，直接求左端点最大值和右端点最小值即可。</p><p>第一种情况考虑用边权从大到小排序，然后显然如果该区间已经发现被之前的区间覆盖过了，那么直接矛盾，退出。然后将<strong>该边权下的所有区间</strong>进行覆盖。可以用线段树维护。</p><p>然后你会发现样例也过不去。</p><p>细心发现样例权值为 $7$ 的区间是 $[1,10]$ 和 $[5,19]$ 的，意味着 $[5,10]$ 这个区间里面一定有 $7$。所以使用这个区间，即<strong>区间交</strong>，进行询问。</p><p>然后就能 AC 了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P2898 [USACO08JAN] Haybale Guessing G</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P2898</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,q;</span><br><span class="line"><span class="type">int</span> xds[<span class="number">4000001</span>],lazy[<span class="number">4000001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>*n;i++)xds[i]=lazy[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">xds[now]=<span class="built_in">min</span>(xds[now&lt;&lt;<span class="number">1</span>],xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(lazy[now])&#123;</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>]=lazy[now];</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lazy[now];</span><br><span class="line">lazy[now&lt;&lt;<span class="number">1</span>]=lazy[now];</span><br><span class="line">lazy[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=lazy[now];</span><br><span class="line">lazy[now]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)&#123;</span><br><span class="line">lazy[now]=v;</span><br><span class="line">xds[now]=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)<span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid),v);</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)<span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr,v);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmin</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)<span class="keyword">return</span> xds[now];</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>,res=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)res=<span class="built_in">min</span>(res,<span class="built_in">qmin</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid)));</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)res=<span class="built_in">min</span>(res,<span class="built_in">qmin</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr));</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">K</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,w;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> K &amp;a) <span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> w&gt;a.w;</span><br><span class="line">&#125;</span><br><span class="line">&#125;A[<span class="number">30001</span>],temp[<span class="number">30001</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=x;i++)temp[i]=A[i];</span><br><span class="line">temp[x+<span class="number">1</span>].w=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">sort</span>(temp+<span class="number">1</span>,temp+x+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//mdf(1,1,n,temp[1].l,temp[1].r,temp[1].w);</span></span><br><span class="line"><span class="type">int</span> last=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=x+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp[last].w!=temp[i].w)&#123;</span><br><span class="line"><span class="type">int</span> L=last,R=last;</span><br><span class="line"><span class="keyword">if</span>(i-last!=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> o=last+<span class="number">1</span>;o&lt;i;o++)&#123;</span><br><span class="line"><span class="keyword">if</span>(temp[o].l&gt;temp[L].l)L=o;</span><br><span class="line"><span class="keyword">if</span>(temp[o].r&lt;temp[R].r)R=o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(temp[R].r&lt;temp[L].l)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;last&lt;&lt;&quot; &quot;&lt;&lt;qmin(1,1,n,temp[L].l,temp[R].r)&lt;&lt;&quot; &quot;&lt;&lt;temp[i].w&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">qmin</span>(<span class="number">1</span>,<span class="number">1</span>,n,temp[L].l,temp[R].r))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=last;k&lt;i;k++)<span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,temp[k].l,temp[k].r,temp[k].w);</span><br><span class="line">last=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)cin&gt;&gt;A[i].l&gt;&gt;A[i].r&gt;&gt;A[i].w;</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=q,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid))l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> ans=mid,r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="comment">// cout&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题：P2498">例题：P2498</h3><p>处理出圆心距，然后二分答案，如果两圆有交，则两圆心连边，若圆与边界有交，则圆心与边界的虚点连边，用 BFS 判断是否完全隔离。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P2498 [SDOI2012] 拯救小云公主</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P2498</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,r,c;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">po</span>&#123;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">getdis</span><span class="params">(<span class="type">const</span> po &amp;a)</span></span>&#123;<span class="comment">//ping fang ed.</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1ll</span>*(a.x-x)*(a.x-x)+<span class="number">1ll</span>*(a.y-y)*(a.y-y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;P[<span class="number">10001</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">20000001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">10001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)E[i]=&#123;<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">4</span>;i++)head[i]=<span class="number">0</span>;</span><br><span class="line">tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="comment">// assert(tot&lt;=10000000);</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> vis[<span class="number">10001</span>];</span><br><span class="line">queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="comment">//t =&gt; n+2|n+4</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">BFS</span><span class="params">(<span class="type">int</span> s)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">5</span>;i++)vis[i]=<span class="number">0</span>;</span><br><span class="line">q.<span class="built_in">push</span>(s);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">front</span>();q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">//cerr&lt;&lt;s&lt;&lt;&quot; &quot;&lt;&lt;u&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(u==n+<span class="number">2</span>||u==n+<span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[E[i].to])q.<span class="built_in">push</span>(E[i].to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//shang:n+1,xia:n+2,zuo:n+3,you:n+4</span></span><br><span class="line"><span class="comment">//shang-&gt;you|xia =&gt; n+1 -&gt; n+2|n+4</span></span><br><span class="line"><span class="comment">//zuo-&gt;you|xia =&gt; n+3 -&gt; n+2|n+4</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">double</span> x)</span></span>&#123;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(P[i].<span class="built_in">getdis</span>(P[j])&lt;<span class="number">4</span>*x*x)<span class="built_in">addE</span>(i,j),<span class="built_in">addE</span>(j,i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(P[i].x&lt;x+<span class="number">1</span>)<span class="built_in">addE</span>(n+<span class="number">3</span>,i),<span class="built_in">addE</span>(i,n+<span class="number">3</span>);<span class="comment">//zuo//Caution!!! x+1!!!</span></span><br><span class="line"><span class="keyword">if</span>(P[i].x+x&gt;r)<span class="built_in">addE</span>(i,n+<span class="number">4</span>),<span class="built_in">addE</span>(n+<span class="number">4</span>,i);<span class="comment">//you</span></span><br><span class="line"><span class="keyword">if</span>(P[i].y&lt;x+<span class="number">1</span>)<span class="built_in">addE</span>(i,n+<span class="number">2</span>),<span class="built_in">addE</span>(n+<span class="number">2</span>,i);<span class="comment">//xia</span></span><br><span class="line"><span class="keyword">if</span>(P[i].y+x&gt;c)<span class="built_in">addE</span>(n+<span class="number">1</span>,i),<span class="built_in">addE</span>(i,n+<span class="number">1</span>);<span class="comment">//shang</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">BFS</span>(n+<span class="number">1</span>))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> !<span class="built_in">BFS</span>(n+<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;r&gt;&gt;c;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;P[i].x&gt;&gt;P[i].y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> L=<span class="number">0.5</span>,R=<span class="built_in">max</span>(r,c);</span><br><span class="line"><span class="keyword">while</span>(R-L&gt;=<span class="number">0.001</span>)&#123;</span><br><span class="line"><span class="type">double</span> mid=(L+R)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid))L=mid;</span><br><span class="line"><span class="keyword">else</span> R=mid;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;&quot;ZFYNBNBNB! &quot;&lt;&lt;L&lt;&lt;&quot; &quot;&lt;&lt;R&lt;&lt;&quot; &quot;&lt;&lt;clock()&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;fixed&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt;L;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题：P1663">例题：P1663</h3><p>首先有一个显然的 $O(n^2)$ 做法：将斜率在原点左右两侧的直线求交点即可。</p><p>考虑如何用 $O(n \log n)$ 解决。</p><p>二分答案，预处理出直线解析式，然后对于每条直线，求与直线 $y=mid$ 的交点的纵坐标。如果 $k_{now}=0$，则 $mid&gt;b_{now}$ 合法；然后把 $k_{now}&gt;0$ 的直线当做右端点，$k_{now}&lt;0$ 的直线当做左端点，然后求区间交即可。如果该区间存在，那么合法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P1663 山</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P1663</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> x[<span class="number">5001</span>],y[<span class="number">5001</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> k[<span class="number">5001</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> b[<span class="number">5001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">long</span> <span class="type">double</span> y)</span></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> l=<span class="number">0</span>,r=<span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="comment">// cout&lt;&lt;k[i]&lt;&lt;&quot; &quot;&lt;&lt;b[i]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(k[i]==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(y&lt;b[i])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">r=<span class="built_in">fmin</span>(r,(y-b[i])/k[i]);</span><br><span class="line"><span class="comment">// cout&lt;&lt;r&lt;&lt;&quot; R\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> l=<span class="built_in">fmax</span>(l,(y-b[i])/k[i]);<span class="comment">//,cout&lt;&lt;l&lt;&lt;&quot; L\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l&lt;=r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;x[i]&gt;&gt;y[i];</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span>)&#123;</span><br><span class="line">k[i<span class="number">-1</span>]=<span class="number">1.0</span>*(y[i]-y[i<span class="number">-1</span>])/(x[i]-x[i<span class="number">-1</span>]);</span><br><span class="line">b[i<span class="number">-1</span>]=-k[i<span class="number">-1</span>]*x[i]+y[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Seg Cnt:n-1</span></span><br><span class="line"><span class="type">long</span> <span class="type">double</span> L=<span class="number">0</span>,R=<span class="number">1e6</span>;</span><br><span class="line"><span class="keyword">while</span>(R-L&gt;=<span class="number">0.000001</span>)&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> mid=(L+R)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid))R=mid;</span><br><span class="line"><span class="keyword">else</span> L=mid;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;fixed&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt;L;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题：P1485">例题：P1485</h3><p>考虑二分答案。</p><p>用差分拆出平方即可。</p><p>细节巨多。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P1485 火枪打怪</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P1485</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">int</span> m[<span class="number">500005</span>],t[<span class="number">500005</span>];</span><br><span class="line"><span class="type">int</span> _1[<span class="number">500005</span>],_2[<span class="number">500005</span>],_3[<span class="number">500005</span>],_4[<span class="number">500005</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;x&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="type">int</span> C=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> S=<span class="built_in">sqrt</span>(x);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++)_1[i]=_2[i]=_3[i]=_4[i]=<span class="number">0</span>,t[i]=m[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;_1[i]&lt;&lt;&quot; &quot;&lt;&lt;_2[i]&lt;&lt;&quot; &quot;&lt;&lt;_3[i]&lt;&lt;&quot; &quot;&lt;&lt;_4[i]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">_4[i]+=_4[i+<span class="number">1</span>];</span><br><span class="line">_3[i]=_3[i]+_3[i+<span class="number">1</span>]+_4[i+<span class="number">1</span>];</span><br><span class="line">_2[i]=_2[i]+_3[i]+_2[i+<span class="number">1</span>];</span><br><span class="line">_1[i]+=_1[i+<span class="number">1</span>];</span><br><span class="line"><span class="comment">//cerr&lt;&lt;_1[i]&lt;&lt;&quot; &quot;&lt;&lt;_2[i]&lt;&lt;&quot; &quot;&lt;&lt;_3[i]&lt;&lt;&quot; &quot;&lt;&lt;_4[i]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">t[i]-=_1[i]-_2[i];</span><br><span class="line"><span class="type">int</span> lef=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(t[i]&gt;=<span class="number">0</span>)lef=t[i]/x+<span class="number">1</span>;</span><br><span class="line">_4[i]+=lef;</span><br><span class="line"><span class="keyword">if</span>(i<span class="number">-1</span>&gt;<span class="number">0</span>)_4[i<span class="number">-1</span>]+=lef;</span><br><span class="line">_1[i]+=lef*x;</span><br><span class="line">C+=lef;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;C&lt;&lt;&quot; &quot;&lt;&lt;t[i]&lt;&lt;&quot; &quot;&lt;&lt;lef&lt;&lt;&quot; Gino\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(i-S<span class="number">-1</span>&gt;<span class="number">0</span>)_4[i-S<span class="number">-1</span>]-=<span class="number">2</span>*lef,_1[i-S<span class="number">-1</span>]-=lef*x,_2[i-S<span class="number">-1</span>]-=(S)*(S)*lef,_3[i-S<span class="number">-1</span>]-=lef*(<span class="number">2</span>*S+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> C&lt;=k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// _4[16]=1,_4[15]=2;</span></span><br><span class="line"><span class="comment">// for(int i=16;i&gt;=1;i--)&#123;</span></span><br><span class="line"><span class="comment">// _4[i]+=_4[i+1];</span></span><br><span class="line"><span class="comment">// _3[i]=_3[i+1]+_4[i];</span></span><br><span class="line"><span class="comment">// _2[i]=_2[i]+_3[i]+_2[i+1];</span></span><br><span class="line"><span class="comment">// _1[i]+=_1[i+1];</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// //cerr&lt;&lt;_1[i]&lt;&lt;&quot; &quot;&lt;&lt;_2[i]&lt;&lt;&quot; &quot;&lt;&lt;_3[i]&lt;&lt;&quot; &quot;&lt;&lt;_4[i]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;m[i];</span><br><span class="line"><span class="type">int</span> l=<span class="number">0</span>,r=<span class="number">1e16</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid))r=mid<span class="number">-1</span>,ans=mid;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;ans&lt;&lt;&quot; ww\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// check(6);</span></span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题：P1281">例题：P1281</h3><p>简单的二分答案。</p><p>考虑倒着做区间划分即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P1281 书的复制</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P1281</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[<span class="number">501</span>],x[<span class="number">501</span>],y[<span class="number">501</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>,C=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;x)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(sum+a[i]&gt;x)C++,sum=a[i];</span><br><span class="line"><span class="keyword">else</span> sum+=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> C&lt;=m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class="line"><span class="built_in">reverse</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">1e9</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(mid))r=mid<span class="number">-1</span>,ans=mid;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> S=<span class="number">0</span>,K=<span class="number">1</span>;</span><br><span class="line">x[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(S+a[i]&gt;ans)y[K]=i<span class="number">-1</span>,x[++K]=i,S=a[i];</span><br><span class="line"><span class="keyword">else</span> S+=a[i];</span><br><span class="line">&#125;</span><br><span class="line">y[K]=n;</span><br><span class="line"><span class="built_in">reverse</span>(y+<span class="number">1</span>,y+m+<span class="number">1</span>),<span class="built_in">reverse</span>(x+<span class="number">1</span>,x+m+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)cout&lt;&lt;n-y[i]+<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;n-x[i]+<span class="number">1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找">二分查找</h2><p>就是想对于一个集合 $S$，想从中找到一个值为 $t$ 的元素。如果保证集合 $S$ 在某些特征下有序，且可以查询一个子集中是否有 $t$，那么可以二分集合 $S$，通过 $mid$ 值与 $t$ 值的比较或者询问 $[l,mid]$ 区间内是否有 $t$ 来判断 $t$ 是在左区间还是右区间即可。</p><p>通常交互题要用这种二分来询问。</p><h3 id="例题：P7345">例题：P7345</h3><p>这道题的二分方式有点厉害。</p><p>首先，这道题是一道求曼哈顿距离为 $x$ 的点集中一个特定的点。</p><p>它是一个正方形：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/q1f31amu.png" alt=""></p><p>可以发现，如果取 $(x_0,y_0+1)$ 询问，可以筛掉近 $\left\lfloor\frac{P}{2}\right\rfloor$ 的点，其中 $P$ 是点集大小。</p><p>第一步想到就好办了。</p><p>第二次询问就是询问是在左边的线上还是在右边的线上，然后二分即可。</p><p>也可以第一次就询问四条边上是哪条边，但是 $MAX$ 卡的很紧，所以只能用上面那种方法。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P7345 【DSOI 2021】吟唱的金色花海</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P7345</span></span><br><span class="line"><span class="comment">// Memory Limit: 128 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> q,x_0,y_0,k,t;</span><br><span class="line"><span class="type">bool</span> T;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Q</span><span class="params">(<span class="type">int</span> X,<span class="type">int</span> Y)</span></span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;X&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;Y&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout.<span class="built_in">flush</span>();</span><br><span class="line">cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;q;</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line">cin&gt;&gt;t&gt;&gt;x_0&gt;&gt;y_0&gt;&gt;k;</span><br><span class="line"><span class="type">int</span> l,r,ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">Q</span>(x_0,y_0+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(T==<span class="number">1</span>)&#123;<span class="comment">//up</span></span><br><span class="line"><span class="built_in">Q</span>(x_0-t,y_0+t);<span class="comment">//? up-left</span></span><br><span class="line"><span class="keyword">if</span>(T==<span class="number">1</span>)&#123;<span class="comment">//up-left</span></span><br><span class="line">l=x_0-t,r=x_0;</span><br><span class="line">ans=x_0;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">Q</span>(mid-t,t-x_0+mid+y_0);</span><br><span class="line"><span class="keyword">if</span>(T)ans=mid,r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;t-x_0+ans+y_0&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//up-right</span></span><br><span class="line">l=x_0,r=x_0+t;</span><br><span class="line">ans=x_0;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">Q</span>(mid+t,t-mid+x_0+y_0);</span><br><span class="line"><span class="keyword">if</span>(T)ans=mid,l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;t-ans+x_0+y_0&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//down</span></span><br><span class="line"><span class="built_in">Q</span>(x_0-t,y_0-t);<span class="comment">//? down-left</span></span><br><span class="line"><span class="keyword">if</span>(T==<span class="number">1</span>)&#123;<span class="comment">//down-left</span></span><br><span class="line">l=x_0-t,r=x_0;</span><br><span class="line">ans=x_0;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">Q</span>(mid-t,-(t-x_0+mid)+y_0);</span><br><span class="line"><span class="keyword">if</span>(T)ans=mid,r=mid<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;-(t-x_0+ans)+y_0&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;<span class="comment">//down-right</span></span><br><span class="line">l=x_0,r=x_0+t;</span><br><span class="line">ans=x_0;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">Q</span>(mid+t,-(t-mid+x_0)+y_0);</span><br><span class="line"><span class="keyword">if</span>(T)ans=mid,l=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;-(t-ans+x_0)+y_0&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在数据结构上二分">在数据结构上二分</h2><p>最经典的问题就是全局第 $k$ 小。考虑建权值线段树，在权值线段树上像平衡树一样查找就行了。</p><p>例题大多是线段树或树状数组上二分。</p><h3 id="P5579">P5579</h3><p>考虑用线段树维护区间加特定数列（前缀和优化），由于序列有单调性，可以使用线段树上二分找到第一个大于 $k$ 的数（类似于 <code>upper_bound</code>，维护区间最大值即可），然后区间赋值统计答案就行了。</p><p>注意由于 <code>cut</code> 标记打在了 <code>grow</code> 标记的后面，所以 <code>cut</code> 更具有时效性，<code>pushdown</code> 时，先处理 <code>cut</code>，再处理 <code>grow</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P5579 [PA2015] Siano</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P5579</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[<span class="number">500005</span>];</span><br><span class="line"><span class="type">int</span> xds[<span class="number">2000005</span>],sum[<span class="number">2000005</span>],sta[<span class="number">2000005</span>],tagc[<span class="number">2000005</span>];</span><br><span class="line"><span class="type">int</span> pre[<span class="number">500005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">const</span> <span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">xds[now]=<span class="built_in">max</span>(xds[now&lt;&lt;<span class="number">1</span>],xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">sum[now]=sum[now&lt;&lt;<span class="number">1</span>]+sum[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> id[<span class="number">500005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bulid</span><span class="params">(<span class="type">const</span> <span class="type">int</span> now,<span class="type">const</span> <span class="type">int</span> l,<span class="type">const</span> <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">tagc[now]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> id[l]=now,<span class="built_in">void</span>();</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cut</span><span class="params">(<span class="type">const</span> <span class="type">int</span> now,<span class="type">const</span> <span class="type">int</span> l,<span class="type">const</span> <span class="type">int</span> r,<span class="type">const</span> <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">tagc[now]=xds[now]=k;</span><br><span class="line">sum[now]=k*(r-l+<span class="number">1</span>);</span><br><span class="line">sta[now]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">grow</span><span class="params">(<span class="type">const</span> <span class="type">int</span> now,<span class="type">const</span> <span class="type">int</span> l,<span class="type">const</span> <span class="type">int</span> r,<span class="type">const</span> <span class="type">int</span> cl)</span></span>&#123;</span><br><span class="line">sum[now]+=(pre[r]-pre[l<span class="number">-1</span>])*cl;</span><br><span class="line">sta[now]+=cl;</span><br><span class="line">xds[now]+=a[r]*cl;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">const</span> <span class="type">int</span> now,<span class="type">const</span> <span class="type">int</span> l,<span class="type">const</span> <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(tagc[now]!=<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">cut</span>(now&lt;&lt;<span class="number">1</span>,l,mid,tagc[now]);</span><br><span class="line"><span class="built_in">cut</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,tagc[now]);</span><br><span class="line">tagc[now]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sta[now])&#123;</span><br><span class="line"><span class="built_in">grow</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sta[now]);</span><br><span class="line"><span class="built_in">grow</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,sta[now]);</span><br><span class="line">sta[now]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mdf</span><span class="params">(<span class="type">const</span> <span class="type">int</span> now,<span class="type">const</span> <span class="type">int</span> l,<span class="type">const</span> <span class="type">int</span> r,<span class="type">const</span> <span class="type">int</span> sl,<span class="type">const</span> <span class="type">int</span> sr,<span class="type">const</span> <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="comment">// if(sr&lt;sl)return 0;</span></span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)&#123;</span><br><span class="line"><span class="type">int</span> ed=sum[now];</span><br><span class="line"><span class="comment">// cout&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;ed&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="built_in">cut</span>(now,l,r,k);</span><br><span class="line"><span class="keyword">return</span> ed-sum[now];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)res+=<span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid),k);</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)res+=<span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr,k);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">const</span> <span class="type">int</span> now,<span class="type">const</span> <span class="type">int</span> l,<span class="type">const</span> <span class="type">int</span> r,<span class="type">const</span> <span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> l;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> res;</span><br><span class="line"><span class="keyword">if</span>(k&gt;xds[now&lt;&lt;<span class="number">1</span>])res=<span class="built_in">find</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,k);</span><br><span class="line"><span class="keyword">else</span> res=<span class="built_in">find</span>(now&lt;&lt;<span class="number">1</span>,l,mid,k);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)pre[i]=pre[i<span class="number">-1</span>]+a[i];</span><br><span class="line"><span class="type">int</span> lst=<span class="number">0</span>,x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="built_in">grow</span>(<span class="number">1</span>,<span class="number">1</span>,n,x-lst);</span><br><span class="line">lst=x;</span><br><span class="line"><span class="comment">// cout&lt;&lt;find(1,1,n,y)&lt;&lt;&quot; test\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(xds[<span class="number">1</span>]&lt;=y)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,<span class="built_in">find</span>(<span class="number">1</span>,<span class="number">1</span>,n,y),n,y)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="P3224">P3224</h3><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/q0r39u8o.png" alt=""></p><p>此题线段树上二分无法通过（常数太大了），故使用树状数组二分。</p><p>这种二分类似于倍增。观察上面图，其实发现树状数组节点记录的信息就是 $[i-\operatorname{lowbit}(i)+1,i]$，如果用更通俗的语言来讲，对于从 $0$ 开始到 $\left\lfloor\log n\right\rfloor$ 的所有 $i$，第 $2^i$ 个节点记录的是前 $2^i$ 个元素所有的信息。如果从该节点拓展出一个节点 $j$ 满足 $j&lt;i$，那么节点 $2<sup>j+2</sup>i$ 记录的信息就是 $[2<sup>i+1,2</sup>i+2^j]$ 区间内的所有信息，那么用类似于倍增的算法从  $\left\lfloor\log n\right\rfloor$ 开始向下枚举到 $0$ 就能找到位置了。</p><p>本题则较为复杂。不难发现当 冰 &lt;= 场地 &lt;= 火 时，如果场地的温度在滑动，那么满足火系的能量和是后缀和，冰系的能量和是前缀和，那么我们只需要二分出两条曲线的交点所在最小区间左右端点，然后再对于其中最大值找到最大的温度满足值仍最大即可。</p><p>细节较多，具体可以参考代码。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P6619 [省选联考 2020 A/B 卷] 冰火战士</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P6619</span></span><br><span class="line"><span class="comment">// Memory Limit: 512 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 3000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> tice[<span class="number">2000005</span>],tfire[<span class="number">2000005</span>];</span><br><span class="line"><span class="type">int</span> op,t,x,y,q;</span><br><span class="line"><span class="type">int</span> id[<span class="number">2000005</span>],_C[<span class="number">2000005</span>],ene[<span class="number">2000005</span>];</span><br><span class="line"><span class="type">int</span> temp[<span class="number">2000005</span>],tcnt;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> _=<span class="number">2e6</span>+<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdfice</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=_<span class="number">-1</span>)&#123;</span><br><span class="line">tice[x]+=v;</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdffire</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=_<span class="number">-1</span>)&#123;</span><br><span class="line">tfire[x]+=v;</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qice</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">res+=tice[x];</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qfire</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">res+=tfire[x];</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> org[_+<span class="number">4</span>],O[_+<span class="number">4</span>],buc[_+<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">cin&gt;&gt;op&gt;&gt;t;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">id[i]=t;</span><br><span class="line">_C[i]=x;</span><br><span class="line">O[i]=x;</span><br><span class="line">ene[i]=y;</span><br><span class="line">temp[++tcnt]=_C[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">id[i]=<span class="number">-1</span>;</span><br><span class="line">_C[i]=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(temp+<span class="number">1</span>,temp+tcnt+<span class="number">1</span>);</span><br><span class="line">tcnt=<span class="built_in">unique</span>(temp+<span class="number">1</span>,temp+tcnt+<span class="number">1</span>)-temp<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(id[i]&gt;=<span class="number">0</span>)_C[i]=<span class="built_in">lower_bound</span>(temp+<span class="number">1</span>,temp+tcnt+<span class="number">1</span>,_C[i])-temp,org[_C[i]]=O[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> zfy=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=q;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line"><span class="keyword">if</span>(org[i]!=<span class="number">0</span>)zfy=org[i];</span><br><span class="line"><span class="keyword">else</span> org[i]=zfy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;org[_C[i]]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(id[i]==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(id[_C[i]])<span class="built_in">mdffire</span>(_C[_C[i]],-ene[_C[i]]),buc[_C[_C[i]]]-=ene[_C[i]];</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">mdfice</span>(_C[_C[i]],-ene[_C[i]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(id[i])&#123;</span><br><span class="line"><span class="built_in">mdffire</span>(_C[i],ene[i]);</span><br><span class="line">buc[_C[i]]+=ene[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">mdfice</span>(_C[i],ene[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> std=<span class="built_in">qfire</span>(_<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(std==<span class="number">0</span>||<span class="built_in">qice</span>(_<span class="number">-1</span>)==<span class="number">0</span>)&#123;cout&lt;&lt;<span class="string">&quot;Peace\n&quot;</span>;<span class="keyword">continue</span>;&#125;</span><br><span class="line"><span class="type">int</span> now=<span class="number">0</span>,ICE=<span class="number">0</span>,FIRE=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> o=<span class="number">20</span>;o&gt;=<span class="number">0</span>;o--)&#123;</span><br><span class="line"><span class="type">int</span> ptt=now+(<span class="number">1</span>&lt;&lt;o);</span><br><span class="line"><span class="keyword">if</span>(ptt&lt;=q&amp;&amp;tice[ptt]+ICE&lt;=std-tfire[ptt]-FIRE+buc[ptt])now=ptt,FIRE+=tfire[ptt],ICE+=tice[ptt];</span><br><span class="line"><span class="comment">// cerr&lt;&lt;now&lt;&lt;&quot; &quot;&lt;&lt;ICE&lt;&lt;&quot; &quot;&lt;&lt;FIRE&lt;&lt;&quot; &quot;&lt;&lt;tice[ptt]+ICE&lt;&lt;&quot; &quot;&lt;&lt;std-tfire[ptt]-FIRE+buc[ptt]&lt;&lt;&quot; &quot;&lt;&lt;&quot; in\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> M=<span class="built_in">min</span>(std-<span class="built_in">qfire</span>(now)+buc[now],<span class="built_in">qice</span>(now));</span><br><span class="line"><span class="type">int</span> test=<span class="built_in">min</span>(std-<span class="built_in">qfire</span>(now+<span class="number">1</span>)+buc[now+<span class="number">1</span>],<span class="built_in">qice</span>(now+<span class="number">1</span>));</span><br><span class="line"><span class="comment">// cerr&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// cerr&lt;&lt;i&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// cerr&lt;&lt;std&lt;&lt;&quot; &quot;&lt;&lt;now&lt;&lt;&quot; &quot;&lt;&lt;ICE&lt;&lt;&quot; &quot;&lt;&lt;FIRE&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// cerr&lt;&lt;test&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(test==<span class="number">0</span>&amp;&amp;M==<span class="number">0</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Peace\n&quot;</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(test&gt;=M)&#123;</span><br><span class="line"><span class="comment">// cout&lt;&lt;org[now+1]&lt;&lt;&quot; &quot;&lt;&lt;test&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">ICE=<span class="number">0</span>,FIRE=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> o=<span class="number">20</span>;o&gt;=<span class="number">0</span>;o--)&#123;</span><br><span class="line"><span class="type">int</span> ptt=ans+(<span class="number">1</span>&lt;&lt;o);</span><br><span class="line"><span class="keyword">if</span>(ptt&lt;=q&amp;&amp;std-tfire[ptt]-FIRE+buc[ptt]&gt;=test)ans=ptt,FIRE+=tfire[ptt];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;&quot;! &quot;&lt;&lt;ans&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">cout&lt;&lt;org[ans]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;test*<span class="number">2</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;org[now]&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;M*<span class="number">2</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CF1439C">CF1439C</h3><p>很好的一道线段树上二分的题。</p><p>我们分操作讨论线段树上的操作。</p><p>对于操作一，考虑它不会改变区间单调性，那么可以二分找出第一个严格比 $y$ 小的数的位置，然后对于该位置到 $x$ 的区间进行区间赋值操作就行了，时间复杂度 $O(\log n)$。</p><p>对于操作二，维护区间和，每次暴力遍历左右子树寻找区间的最小值位置，然后对于这个位置的子区间进行对当前数减去子区间的和的操作。不难发现这种位置每次最多有 $O(\log n)$ 个，然后由于序列的单调性，每次当前数至少减半，那么时间复杂度为 $O(\log n\log V)$，总时间复杂度为 $O(q\log n\log V)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Greedy Shopping</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/CF1439C</span></span><br><span class="line"><span class="comment">// Memory Limit: 250 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 3000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> xds[maxn&lt;&lt;<span class="number">2</span>];<span class="comment">//sum num</span></span><br><span class="line"><span class="type">int</span> mi[maxn&lt;&lt;<span class="number">2</span>];<span class="comment">//min num</span></span><br><span class="line"><span class="type">int</span> qy;<span class="comment">//querying y</span></span><br><span class="line"><span class="type">int</span> tag[maxn&lt;&lt;<span class="number">2</span>];<span class="comment">//lazy tag for assign operation</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">xds[now]=xds[now&lt;&lt;<span class="number">1</span>]+xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">mi[now]=<span class="built_in">min</span>(mi[now&lt;&lt;<span class="number">1</span>],mi[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tag[now])&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">tag[now&lt;&lt;<span class="number">1</span>]=tag[now];</span><br><span class="line">tag[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=tag[now];</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>]=tag[now]*(mid-l+<span class="number">1</span>);</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=tag[now]*(r-mid);</span><br><span class="line">mi[now&lt;&lt;<span class="number">1</span>]=tag[now];</span><br><span class="line">mi[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=tag[now];</span><br><span class="line">tag[now]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bulid</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> mi[now]=xds[now]=a[l],<span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">mi[now]=<span class="number">1e9</span>;</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="comment">//Querying upperbound_greater_int</span></span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> l;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="keyword">if</span>(mi[now&lt;&lt;<span class="number">1</span>]&lt;v)res=<span class="built_in">find</span>(now&lt;&lt;<span class="number">1</span>,l,mid,v);</span><br><span class="line"><span class="keyword">else</span> res=<span class="built_in">find</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,v);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="comment">//assign operation executor</span></span><br><span class="line"><span class="comment">//cerr&lt;&lt;now&lt;&lt; &#x27; &#x27; &lt;&lt; l &lt;&lt; &#x27; &#x27; &lt;&lt; r &lt;&lt; &#x27; &#x27; &lt;&lt; sl &lt;&lt; &#x27; &#x27; &lt;&lt; sr &lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)<span class="keyword">return</span> xds[now]=v*(r-l+<span class="number">1</span>),mi[now]=v,tag[now]=v,<span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)<span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid),v);</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)<span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr,v);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> st)</span></span>&#123;</span><br><span class="line"><span class="comment">// cerr &lt;&lt; now&lt;&lt;&quot; &quot;&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;qy&lt;&lt;&quot; &quot;&lt;&lt;mi[now] &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//Deal with operator 2 -&gt; Search for the operation range and count</span></span><br><span class="line"><span class="keyword">if</span>(r&lt;st||qy&lt;mi[now])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=st&amp;&amp;qy&gt;=xds[now])&#123;</span><br><span class="line">qy-=xds[now];</span><br><span class="line"><span class="keyword">return</span> r-l+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// if(l==r)return 0;</span></span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="keyword">if</span>(mid&gt;=st)res+=<span class="built_in">query</span>(now&lt;&lt;<span class="number">1</span>,l,mid,st);</span><br><span class="line">res+=<span class="built_in">query</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,st);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class="line"><span class="built_in">bulid</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="type">int</span> op,x;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin&gt;&gt;op&gt;&gt;x&gt;&gt;qy;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;m&lt;&lt;&#x27;\n&#x27;;</span></span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> s=<span class="built_in">find</span>(<span class="number">1</span>,<span class="number">1</span>,n,qy);</span><br><span class="line"><span class="keyword">if</span>(s&gt;x)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,s,x,qy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout&lt;&lt;<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,n,x)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CF1705E">CF1705E</h3><p>首先开权值线段树。维护每一位的二进制加减过程。</p><p>对于每一次操作，分为删除一个数再加上一个数。</p><p>删除数时，如果当前位值为 $1$，直接删除即可；如果值为 $0$，则需要线段树上二分出从当前位开始向右第一个值为 $1$ 的位，将此位设置为 $0$，然后将左侧区间赋值为 $1$。</p><p>加入同理。答案就是右侧第一个 $1$ 的位置。</p><p>二分的时候需要维护区间是否有 $0$ 或者 $1$，其他正常在子区间二分即可，单次询问最坏时间复杂度为 $O(\log n+\log n)=O(\log n)$，其中第一个 $\log n$ 是在寻找子区间中第一个有 $0$ 或 $1$ 的区间，第二个 $\log n$ 是在寻找该区间中最小的 $0$ 或 $1$。总时间复杂度是较大常数的 $O(q\log n)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Mark and Professor Koro</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/CF1705E</span></span><br><span class="line"><span class="comment">// Memory Limit: 250 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn=<span class="number">2e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">int</span> a[maxn];</span><br><span class="line"><span class="type">bool</span> xds0[maxn&lt;&lt;<span class="number">3</span>],xds1[maxn&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="type">bool</span> lazy0[maxn&lt;&lt;<span class="number">3</span>],lazy1[maxn&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">xds1[now]=xds1[now&lt;&lt;<span class="number">1</span>]|xds1[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">xds0[now]=xds0[now&lt;&lt;<span class="number">1</span>]|xds0[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="built_in">assert</span>((!lazy1[now]||!lazy0[now]));</span><br><span class="line"><span class="keyword">if</span>(lazy0[now])&#123;</span><br><span class="line">xds0[now&lt;&lt;<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">xds1[now&lt;&lt;<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">lazy0[now&lt;&lt;<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">lazy1[now&lt;&lt;<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">xds0[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">xds1[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">lazy0[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">lazy1[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">lazy0[now]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(lazy1[now])&#123;</span><br><span class="line">xds0[now&lt;&lt;<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">xds1[now&lt;&lt;<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">lazy0[now&lt;&lt;<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">lazy1[now&lt;&lt;<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">xds0[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">xds1[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">lazy0[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">lazy1[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">lazy1[now]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find0</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> st)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(r&lt;st||xds0[now]==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=st)&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> xds1[now]=<span class="number">1</span>,xds0[now]=<span class="number">0</span>,l;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(xds0[now&lt;&lt;<span class="number">1</span>])res=<span class="built_in">find0</span>(now&lt;&lt;<span class="number">1</span>,l,mid,st);</span><br><span class="line"><span class="keyword">else</span> res=<span class="built_in">find0</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,st);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>,res=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">if</span>(mid&gt;=st)res=<span class="built_in">min</span>(res,<span class="built_in">find0</span>(now&lt;&lt;<span class="number">1</span>,l,mid,st));</span><br><span class="line"><span class="keyword">if</span>(res!=<span class="number">1e9</span>)<span class="keyword">return</span> <span class="built_in">pushup</span>(now),res;</span><br><span class="line">res=<span class="built_in">min</span>(res,<span class="built_in">find0</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,st));</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find1</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> st)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(r&lt;st||xds1[now]==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=st)&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> xds0[now]=<span class="number">1</span>,xds1[now]=<span class="number">0</span>,l;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(xds1[now&lt;&lt;<span class="number">1</span>])res=<span class="built_in">find1</span>(now&lt;&lt;<span class="number">1</span>,l,mid,st);</span><br><span class="line"><span class="keyword">else</span> res=<span class="built_in">find1</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,st);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>,res=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">if</span>(mid&gt;=st)res=<span class="built_in">min</span>(res,<span class="built_in">find1</span>(now&lt;&lt;<span class="number">1</span>,l,mid,st));</span><br><span class="line"><span class="keyword">if</span>(res!=<span class="number">1e9</span>)<span class="keyword">return</span> <span class="built_in">pushup</span>(now),res;</span><br><span class="line">res=<span class="built_in">min</span>(res,<span class="built_in">find1</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,st));</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr,<span class="type">bool</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)&#123;</span><br><span class="line"><span class="keyword">if</span>(v)xds1[now]=<span class="number">1</span>,xds0[now]=<span class="number">0</span>,lazy1[now]=<span class="number">1</span>,lazy0[now]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> xds0[now]=<span class="number">1</span>,xds1[now]=<span class="number">0</span>,lazy0[now]=<span class="number">1</span>,lazy1[now]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)<span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(mid,sr),v);</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)<span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(mid+<span class="number">1</span>,sl),sr,v);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> _=<span class="number">4e5</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> nxt=<span class="built_in">find0</span>(<span class="number">1</span>,<span class="number">1</span>,_,v);</span><br><span class="line"><span class="comment">//cerr&lt;&lt;nxt&lt;&lt;&quot; &quot;&lt;&lt;v&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(nxt==v)<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,_,v,nxt<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> nxt=<span class="built_in">find1</span>(<span class="number">1</span>,<span class="number">1</span>,_,v);</span><br><span class="line"><span class="comment">//cerr&lt;&lt;nxt&lt;&lt;&quot; &quot;&lt;&lt;v&lt;&lt;&quot; delling\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(nxt==v)<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,_,v,nxt<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">lazy0[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">xds0[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getans</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> l;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(xds1[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])res=<span class="built_in">getans</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">else</span> res=<span class="built_in">getans</span>(now&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line"><span class="built_in">insert</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="built_in">del</span>(a[x]);</span><br><span class="line"><span class="built_in">insert</span>(y);</span><br><span class="line">a[x]=y;</span><br><span class="line">cout&lt;&lt;<span class="built_in">getans</span>(<span class="number">1</span>,<span class="number">1</span>,_)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="离线二分">离线二分</h2><p>分为 CDQ 分治和整体二分。</p><h3 id="CDQ-分治">CDQ 分治</h3><p>严格意义上，这只是一种分治的思想。</p><p>在处理询问时，可以将左区间和右区间先分开处理，然后再处理跨过了 $mid$ 的部分。</p><p>注意，当题中有时间顺序要求，即修改不独立时，需要先处理左区间，然后处理中间的部分，最后处理右区间。</p><p>CDQ 分治最经典的问题是三维偏序：</p><details><summary>P3810 三维偏序</summary><p>有 $n$ 个元素，第 $i$ 个元素有 $a_i$，$b_i$，$c_i$ 三个属性，设 $f(i)$ 表示满足 $a_j\leq a_i$ 且 $b_j\leq b_i$ 且 $c_j\leq c_i$ 且 $j\not= i$ 的 $j$ 的数量。</p><p>对于 $d\in[0,n)$，求 $f(i)=d$ 的数量。</p></details><p>首先按照 $a$ 排序。此时满足 $a_j\leq a_i$ 就是满足 $j&lt;i$。然后考虑如何处理中间的部分。</p><p>将左右区间分别按照 $b$ 排序，然后使用类似双指针的方式遍历一遍左右区间，具体如下。</p><ol><li class="lvl-3"><p>$b_R\geq b_L$：利用树状数组维护 $\geq c_L$ 的个数，可以发现树状数组一次的加入次数是 $O(n)$ 的。</p></li><li class="lvl-3"><p>$b_R&lt;b_L$：询问树状数组 $c_R$ 处的前缀和即可。</p></li></ol><p>代码中注明了一些要注意的地方。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P3810 【模板】三维偏序（陌上花开）</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P3810</span></span><br><span class="line"><span class="comment">// Memory Limit: 500 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">E</span>&#123;</span><br><span class="line"><span class="type">int</span> a,b,c,cnt,G,id;<span class="comment">//id for debug</span></span><br><span class="line">&#125;el[<span class="number">100001</span>],T[<span class="number">100002</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp1</span><span class="params">(<span class="type">const</span> E &amp;a,<span class="type">const</span> E &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.a==b.a?(a.b==b.b?a.c&lt;b.c:a.b&lt;b.b):a.a&lt;b.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp2</span><span class="params">(<span class="type">const</span> E &amp;a,<span class="type">const</span> E &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.b==b.b?a.c&lt;b.c:a.b&lt;b.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="type">int</span> d[<span class="number">100001</span>];</span><br><span class="line"><span class="type">int</span> NL,NR;<span class="comment">//two-pointers</span></span><br><span class="line"><span class="type">int</span> t[<span class="number">200001</span>];<span class="comment">//BIT</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">const</span> <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">const</span> <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=k;i++)t[i]=<span class="number">0</span>;<span class="comment">//maxc=&gt;k;</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=k)&#123;<span class="comment">//Caution! The maxnum is k. </span></span><br><span class="line">t[x]+=v;<span class="comment">//the problem is &lt;=,when it&#x27;s &lt;,first do lowbit.</span></span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);<span class="comment">//lowbit change</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qsum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">res+=t[x];</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;<span class="comment">//GET qian zhui he.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;<span class="comment">//Cut into [l,mid] and [mid+1,r]</span></span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;<span class="comment">//Special Judge</span></span><br><span class="line"><span class="built_in">solve</span>(l,mid);<span class="comment">//Step 1: di gui to deal with the left</span></span><br><span class="line"><span class="built_in">solve</span>(mid+<span class="number">1</span>,r);<span class="comment">//Step 2: di gui to deal with the right</span></span><br><span class="line"><span class="comment">//Step 3: Calculate the answer which is go through mid</span></span><br><span class="line"><span class="comment">//Because a&#x27;s order ordered,step 2,3 can&#x27;t reverse</span></span><br><span class="line"><span class="built_in">sort</span>(el+l,el+mid+<span class="number">1</span>,cmp2);</span><br><span class="line"><span class="built_in">sort</span>(el+mid+<span class="number">1</span>,el+r+<span class="number">1</span>,cmp2);<span class="comment">//Use b to sort,ready to use two-pointers and BIT.</span></span><br><span class="line">NL=l,NR=mid+<span class="number">1</span>;<span class="comment">//two-pointers</span></span><br><span class="line"><span class="comment">//The Core Code</span></span><br><span class="line"><span class="type">int</span> minnum=<span class="number">1e9</span>;<span class="comment">// ka chang</span></span><br><span class="line"><span class="keyword">while</span>(NR&lt;=r)&#123;</span><br><span class="line"><span class="keyword">while</span>(NL&lt;=mid&amp;&amp;el[NL].b&lt;=el[NR].b)<span class="built_in">mdf</span>(el[NL].c,el[NL].G),NL++,minnum=<span class="built_in">min</span>(el[NL<span class="number">-1</span>].c,minnum);</span><br><span class="line">el[NR].cnt+=<span class="built_in">qsum</span>(el[NR].c);</span><br><span class="line"><span class="comment">//if(el[NR].id==3)cerr&lt;&lt;qsum(el[NR].c)&lt;&lt;&quot; &quot;&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; test\n&quot;;</span></span><br><span class="line">NR++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">init</span>(minnum);</span><br><span class="line"><span class="comment">//End of The Core Code</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);cin.<span class="built_in">tie</span>(<span class="number">0</span>);cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;T[i].a&gt;&gt;T[i].b&gt;&gt;T[i].c,T[i].id=i;</span><br><span class="line"><span class="built_in">sort</span>(T+<span class="number">1</span>,T+n+<span class="number">1</span>,cmp1);<span class="comment">//Sort by a</span></span><br><span class="line"><span class="comment">//now Converted a_j&lt;=a_i to j&lt;i</span></span><br><span class="line"><span class="comment">//qu chong--- ! important</span></span><br><span class="line"><span class="type">int</span> lst=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(T[i].a!=T[lst].a||T[i].b!=T[lst].b||T[i].c!=T[lst].c)&#123;</span><br><span class="line">el[++cnt]=T[lst];</span><br><span class="line">el[cnt].G=i-lst;</span><br><span class="line">lst=i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//No li san hua&#x27;s need,main working tree clean and solve()</span></span><br><span class="line"><span class="built_in">solve</span>(<span class="number">1</span>,cnt);</span><br><span class="line"><span class="comment">//Output</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)d[el[i].cnt+el[i].G<span class="number">-1</span>]+=el[i].G;<span class="comment">//,cerr&lt;&lt;el[i].id&lt;&lt;&quot; &quot;&lt;&lt;el[i].cnt&lt;&lt;&quot; &quot;&lt;&lt;el[i].G&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cout&lt;&lt;d[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大多题对于 CDQ 分治的应用就是三维偏序。然后还有一个 CDQ 分治将动态问题转成静态问题的神奇东西没看懂。</p><h4 id="例题：P3157">例题：P3157</h4><p>进行转化：</p><p>将逆序对记录到先被删除的那一个元素上，得到 $i&lt;j,v_i&gt;v_j,t_i\leq t_j$，特别的，不被删除的元素 $t_i=m+1$。</p><p>当然逆序对不只有这一种表达方式，还有 $i&gt;j,v_i&lt;v_j.t_i\leq t_j$。那么用 CDQ 分治扫两次即可。注意此时值为 $m+1$ 的 $t$ 会被算两次，要特判。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P3157 [CQOI2011] 动态逆序对</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P3157</span></span><br><span class="line"><span class="comment">// Memory Limit: 500 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1500 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">E</span>&#123;</span><br><span class="line"><span class="type">int</span> id,v,t,cnt;</span><br><span class="line">&#125;el[<span class="number">100001</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="comment">//id cant be same,so no need to li san hua.</span></span><br><span class="line"><span class="comment">//id_i&gt;id_j,v_i&lt;v_j,t_i&lt;=t_j</span></span><br><span class="line"><span class="comment">//cmp_id-&gt;no need.</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> E &amp;a,<span class="type">const</span> E &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.v&gt;b.v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> bu,C[<span class="number">100001</span>],T[<span class="number">100001</span>];</span><br><span class="line"><span class="type">int</span> NL,NR;</span><br><span class="line"><span class="type">int</span> t[<span class="number">100001</span>];<span class="comment">//m-t_i+2;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=m+<span class="number">2</span>)&#123;</span><br><span class="line">t[x]+=v;</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qsum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">res+=t[x];</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">solve</span>(l,mid);</span><br><span class="line"><span class="built_in">solve</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">sort</span>(el+l,el+mid+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="built_in">sort</span>(el+mid+<span class="number">1</span>,el+r+<span class="number">1</span>,cmp);</span><br><span class="line">NL=l,NR=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(NR&lt;=r)&#123;</span><br><span class="line"><span class="keyword">while</span>(NL&lt;=mid&amp;&amp;el[NL].v&gt;=el[NR].v)<span class="built_in">mdf</span>(m-el[NL].t+<span class="number">2</span>,<span class="number">1</span>),NL++;</span><br><span class="line">T[el[NR].t]+=<span class="built_in">qsum</span>(m-el[NR].t+<span class="number">2</span>);</span><br><span class="line">NR++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;NL;i++)<span class="built_in">mdf</span>(m-el[i].t+<span class="number">2</span>,<span class="number">-1</span>);</span><br><span class="line">NL=mid,NR=r;</span><br><span class="line"><span class="keyword">while</span>(NL&gt;=l)&#123;</span><br><span class="line"><span class="keyword">while</span>(NR&gt;=mid+<span class="number">1</span>&amp;&amp;el[NL].v&gt;=el[NR].v)<span class="built_in">mdf</span>(m-el[NR].t+<span class="number">2</span>,<span class="number">1</span>),NR--;</span><br><span class="line"><span class="keyword">if</span>(el[NL].t!=m+<span class="number">1</span>)T[el[NL].t]+=<span class="built_in">qsum</span>(m-el[NL].t+<span class="number">2</span>);</span><br><span class="line">NL--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=NR+<span class="number">1</span>;i&lt;=r;i++)<span class="built_in">mdf</span>(m-el[i].t+<span class="number">2</span>,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;el[i].v,el[i].id=i,C[el[i].v]=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)cin&gt;&gt;bu,el[C[bu]].t=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">if</span>(el[i].t==<span class="number">0</span>)el[i].t=m+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">solve</span>(<span class="number">1</span>,n);</span><br><span class="line"><span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m+<span class="number">1</span>;i++)sum+=T[i];<span class="comment">//,cerr&lt;&lt;T[i]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cout&lt;&lt;sum&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">sum-=T[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例题：P8575">例题：P8575</h4><p>首先转换偏序关系：<br>$$<br>red_x&gt;red_{id}\and blue_x&gt;blue_{id}\and dfn_{id}\in[dfn_x,dfn_x+siz_x-1]<br>$$<br>发现是一个四维偏序。</p><p>后面的部分转化为区间查询，单点修改，前面正常些就行了。</p><p>注意三维偏序题的排序都要排完整，多判相等情况。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P8575 「DTOI-2」星之河</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P8575</span></span><br><span class="line"><span class="comment">// Memory Limit: 64 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">O</span>&#123;</span><br><span class="line"><span class="type">int</span> red,blue,id,re,o;</span><br><span class="line">&#125;el[<span class="number">200001</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">400001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">200001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfncnt,rk[<span class="number">200001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">el[now].id=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(E[i].to,now);</span><br><span class="line">&#125;</span><br><span class="line">el[now].re=dfncnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> A[<span class="number">200001</span>],Red[<span class="number">200001</span>],Blue[<span class="number">200001</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp1</span><span class="params">(<span class="type">const</span> O &amp;a,<span class="type">const</span> O &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.red==b.red?(a.blue==b.blue?a.id&gt;b.id:a.blue&lt;b.blue):a.red&lt;b.red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp2</span><span class="params">(<span class="type">const</span> O &amp;a,<span class="type">const</span> O &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.blue&lt;b.blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> NL,NR;</span><br><span class="line"><span class="type">int</span> t[<span class="number">300001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n+<span class="number">1</span>)&#123;</span><br><span class="line">t[x]+=v;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;v&lt;&lt;&quot; &quot;&lt;&lt;t[x]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qsum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">res+=t[x];</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">solve</span>(l,mid);</span><br><span class="line"><span class="built_in">solve</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">sort</span>(el+l,el+mid+<span class="number">1</span>,cmp2);</span><br><span class="line"><span class="built_in">sort</span>(el+mid+<span class="number">1</span>,el+r+<span class="number">1</span>,cmp2);</span><br><span class="line">NL=l,NR=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(NR&lt;=r)&#123;</span><br><span class="line"><span class="keyword">while</span>(NL&lt;=mid&amp;&amp;el[NL].blue&lt;=el[NR].blue)<span class="built_in">mdf</span>(el[NL].id,<span class="number">1</span>),NL++;</span><br><span class="line">A[el[NR].o]+=<span class="built_in">qsum</span>(el[NR].re)-<span class="built_in">qsum</span>(el[NR].id);</span><br><span class="line"><span class="comment">//if(el[NR].o==3)cerr&lt;&lt;NR&lt;&lt;&quot; &quot;&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;el[NR].re&lt;&lt;&quot; &quot;&lt;&lt;el[NR].id&lt;&lt;&quot; &quot;&lt;&lt;qsum(el[NR].re)-qsum(el[NR].id)&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">NR++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;&quot;test\n&quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;NL;i++)<span class="built_in">mdf</span>(el[i].id,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)cin&gt;&gt;x&gt;&gt;y,<span class="built_in">addE</span>(x,y),<span class="built_in">addE</span>(y,x);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;Red[i]&gt;&gt;Blue[i],el[i].red=Red[i],el[i].blue=Blue[i],el[i].o=i;</span><br><span class="line"><span class="built_in">sort</span>(Red+<span class="number">1</span>,Red+n+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">sort</span>(Blue+<span class="number">1</span>,Blue+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">el[i].red=<span class="built_in">lower_bound</span>(Red+<span class="number">1</span>,Red+n+<span class="number">1</span>,el[i].red)-Red;</span><br><span class="line">el[i].blue=<span class="built_in">lower_bound</span>(Blue+<span class="number">1</span>,Blue+n+<span class="number">1</span>,el[i].blue)-Blue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(el+<span class="number">1</span>,el+n+<span class="number">1</span>,cmp1);</span><br><span class="line"><span class="built_in">solve</span>(<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[i]==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">cout&lt;&lt;A[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="应用：优化-一维dp-P2487">应用：优化 一维dp P2487</h4><p>CDQ 分治优化 dp 时需要注意转移顺序必须有序，即中序遍历，这时就要考虑排序前后数组的还原。</p><p>这道题是求二维 $LDS$，考虑记录每个点为结尾或开头的 $LDS$ 长度与方案数。由于顺序关系，需要 CDQ 分治两次。</p><p>同样的，后缀和使用倒序树状数组。此处的树状数组就是统计 $\max$ 了，记得树状数组要记录最大值和在当前最大值的方案数。</p><p>方案数可能非常非常大，使用浮点数记录。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P2487 [SDOI2011] 拦截导弹</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P2487</span></span><br><span class="line"><span class="comment">// Memory Limit: 500 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1500 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">E</span>&#123;</span><br><span class="line"><span class="type">int</span> id,a,b;</span><br><span class="line">&#125;el[<span class="number">200001</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> t[<span class="number">200001</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> kt[<span class="number">200001</span>];</span><br><span class="line"><span class="type">int</span> A[<span class="number">200001</span>],B[<span class="number">200001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">t[x]=kt[x]=<span class="number">0</span>;</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v,<span class="type">long</span> <span class="type">double</span> C)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line"><span class="keyword">if</span>(t[x]&lt;v)t[x]=v,kt[x]=C;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t[x]==v)kt[x]+=C;</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>,<span class="type">long</span> <span class="type">double</span>&gt; <span class="title">qsum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> g=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(res&lt;t[x])res=t[x],g=kt[x];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(res==t[x])g+=kt[x];</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make_pair</span>(res,g);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp1</span><span class="params">(<span class="type">const</span> E &amp;a,<span class="type">const</span> E &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a.a==b.a?(a.b==b.b?a.id&lt;b.id:a.b&gt;b.b):a.a&gt;b.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">cmp2</span><span class="params">(<span class="type">const</span> E &amp;a,<span class="type">const</span> E &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.b==b.b?a.id&lt;b.id:a.b&gt;b.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> NL,NR;</span><br><span class="line"><span class="type">int</span> f1[<span class="number">200001</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> g1[<span class="number">200001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve1</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">solve1</span>(l,mid);<span class="comment">//Step 1: Left</span></span><br><span class="line"><span class="comment">//Step 2: Left---Right</span></span><br><span class="line"><span class="built_in">sort</span>(el+l,el+mid+<span class="number">1</span>,cmp2);</span><br><span class="line"><span class="built_in">sort</span>(el+mid+<span class="number">1</span>,el+r+<span class="number">1</span>,cmp2);</span><br><span class="line">NL=l,NR=mid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(NR&lt;=r)&#123;</span><br><span class="line"><span class="keyword">while</span>(NL&lt;=mid&amp;&amp;el[NL].b&gt;=el[NR].b)<span class="built_in">mdf</span>(el[NL].id,f1[el[NL].id],g1[el[NL].id]),NL++;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;NL&lt;&lt;&#x27; &#x27;&lt;&lt;NR&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">long</span> <span class="type">double</span>&gt; K=<span class="built_in">qsum</span>(el[NR].id);</span><br><span class="line"><span class="keyword">if</span>(!K.first)&#123;</span><br><span class="line">NR++;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f1[el[NR].id]&lt;K.first+<span class="number">1</span>)f1[el[NR].id]=K.first+<span class="number">1</span>,g1[el[NR].id]=K.second;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(f1[el[NR].id]==K.first+<span class="number">1</span>)g1[el[NR].id]+=K.second;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;el[NR].id&lt;&lt;&quot; &quot;&lt;&lt;f1[el[NR].id]&lt;&lt;&quot; &quot;&lt;&lt;g1[el[NR].id]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">NR++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;NL;i++)<span class="built_in">reset</span>(el[i].id);</span><br><span class="line"><span class="built_in">sort</span>(el+l,el+r+<span class="number">1</span>,cmp1);</span><br><span class="line"><span class="built_in">solve1</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> f2[<span class="number">200001</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> g2[<span class="number">200001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve2</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">solve2</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">sort</span>(el+l,el+mid+<span class="number">1</span>,cmp2);</span><br><span class="line"><span class="built_in">sort</span>(el+mid+<span class="number">1</span>,el+r+<span class="number">1</span>,cmp2);</span><br><span class="line">NL=mid,NR=r;</span><br><span class="line"><span class="keyword">while</span>(NL&gt;=l)&#123;</span><br><span class="line"><span class="keyword">while</span>(NR&gt;=mid+<span class="number">1</span>&amp;&amp;el[NL].b&gt;=el[NR].b)<span class="built_in">mdf</span>(n-el[NR].id+<span class="number">1</span>,f2[el[NR].id],g2[el[NR].id]),NR--;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">long</span> <span class="type">double</span>&gt; K=<span class="built_in">qsum</span>(n-el[NL].id+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(!K.first)&#123;</span><br><span class="line">NL--;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f2[el[NL].id]&lt;K.first+<span class="number">1</span>)f2[el[NL].id]=K.first+<span class="number">1</span>,g2[el[NL].id]=K.second;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(f2[el[NL].id]==K.first+<span class="number">1</span>)g2[el[NL].id]+=K.second;</span><br><span class="line">NL--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=r;i&gt;NR;i--)<span class="built_in">reset</span>(n-el[i].id+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">sort</span>(el+l,el+r+<span class="number">1</span>,cmp1);</span><br><span class="line"><span class="built_in">solve2</span>(l,mid);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;A[i]&gt;&gt;B[i],el[i].id=i,el[i].a=A[i],el[i].b=B[i];</span><br><span class="line"><span class="built_in">sort</span>(A+<span class="number">1</span>,A+n+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">sort</span>(B+<span class="number">1</span>,B+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">el[i].a=<span class="built_in">lower_bound</span>(A+<span class="number">1</span>,A+n+<span class="number">1</span>,el[i].a)-A;</span><br><span class="line">el[i].b=<span class="built_in">lower_bound</span>(B+<span class="number">1</span>,B+n+<span class="number">1</span>,el[i].b)-B;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(el+<span class="number">1</span>,el+n+<span class="number">1</span>,cmp1);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)f1[i]++,g1[i]++,f2[i]++,g2[i]++;</span><br><span class="line"><span class="built_in">solve1</span>(<span class="number">1</span>,n);</span><br><span class="line"><span class="built_in">solve2</span>(<span class="number">1</span>,n);</span><br><span class="line"><span class="comment">//for(int i=1;i&lt;=n;i++)cout&lt;&lt;f1[i]&lt;&lt;&quot; &quot;&lt;&lt;g1[i]&lt;&lt;&quot; &quot;&lt;&lt;f2[i]&lt;&lt;&quot; &quot;&lt;&lt;g2[i]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">double</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">len=<span class="built_in">max</span>(f1[i]+f2[i]<span class="number">-1</span>,len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(len==f1[i]+f2[i]<span class="number">-1</span>)sum+=g1[i]*g2[i];<span class="comment">//,cout&lt;&lt;&quot;test &quot;;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;g1[i]&lt;&lt;&quot; &quot;&lt;&lt;g2[i]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">sum/=len;</span><br><span class="line">cout&lt;&lt;len&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(len==f1[i]+f2[i]<span class="number">-1</span>)cout&lt;&lt;fixed&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">5</span>)&lt;&lt;<span class="number">1.0</span>*g1[i]*g2[i]/sum&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="string">&quot;0.00000 &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="整体二分">整体二分</h3><p>整体二分用于处理一些支持离线的区间查询问题，和莫队一样分为几种类型。</p><p>通常，整体二分就是把几个询问一起处理，然后把它们分到不同的子区间继续处理。</p><p>一种比较好实现的伪代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">solve</span>(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)&#123;</span><br><span class="line">    <span class="comment">//ans:in[l,r]||||asks:in[L,R]</span></span><br><span class="line">    <span class="keyword">if</span> l==r then <span class="keyword">for</span> [L,R] ans[id]=l;</span><br><span class="line">    Simulate mid/[l,mid];</span><br><span class="line">    Count those already satisfied asks -&gt; Q1[];</span><br><span class="line">    The other -&gt; Q2[];</span><br><span class="line">    Q1[] -&gt; Q[],Q2[] -&gt; Q[];</span><br><span class="line">    restore as when the function began except Q[];</span><br><span class="line">    <span class="built_in">solve</span>(l,mid,Q[l1,r1](Q1));</span><br><span class="line">    <span class="built_in">solve</span>(mid+<span class="number">1</span>,r,Q[l2,r2](Q2));</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要想整体二分，首先要保证数据有可二分性，然后再用数据结构优化模拟 $[l,mid]$ 的这个过程就能做到优化。</p><h4 id="普通整体二分">普通整体二分</h4><p>例题：P3527</p><p>断环为链，用树状数组区间修改，单点询问来维护陨石数量，然后统计的时候每次超了就减去当前贡献递归向右，否则递归向左。通俗来讲，整体二分就是把一个集合分成两个集合，每个集合都有固定的值域，二分值域划分集合，最后得出答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P3527 [POI2011] MET-Meteors</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P3527</span></span><br><span class="line"><span class="comment">// Memory Limit: 512 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2500 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int unsigned long long</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">qu</span>&#123;</span><br><span class="line"><span class="type">int</span> id,l,r,v;</span><br><span class="line">&#125;Q[<span class="number">300002</span>];</span><br><span class="line"><span class="type">int</span> n,m,q;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; C[<span class="number">300001</span>];</span><br><span class="line"><span class="type">int</span> ne[<span class="number">300001</span>];</span><br><span class="line"><span class="type">int</span> A[<span class="number">300001</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> t[<span class="number">600001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> x,<span class="type">long</span> <span class="type">long</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=m)&#123;</span><br><span class="line">t[x]+=v;</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qsum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">res+=t[x];</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> rec[<span class="number">300001</span>];</span><br><span class="line"><span class="type">int</span> s1[<span class="number">300001</span>],s2[<span class="number">300001</span>],TL,TR;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;L&lt;&lt;&quot; &quot;&lt;&lt;R&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L;i&lt;=R;i++)A[rec[i]]=l;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="comment">//Simulate [l,mid]</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=mid;i++)&#123;</span><br><span class="line"><span class="built_in">mdf</span>(Q[i].l,Q[i].v),<span class="built_in">mdf</span>(Q[i].r+<span class="number">1</span>,-Q[i].v);<span class="comment">//差分</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> c1=<span class="number">0</span>,c2=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//Counting the satisfied ones and dissatisfied ones</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L;i&lt;=R;i++)&#123;</span><br><span class="line"><span class="type">int</span> now=<span class="number">0</span>,siz=C[rec[i]].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;siz;j++)now+=<span class="built_in">qsum</span>(C[rec[i]][j]);</span><br><span class="line"><span class="keyword">if</span>(now&gt;=ne[rec[i]])s1[++c1]=rec[i];</span><br><span class="line"><span class="keyword">else</span> ne[rec[i]]-=now,s2[++c2]=rec[i];</span><br><span class="line"><span class="comment">//cout&lt;&lt;rec[i]&lt;&lt;&quot; &quot;&lt;&lt;ne[rec[i]]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=c1;i++)rec[i+L<span class="number">-1</span>]=s1[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=c2;i++)rec[i+c1+L<span class="number">-1</span>]=s2[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=mid;i++)&#123;</span><br><span class="line"><span class="built_in">mdf</span>(Q[i].l,-Q[i].v),<span class="built_in">mdf</span>(Q[i].r+<span class="number">1</span>,Q[i].v);<span class="comment">//Restore</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">solve</span>(l,mid,L,L+c1<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">solve</span>(mid+<span class="number">1</span>,r,L+c1,L+c1+c2<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> te;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;te;</span><br><span class="line">C[te].<span class="built_in">push_back</span>(i);</span><br><span class="line">C[te].<span class="built_in">push_back</span>(i+m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;ne[i];</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;q;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">cin&gt;&gt;Q[i].l&gt;&gt;Q[i].r&gt;&gt;Q[i].v;</span><br><span class="line"><span class="keyword">if</span>(Q[i].r&lt;Q[i].l)Q[i].r+=m;</span><br><span class="line">Q[i].id=i;</span><br><span class="line">&#125;</span><br><span class="line">q++;</span><br><span class="line">Q[q].l=<span class="number">1</span>,Q[q].r=m,Q[q].v=<span class="number">1e9</span>,Q[q].id=q;</span><br><span class="line">m*=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)rec[i]=i;</span><br><span class="line"><span class="built_in">solve</span>(<span class="number">1</span>,q,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[i]==q)cout&lt;&lt;<span class="string">&quot;NIE\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;A[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意要用 $rec$ 数组记录当前位置处理的询问是哪个，因为为了二分答案询问是打乱了顺序的，直接用 $i$ 是不行的。</p><p>例题：P4602</p><p>鉴定为：勾矢。调了一个下午。</p><p>使用权值线段树，以单价为下标，在权值线段树上二分来找当前满足有 $L$ 升果汁时的最小花费来进行 <code>check</code>。</p><p>然后用类似于莫队的方式维护线段树的插入和删除，这一步非常重要，保证了时间复杂度。</p><p>中间有一些东西作者写的非常抽象，我也不想改了，调了一个下午…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P4602 [CTSC2018] 混合果汁</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P4602</span></span><br><span class="line"><span class="comment">// Memory Limit: 500 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">io</span>&#123;</span><br><span class="line"><span class="type">int</span> d,p,l;</span><br><span class="line">&#125;J[<span class="number">100002</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">qu</span>&#123;</span><br><span class="line"><span class="type">int</span> g,l;</span><br><span class="line">&#125;Q[<span class="number">100002</span>];</span><br><span class="line"><span class="type">int</span> rec[<span class="number">100002</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> g[<span class="number">600002</span>],ll[<span class="number">600002</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">ll[now]=ll[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+ll[now&lt;&lt;<span class="number">1</span>];</span><br><span class="line">g[now]=g[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+g[now&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> q,<span class="type">int</span> C)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">g[now]+=C*q;</span><br><span class="line">ll[now]+=C;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(q&lt;=mid)<span class="built_in">insert</span>(now&lt;&lt;<span class="number">1</span>,l,mid,q,C);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">insert</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,q,C);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> G)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">G-=L*l;</span><br><span class="line"><span class="keyword">return</span> G&gt;=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;ll[now];</span></span><br><span class="line"><span class="keyword">if</span>(L==<span class="number">0</span>)<span class="keyword">return</span> G&gt;=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ll[now]&lt;L)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(G&lt;<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="type">bool</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(ll[now&lt;&lt;<span class="number">1</span>]&gt;=L)res|=<span class="built_in">check</span>(now&lt;&lt;<span class="number">1</span>,l,mid,L,G);</span><br><span class="line"><span class="keyword">else</span> res|=<span class="built_in">check</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,L-ll[now&lt;&lt;<span class="number">1</span>],G-g[now&lt;&lt;<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">reset</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> ll[now]=g[now]=<span class="number">0</span>,<span class="built_in">void</span>();</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">reset</span>(now&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">reset</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">const</span> io &amp;a,<span class="type">const</span> io &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.d&gt;b.d;y</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> s1[<span class="number">100002</span>],s2[<span class="number">100002</span>],T[<span class="number">100002</span>];</span><br><span class="line"><span class="type">int</span> A[<span class="number">100002</span>];</span><br><span class="line"><span class="type">int</span> MAX=<span class="number">100002</span>;</span><br><span class="line"><span class="type">int</span> cur=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span>&#123;</span><br><span class="line"> <span class="comment">// cerr&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;L&lt;&lt;&quot; &quot;&lt;&lt;R&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// if(l==r)&#123;</span></span><br><span class="line"><span class="comment">// for(int i=L;i&lt;=R;i++)A[rec[i]]=l;</span></span><br><span class="line"><span class="comment">// return;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">if</span>(l&gt;r||L&gt;R)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="comment">// int st=upper_bound(T+1,T+n+1,r)-T-1;</span></span><br><span class="line"><span class="keyword">while</span>(J[cur+<span class="number">1</span>].d&gt;=mid&amp;&amp;cur&lt;=n)cur++,<span class="built_in">insert</span>(<span class="number">1</span>,<span class="number">1</span>,MAX,J[cur].p,J[cur].l);<span class="comment">//cerr&lt;&lt;cur&lt;&lt;&quot; &quot;&lt;&lt;J[cur].d&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">while</span>(J[cur].d&lt;mid&amp;&amp;cur&gt;<span class="number">0</span>)<span class="built_in">insert</span>(<span class="number">1</span>,<span class="number">1</span>,MAX,J[cur].p,-J[cur].l),cur--;</span><br><span class="line"><span class="type">int</span> c1=<span class="number">0</span>,c2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L;i&lt;=R;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>(<span class="number">1</span>,<span class="number">1</span>,MAX,Q[rec[i]].l,Q[rec[i]].g))s2[++c2]=rec[i],A[rec[i]]=mid;</span><br><span class="line"><span class="keyword">else</span> s1[++c1]=rec[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=c1;i++)rec[i+L<span class="number">-1</span>]=s1[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=c2;i++)rec[i+L+c1<span class="number">-1</span>]=s2[i];</span><br><span class="line"><span class="comment">// for(int i=n;i&gt;=1&amp;&amp;J[i].d&gt;=mid;i--)insert(1,1,MAX,J[i].p,-J[i].l);</span></span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">solve</span>(l,mid<span class="number">-1</span>,L,L+c1<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">solve</span>(mid+<span class="number">1</span>,r,L+c1,L+c1+c2<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;J[i].d&gt;&gt;J[i].p&gt;&gt;J[i].l;</span><br><span class="line"><span class="comment">// n++;</span></span><br><span class="line"><span class="comment">// J[n].d=0,J[n].p=0,J[n].l=1e9;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)cin&gt;&gt;Q[i].g&gt;&gt;Q[i].l;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)rec[i]=i;</span><br><span class="line"><span class="built_in">sort</span>(J+<span class="number">1</span>,J+n+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)T[i]=J[i].d;</span><br><span class="line"><span class="built_in">solve</span>(<span class="number">1</span>,MAX,<span class="number">1</span>,m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[i]==<span class="number">0</span>)A[i]=<span class="number">-1</span>;</span><br><span class="line">cout&lt;&lt;A[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="回滚整体二分">回滚整体二分</h4><p>例题：P8955</p><p>整体二分的搜索树就是一颗线段树，考虑将这颗线段树分层，每次对询问排序，然后进行从左向右依次处理询问，直到到达最后一层，即 $\left\lceil\log n\right\rceil$ 层。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P8955 「VUSC」Card Tricks</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P8955</span></span><br><span class="line"><span class="comment">// Memory Limit: 100 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 3000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">namespace</span> Fastio &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> IN_LEN 250000</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> OUT_LEN 250000</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="comment">//  #define Putchar putchar</span></span><br><span class="line"><span class="comment">//  #define Getchar getchar</span></span><br><span class="line">    <span class="type">char</span> ch; <span class="type">int</span> len;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">Getchar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">static</span> <span class="type">char</span> buf[IN_LEN], *l = buf, *r = buf;</span><br><span class="line">        <span class="keyword">if</span> (l == r) r = (l = buf) + <span class="built_in">fread</span>(buf, <span class="number">1</span>, IN_LEN, stdin);</span><br><span class="line">        <span class="keyword">return</span> (l == r) ? EOF : *l++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> obuf[OUT_LEN], *ooh = obuf;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Putchar</span><span class="params">(<span class="type">char</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ooh == obuf + OUT_LEN) <span class="built_in">fwrite</span>(obuf, <span class="number">1</span>, OUT_LEN, stdout), ooh = obuf;</span><br><span class="line">        *ooh++ = c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">flush</span><span class="params">()</span> </span>&#123; <span class="built_in">fwrite</span>(obuf, <span class="number">1</span>, ooh - obuf, stdout); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">undef</span> IN_LEN</span></span><br><span class="line">    <span class="meta">#<span class="keyword">undef</span> OUT_LEN</span></span><br><span class="line">    <span class="meta">#<span class="keyword">undef</span> ll</span></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Reader</span> &#123;</span><br><span class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Reader&amp; <span class="keyword">operator</span> &gt;&gt; (T &amp;x) &#123;</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">            <span class="type">short</span> f = <span class="number">1</span>;</span><br><span class="line">            <span class="type">char</span> c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">while</span> (c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &#123; <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f *= <span class="number">-1</span>; c = <span class="built_in">Getchar</span>(); &#125;</span><br><span class="line">            <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) x = (x &lt;&lt; <span class="number">3</span>) + (x &lt;&lt; <span class="number">1</span>) + (c ^ <span class="number">48</span>), c = <span class="built_in">Getchar</span>();</span><br><span class="line">            x *= f;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Reader&amp; <span class="keyword">operator</span> &gt;&gt; (<span class="type">double</span> &amp;x) &#123;</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">            <span class="type">double</span> t = <span class="number">0</span>;</span><br><span class="line">            <span class="type">short</span> f = <span class="number">1</span>, s = <span class="number">0</span>;</span><br><span class="line">            <span class="type">char</span> c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">while</span> ((c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;.&#x27;</span>) &#123; <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f *= <span class="number">-1</span>; c = <span class="built_in">Getchar</span>(); &#125;</span><br><span class="line">            <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; c != <span class="string">&#x27;.&#x27;</span>) x = x * <span class="number">10</span> + (c ^ <span class="number">48</span>), c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;.&#x27;</span>) c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">else</span> &#123; x *= f; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">            <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) t = t * <span class="number">10</span> + (c ^ <span class="number">48</span>), s++, c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">while</span> (s--) t /= <span class="number">10.0</span>;</span><br><span class="line">            x = (x + t) * f;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Reader&amp; <span class="keyword">operator</span> &gt;&gt; (<span class="type">long</span> <span class="type">double</span> &amp;x) &#123;</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">            <span class="type">long</span> <span class="type">double</span> t = <span class="number">0</span>;</span><br><span class="line">            <span class="type">short</span> f = <span class="number">1</span>, s = <span class="number">0</span>;</span><br><span class="line">            <span class="type">char</span> c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">while</span> ((c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;.&#x27;</span>) &#123; <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f *= <span class="number">-1</span>; c = <span class="built_in">Getchar</span>(); &#125;</span><br><span class="line">            <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; c != <span class="string">&#x27;.&#x27;</span>) x = x * <span class="number">10</span> + (c ^ <span class="number">48</span>), c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;.&#x27;</span>) c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">else</span> &#123; x *= f; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">            <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) t = t * <span class="number">10</span> + (c ^ <span class="number">48</span>), s++, c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">while</span> (s--) t /= <span class="number">10.0</span>;</span><br><span class="line">            x = (x + t) * f;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Reader&amp; <span class="keyword">operator</span> &gt;&gt; (__float128 &amp;x) &#123;</span><br><span class="line">            x = <span class="number">0</span>;</span><br><span class="line">            __float128 t = <span class="number">0</span>;</span><br><span class="line">            <span class="type">short</span> f = <span class="number">1</span>, s = <span class="number">0</span>;</span><br><span class="line">            <span class="type">char</span> c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">while</span> ((c &lt; <span class="string">&#x27;0&#x27;</span> || c &gt; <span class="string">&#x27;9&#x27;</span>) &amp;&amp; c != <span class="string">&#x27;.&#x27;</span>) &#123; <span class="keyword">if</span> (c == <span class="string">&#x27;-&#x27;</span>) f *= <span class="number">-1</span>; c = <span class="built_in">Getchar</span>(); &#125;</span><br><span class="line">            <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; c != <span class="string">&#x27;.&#x27;</span>) x = x * <span class="number">10</span> + (c ^ <span class="number">48</span>), c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;.&#x27;</span>) c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">else</span> &#123; x *= f; <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">            <span class="keyword">while</span> (c &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; c &lt;= <span class="string">&#x27;9&#x27;</span>) t = t * <span class="number">10</span> + (c ^ <span class="number">48</span>), s++, c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">while</span> (s--) t /= <span class="number">10.0</span>;</span><br><span class="line">            x = (x + t) * f;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Reader&amp; <span class="keyword">operator</span> &gt;&gt; (<span class="type">char</span> &amp;c) &#123;</span><br><span class="line">            c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">while</span> (c == <span class="string">&#x27; &#x27;</span> || c == <span class="string">&#x27;\n&#x27;</span> || c == <span class="string">&#x27;\r&#x27;</span>) c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Reader&amp; <span class="keyword">operator</span> &gt;&gt; (<span class="type">char</span> *str) &#123;</span><br><span class="line">            <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">            <span class="type">char</span> c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">while</span> (c == <span class="string">&#x27; &#x27;</span> || c == <span class="string">&#x27;\n&#x27;</span> || c == <span class="string">&#x27;\r&#x27;</span>) c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">while</span> (c != <span class="string">&#x27; &#x27;</span> &amp;&amp; c != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; c != <span class="string">&#x27;\r&#x27;</span>) str[len++] = c, c = <span class="built_in">Getchar</span>();</span><br><span class="line">            str[len] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Reader&amp; <span class="keyword">operator</span> &gt;&gt; (string &amp;str) &#123;</span><br><span class="line">            str.<span class="built_in">clear</span>();</span><br><span class="line">            <span class="type">char</span> c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">while</span> (c == <span class="string">&#x27; &#x27;</span> || c == <span class="string">&#x27;\n&#x27;</span> || c == <span class="string">&#x27;\r&#x27;</span>) c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">while</span> (c != <span class="string">&#x27; &#x27;</span> &amp;&amp; c != <span class="string">&#x27;\n&#x27;</span> &amp;&amp; c != <span class="string">&#x27;\r&#x27;</span>) str.<span class="built_in">push_back</span>(c), c = <span class="built_in">Getchar</span>();</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Reader</span>() &#123;&#125;</span><br><span class="line">    &#125; cin;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> endl = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">Writer</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> Setprecision = <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">typedef</span> __int128 mxdouble;</span><br><span class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; Writer&amp; <span class="keyword">operator</span> &lt;&lt; (T x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == <span class="number">0</span>) &#123; <span class="built_in">Putchar</span>(<span class="string">&#x27;0&#x27;</span>); <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">Putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">            <span class="type">static</span> <span class="type">short</span> sta[<span class="number">40</span>];</span><br><span class="line">            <span class="type">short</span> top = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (x &gt; <span class="number">0</span>) sta[++top] = x % <span class="number">10</span>, x /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">while</span> (top &gt; <span class="number">0</span>) <span class="built_in">Putchar</span>(sta[top] + <span class="string">&#x27;0&#x27;</span>), top--;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Writer&amp; <span class="keyword">operator</span> &lt;&lt; (<span class="type">double</span> x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">Putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">            <span class="type">double</span> _up=<span class="number">5</span>;</span><br><span class="line">                 <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= Setprecision; i++) _up /= <span class="number">10.0</span>;</span><br><span class="line">                 x+=_up;</span><br><span class="line">            mxdouble _ = x;</span><br><span class="line">            x -= (<span class="type">double</span>)_;</span><br><span class="line">            <span class="type">static</span> <span class="type">short</span> sta[<span class="number">40</span>];</span><br><span class="line">            <span class="type">short</span> top = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (_ &gt; <span class="number">0</span>) sta[++top] = _ % <span class="number">10</span>, _ /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (top == <span class="number">0</span>) <span class="built_in">Putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">while</span> (top &gt; <span class="number">0</span>) <span class="built_in">Putchar</span>(sta[top] + <span class="string">&#x27;0&#x27;</span>), top--;</span><br><span class="line">            <span class="built_in">Putchar</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Setprecision; i++) x *= <span class="number">10</span>;</span><br><span class="line">            _ = x;</span><br><span class="line">            <span class="keyword">while</span> (_ &gt; <span class="number">0</span>) sta[++top] = _ % <span class="number">10</span>, _ /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Setprecision - top; i++) <span class="built_in">Putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">while</span> (top &gt; <span class="number">0</span>) <span class="built_in">Putchar</span>(sta[top] + <span class="string">&#x27;0&#x27;</span>), top--;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Writer&amp; <span class="keyword">operator</span> &lt;&lt; (<span class="type">long</span> <span class="type">double</span> x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">Putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">            <span class="type">long</span> <span class="type">double</span> _up=<span class="number">5</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= Setprecision; i++) _up /= <span class="number">10.0</span>;</span><br><span class="line">                 x+=_up;</span><br><span class="line">            mxdouble _ = x;</span><br><span class="line">            x -= (<span class="type">long</span> <span class="type">double</span>)_;</span><br><span class="line">            <span class="type">static</span> <span class="type">short</span> sta[<span class="number">40</span>];</span><br><span class="line">            <span class="type">short</span> top = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (_ &gt; <span class="number">0</span>) sta[++top] = _ % <span class="number">10</span>, _ /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (top == <span class="number">0</span>) <span class="built_in">Putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">while</span> (top &gt; <span class="number">0</span>) <span class="built_in">Putchar</span>(sta[top] + <span class="string">&#x27;0&#x27;</span>), top--;</span><br><span class="line">            <span class="built_in">Putchar</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Setprecision; i++) x *= <span class="number">10</span>;</span><br><span class="line">            _ = x;</span><br><span class="line">            <span class="keyword">while</span> (_ &gt; <span class="number">0</span>) sta[++top] = _ % <span class="number">10</span>, _ /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Setprecision - top; i++) <span class="built_in">Putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">while</span> (top &gt; <span class="number">0</span>) <span class="built_in">Putchar</span>(sta[top] + <span class="string">&#x27;0&#x27;</span>), top--;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Writer&amp; <span class="keyword">operator</span> &lt;&lt; (__float128 x) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &lt; <span class="number">0</span>) <span class="built_in">Putchar</span>(<span class="string">&#x27;-&#x27;</span>), x = -x;</span><br><span class="line">            __float128 _up=<span class="number">5</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= Setprecision; i++) _up /= <span class="number">10.0</span>;</span><br><span class="line">            x+=_up;</span><br><span class="line">            mxdouble _ = x;</span><br><span class="line">            x -= (__float128)_;</span><br><span class="line">            <span class="type">static</span> <span class="type">short</span> sta[<span class="number">40</span>];</span><br><span class="line">            <span class="type">short</span> top = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (_ &gt; <span class="number">0</span>) sta[++top] = _ % <span class="number">10</span>, _ /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span> (top == <span class="number">0</span>) <span class="built_in">Putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">while</span> (top &gt; <span class="number">0</span>) <span class="built_in">Putchar</span>(sta[top] + <span class="string">&#x27;0&#x27;</span>), top--;</span><br><span class="line">            <span class="built_in">Putchar</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Setprecision; i++) x *= <span class="number">10</span>;</span><br><span class="line">            _ = x;</span><br><span class="line">            <span class="keyword">while</span> (_ &gt; <span class="number">0</span>) sta[++top] = _ % <span class="number">10</span>, _ /= <span class="number">10</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; Setprecision - top; i++) <span class="built_in">Putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">while</span> (top &gt; <span class="number">0</span>) <span class="built_in">Putchar</span>(sta[top] + <span class="string">&#x27;0&#x27;</span>), top--;</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Writer&amp; <span class="keyword">operator</span> &lt;&lt; (<span class="type">char</span> c) &#123; <span class="built_in">Putchar</span>(c); <span class="keyword">return</span> *<span class="keyword">this</span>; &#125;</span><br><span class="line">        Writer&amp; <span class="keyword">operator</span> &lt;&lt; (<span class="type">char</span> *str) &#123;</span><br><span class="line">            <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (str[cur]) <span class="built_in">Putchar</span>(str[cur++]);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Writer&amp; <span class="keyword">operator</span> &lt;&lt; (<span class="type">const</span> <span class="type">char</span> *str) &#123;</span><br><span class="line">            <span class="type">int</span> cur = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (str[cur]) <span class="built_in">Putchar</span>(str[cur++]);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Writer&amp; <span class="keyword">operator</span> &lt;&lt; (string str) &#123;</span><br><span class="line">            <span class="type">int</span> st = <span class="number">0</span>, ed = str.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">while</span> (st &lt; ed) <span class="built_in">Putchar</span>(str[st++]);</span><br><span class="line">            <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Writer</span>() &#123;&#125;</span><br><span class="line">    &#125; cout;</span><br><span class="line"><span class="comment">//    #undef Putchar</span></span><br><span class="line"><span class="comment">//    #undef Getchar </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> Fastio;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cin Fastio::cin</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cout Fastio::cout</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> endl Fastio::endl</span></span><br><span class="line"><span class="type">int</span> n,m,p;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Q</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,id;</span><br><span class="line"><span class="keyword">inline</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> Q &amp;a) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (r&lt;a.r);</span><br><span class="line">&#125;</span><br><span class="line">&#125;ans[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> A[<span class="number">1000001</span>],a[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> xds[<span class="number">4000001</span>],lazy[<span class="number">4000001</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">const</span> <span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">lazy[now&lt;&lt;<span class="number">1</span>]|=lazy[now],lazy[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]|=lazy[now];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bulid</span><span class="params">(<span class="type">const</span> <span class="type">int</span> now,<span class="type">const</span> <span class="type">int</span> l,<span class="type">const</span> <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">lazy[now]=xds[now]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line"><span class="keyword">return</span> xds[now]=a[l],<span class="built_in">void</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">const</span> <span class="type">int</span> now,<span class="type">const</span> <span class="type">int</span> l,<span class="type">const</span> <span class="type">int</span> r,<span class="type">const</span> <span class="type">int</span> sl,<span class="type">const</span> <span class="type">int</span> sr,<span class="type">const</span> <span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>((v|lazy[now])==lazy[now])<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)&#123;</span><br><span class="line">lazy[now]|=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">pushdown</span>(now);</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)<span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid),v);</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)<span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr,v);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpo</span><span class="params">(<span class="type">const</span> <span class="type">int</span> now,<span class="type">const</span> <span class="type">int</span> l,<span class="type">const</span> <span class="type">int</span> r,<span class="type">const</span> <span class="type">int</span> q)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> xds[now]|lazy[now];</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">pushdown</span>(now);</span><br><span class="line"><span class="keyword">if</span>(q&lt;=mid)<span class="keyword">return</span> <span class="built_in">qpo</span>(now&lt;&lt;<span class="number">1</span>,l,mid,q);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">qpo</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,q);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ll[<span class="number">1000001</span>],rr[<span class="number">1000001</span>],vv[<span class="number">1000001</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;p;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i],ans[i].l=<span class="number">1</span>,ans[i].r=m+<span class="number">1</span>,ans[i].id=i;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;ll[i]&gt;&gt;rr[i]&gt;&gt;vv[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ed=<span class="built_in">log2</span>(m)+<span class="number">1</span>,cur;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ed;i++)&#123;</span><br><span class="line"><span class="built_in">sort</span>(ans+<span class="number">1</span>,ans+n+<span class="number">1</span>);</span><br><span class="line">cur=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">bulid</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;ans[j].l&lt;&lt;&quot; &quot;&lt;&lt;ans[j].r&lt;&lt;&quot; &quot;&lt;&lt;ans[j].id&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(ans[j].l==ans[j].r)<span class="keyword">continue</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M ((ans[j].l+ans[j].r)&gt;&gt;1)</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;cur&lt;&lt;&quot; &quot;&lt;&lt;M&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">while</span>(cur&lt;M)cur++,<span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,ll[cur],rr[cur],vv[cur]);<span class="comment">//,cout&lt;&lt;cur&lt;&lt;&quot; &quot;&lt;&lt;vv[cur]&lt;&lt;&quot; &quot;&lt;&lt;qpo(1,1,n,ans[j].id)&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;qpo(1,1,n,ans[j].id)&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">qpo</span>(<span class="number">1</span>,<span class="number">1</span>,n,ans[j].id)&gt;p)ans[j].r=M;</span><br><span class="line"><span class="keyword">else</span> ans[j].l=M+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)A[ans[i].id]=ans[i].l;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(A[i]==m+<span class="number">1</span>)A[i]=<span class="number">-1</span>;</span><br><span class="line">cout&lt;&lt;A[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">flush</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="带修整体二分">带修整体二分</h4><p>由于这种整体二分的例题比较深，我们由浅入深来做这道题。</p><h5 id="单次查询全局第-k-小">单次查询全局第 k 小</h5><p>使用权值线段树上二分，时间复杂度 $O(V)$。</p><h5 id="多次查询全局第-k-小">多次查询全局第 k 小</h5><p>建出权值线段树，对所有目前询问区间正常整体二分，用权值线段树 $O(1)$ 检验。</p><p>时间复杂度 $O(q\log V+V)$。</p><h5 id="查询区间第-k-小">查询区间第 k 小</h5><p>模板题：P3834</p><p>不难发现由于区间不同，不可持久化权值线段树类做法不可行。考虑设计一个快速的 <code>check</code> 函数。</p><p>使用以数组下标为下标权值树状数组统计小于 $mid$ 的数的个数即能把 <code>check</code> 的总复杂度降到 $O(n\log n+q\log n)$，如果 $q$ 与 $n$ 同阶，那么总时间复杂度为 $O(n\log^2 n)$。</p><p>通过这个例子，我们可以发现其实整体二分的本质就是把所有区间的值先预处理出来（通常使用前缀和），然后猜测时把每个区间的答案猜测的一样，这样能做到该值适用于所有区间，而对值域二分分块（保证复杂度的全局优化）又将询问次数降到了 $O(n\log n)$ 次，从而降低复杂度。</p><p>AC 代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P3834 【模板】可持久化线段树 2</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P3834</span></span><br><span class="line"><span class="comment">// Memory Limit: 1 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">num</span>&#123;</span><br><span class="line"><span class="type">int</span> id,v;</span><br><span class="line">&#125;N[<span class="number">200001</span>],N1[<span class="number">200001</span>],N2[<span class="number">200001</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">qu</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,k,id;</span><br><span class="line">&#125;Q[<span class="number">200001</span>],Q1[<span class="number">200001</span>],Q2[<span class="number">200001</span>];</span><br><span class="line"><span class="type">int</span> t[<span class="number">200001</span>],ov[<span class="number">200001</span>],a[<span class="number">200001</span>],A[<span class="number">200001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">t[x]+=v;</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qsum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">res+=t[x];</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> ll,<span class="type">int</span> rr,<span class="type">int</span> L,<span class="type">int</span> R)</span></span>&#123;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;ll&lt;&lt;&quot; &quot;&lt;&lt;rr&lt;&lt;&quot; &quot;&lt;&lt;L&lt;&lt;&quot; &quot;&lt;&lt;R&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L;i&lt;=R;i++)A[Q[i].id]=ov[N[ll].id];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(L&gt;R||l&gt;r||ll&gt;rr)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> M=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> CN1=<span class="number">0</span>,CN2=<span class="number">0</span>,CQ1=<span class="number">0</span>,CQ2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=ll;i&lt;=rr;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(N[i].v&lt;=M)N1[++CN1]=N[i],<span class="built_in">mdf</span>(N[i].id,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">else</span> N2[++CN2]=N[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;M&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L;i&lt;=R;i++)&#123;</span><br><span class="line"><span class="type">int</span> K=<span class="built_in">qsum</span>(Q[i].r)-<span class="built_in">qsum</span>(Q[i].l<span class="number">-1</span>);</span><br><span class="line"><span class="comment">//cerr&lt;&lt;Q[i].l&lt;&lt;&quot; &quot;&lt;&lt;Q[i].r&lt;&lt;&quot; &quot;&lt;&lt;K&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(K&gt;=Q[i].k)Q1[++CQ1]=Q[i];</span><br><span class="line"><span class="keyword">else</span> Q2[++CQ2]=Q[i],Q2[CQ2].k-=K;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;CN1&lt;&lt;&quot; &quot;&lt;&lt;CN2&lt;&lt;&quot; &quot;&lt;&lt;CQ1&lt;&lt;&quot; &quot;&lt;&lt;CQ2&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=ll;i&lt;=rr;i++)<span class="keyword">if</span>(N[i].v&lt;=M)<span class="built_in">mdf</span>(N[i].id,<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=CN1;i++)N[ll+i<span class="number">-1</span>]=N1[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=CN2;i++)N[ll+CN1+i<span class="number">-1</span>]=N2[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=CQ1;i++)Q[L+i<span class="number">-1</span>]=Q1[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=CQ2;i++)Q[L+CQ1+i<span class="number">-1</span>]=Q2[i];</span><br><span class="line"><span class="built_in">solve</span>(l,M,ll,ll+CN1<span class="number">-1</span>,L,L+CQ1<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">solve</span>(M+<span class="number">1</span>,r,ll+CN1,ll+CN1+CN2<span class="number">-1</span>,L+CQ1,L+CQ1+CQ2<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">N[i].v=a[i];</span><br><span class="line">N[i].id=i;</span><br><span class="line">ov[i]=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">N[i].v=<span class="built_in">lower_bound</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,N[i].v)-a;</span><br><span class="line"><span class="comment">//cout&lt;&lt;N[i].v&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)cin&gt;&gt;Q[i].l&gt;&gt;Q[i].r&gt;&gt;Q[i].k,Q[i].id=i;</span><br><span class="line"><span class="built_in">solve</span>(<span class="number">1</span>,n,<span class="number">1</span>,n,<span class="number">1</span>,m);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cout&lt;&lt;A[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个例子中，用可持久化权值线段树能做到更优的复杂度，考虑如何优化整体二分的过程。</p><p>发现每次加入树状数组然后删掉这个步骤非常耗时，考虑将原序列排序，然后追踪分治中心，即 <code>M</code>，具体实现可以参照上面混合果汁的写法。</p><p>在其他题中会有较强的常数优化，在区间第 $k$ 小问题中可以将复杂度优化到类 $O(n\log n)$。</p><h5 id="带修区间第-k-小">带修区间第 k 小</h5><p>进入正题。</p><p>考虑进行整体二分的时候加入时间维，按顺序存储修改操作和查询操作。将修改操作分为 <code>删除</code> 和 <code>加入</code> 两种操作，这两种操作可以用树状数组维护：二分时，当删除的数在区间内，减去贡献，加入时，加入贡献，其中树状数组以原数组下标为下标即可。</p><p>总的来说非常巧妙，画一个整体二分搜索树应该就可以理解了。</p><p>例题：P2617</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P2617 Dynamic Rankings</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P2617</span></span><br><span class="line"><span class="comment">// Memory Limit: 512 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 3000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">o</span>&#123;</span><br><span class="line"><span class="type">int</span> x,y,k,id;</span><br><span class="line"><span class="type">bool</span> ty;</span><br><span class="line"><span class="comment">//ty==1:Query [x,y] kth</span></span><br><span class="line"><span class="comment">//ty==0:Change t[x]&lt;-add-&gt;y or t[x]-del-y k-in-&#123;-1,1&#125;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> _x,<span class="type">int</span> _y,<span class="type">int</span> _k,<span class="type">bool</span> _ty,<span class="type">int</span> _id=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line">x=_x,y=_y,k=_k,ty=_ty,id=_id;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;O[<span class="number">500005</span>];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> a[<span class="number">200001</span>],A[<span class="number">200001</span>];</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line"><span class="type">int</span> t;</span><br><span class="line"><span class="type">int</span> tr[<span class="number">500005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=n)&#123;</span><br><span class="line">tr[x]+=v;</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qsum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">res+=tr[x];</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">o O1[<span class="number">500005</span>],O2[<span class="number">500005</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span>&#123;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;L&lt;&lt;&quot; &quot;&lt;&lt;R&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="type">int</span> M=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r||L&gt;R)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L;i&lt;=R;i++)<span class="keyword">if</span>(O[i].ty)A[O[i].id]=l;<span class="comment">//cout&lt;&lt;l&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ocnt1=<span class="number">0</span>,ocnt2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L;i&lt;=R;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(O[i].ty==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> K=<span class="built_in">qsum</span>(O[i].y)-<span class="built_in">qsum</span>(O[i].x<span class="number">-1</span>);</span><br><span class="line"><span class="comment">//cerr&lt;&lt;O[i].x&lt;&lt;&quot; &quot;&lt;&lt;O[i].y&lt;&lt;&quot; &quot;&lt;&lt;O[i].k&lt;&lt;&quot; &quot;&lt;&lt;O[i].id&lt;&lt;&quot; &quot;&lt;&lt;K&lt;&lt;&quot; test\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(K&gt;=O[i].k)O1[++ocnt1]=O[i];</span><br><span class="line"><span class="keyword">else</span> O[i].k-=K,O2[++ocnt2]=O[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(O[i].y&lt;=M)<span class="built_in">mdf</span>(O[i].x,O[i].k),O1[++ocnt1]=O[i];</span><br><span class="line"><span class="keyword">else</span> O2[++ocnt2]=O[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ocnt1;i++)<span class="keyword">if</span>(O1[i].ty==<span class="number">0</span>)<span class="built_in">mdf</span>(O1[i].x,-O1[i].k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ocnt1;i++)O[i+L<span class="number">-1</span>]=O1[i];<span class="comment">//,cerr&lt;&lt;O1[i].id&lt;&lt;&quot; 1\n&quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ocnt2;i++)O[i+L+ocnt1<span class="number">-1</span>]=O2[i];<span class="comment">//,cerr&lt;&lt;O2[i].id&lt;&lt;&quot; 2\n&quot;;</span></span><br><span class="line"><span class="built_in">solve</span>(l,M,L,L+ocnt1<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">solve</span>(M+<span class="number">1</span>,r,L+ocnt1,L+ocnt1+ocnt2<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line">a[i]=t;</span><br><span class="line">O[++cnt].<span class="built_in">init</span>(i,t,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> X=<span class="number">0</span>,Y=<span class="number">0</span>,Z=<span class="number">0</span>,Qid=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;c;</span><br><span class="line">cin&gt;&gt;X&gt;&gt;Y;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">cin&gt;&gt;Z;</span><br><span class="line">O[++cnt].<span class="built_in">init</span>(X,Y,Z,<span class="number">1</span>,++Qid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">O[++cnt].<span class="built_in">init</span>(X,a[X],<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">a[X]=Y;</span><br><span class="line">O[++cnt].<span class="built_in">init</span>(X,a[X],<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">solve</span>(<span class="number">0</span>,<span class="number">1e9</span>,<span class="number">1</span>,cnt);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=Qid;i++)cout&lt;&lt;A[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一些题">一些题</h3><h4 id="P4849">P4849</h4><p>不难发现是一个四维偏序的 dp。</p><p>2023/11/14 小声 bb：考虑 NOIP 应该不会考这种东西，于是先鸽，去做倍增和图论了。</p><p>2023/11/21：回来了。</p><p>前置知识是嵌套式 CDQ 分治，即 CDQ 套 CDQ 这种。</p><p>考虑树状数组的方法的本质：使用分割的方式把区间信息分为两半，此时保证有序，可以直接进行第二维的排序。</p><p>以三维偏序为例，在进行 CDQ 嵌套的过程中，我们将第一维标记下来，左区间为 $0$，右区间为 $1$。不难发现，能贡献的点对只可能是 $((0,b_1,c_1),(1,b_2,c_2))$。那么直接对第二维进行排序（类似于树状数组做法的排序），将第二维的左右区间分开，使得能贡献的点对变为 $((0,L,c_1),(1,R,c_2))$。那么只需要对左右区间的第三维排序即可。这个时候只需要保证左区间标记为 $0$ 的进行统计，右区间标记为 $1$ 的进行询问。</p><p>三维偏序的参考代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P3810 銆愭ā鏉裤€戜笁缁村亸搴忥紙闄屼笂鑺卞紑锛?</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P3810</span></span><br><span class="line"><span class="comment">// Memory Limit: 500 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">qu</span>&#123;</span><br><span class="line"><span class="type">int</span> a,b,c,cnt,ans;</span><br><span class="line"><span class="type">bool</span> flg;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> != (<span class="type">const</span> qu &amp;p) <span class="type">const</span> &#123;</span><br><span class="line"><span class="built_in">return</span> (p.a!=a||p.b!=b||p.c!=c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;Q[<span class="number">200005</span>],T[<span class="number">200005</span>],tmp[<span class="number">200005</span>];</span><br><span class="line"><span class="type">int</span> po;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(<span class="type">const</span> qu &amp;a,<span class="type">const</span> qu &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a.a==b.a?(a.b==b.b?a.c&lt;b.c:a.b&lt;b.b):a.a&lt;b.a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(<span class="type">const</span> qu &amp;a,<span class="type">const</span> qu &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a.b==b.b?a.c&lt;b.c:a.b&lt;b.b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp3</span><span class="params">(<span class="type">const</span> qu &amp;a,<span class="type">const</span> qu &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.c&lt;b.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> A[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cdq2d</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">cdq2d</span>(l,mid);</span><br><span class="line"><span class="built_in">cdq2d</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="comment">// sort(Q+l,Q+mid+1,cmp3);</span></span><br><span class="line"><span class="comment">// sort(Q+mid+1,Q+r+1,cmp3);</span></span><br><span class="line"><span class="type">int</span> C=<span class="number">0</span>;</span><br><span class="line">po=l;</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=l,j=mid+<span class="number">1</span>;j&lt;=r;j++)&#123;</span><br><span class="line"><span class="keyword">while</span>(Q[i].c&lt;=Q[j].c&amp;&amp;i&lt;=mid)&#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(Q[i<span class="number">-1</span>].flg==<span class="number">0</span>)C+=Q[i<span class="number">-1</span>].cnt;</span><br><span class="line">tmp[po++]=Q[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Q[j].flg)Q[j].ans+=C;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;Q[j].a&lt;&lt;&quot; &quot;&lt;&lt;Q[j].b&lt;&lt;&quot; &quot;&lt;&lt;Q[j].c&lt;&lt;&quot; &quot;&lt;&lt;Q[j].ans&lt;&lt;&quot; &quot;&lt;&lt;Q[i].flg&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">tmp[po++]=Q[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid)i++,tmp[po++]=Q[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(i=l;i&lt;=r;i++)Q[i]=tmp[i];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cdq1d</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">cdq1d</span>(l,mid);</span><br><span class="line"><span class="built_in">cdq1d</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">sort</span>(Q+l,Q+r+<span class="number">1</span>,cmp1);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=mid;i++)&#123;</span><br><span class="line">Q[i].flg=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=mid+<span class="number">1</span>;i&lt;=r;i++)&#123;</span><br><span class="line">Q[i].flg=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">stable_sort</span>(Q+l,Q+r+<span class="number">1</span>,cmp2);</span><br><span class="line"><span class="comment">// cerr&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="built_in">cdq2d</span>(l,r);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> pp=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;T[i].a&gt;&gt;T[i].b&gt;&gt;T[i].c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(T+<span class="number">1</span>,T+n+<span class="number">1</span>,cmp1);</span><br><span class="line"><span class="type">int</span> qcnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,now=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(T[i]!=T[now])Q[++qcnt]=T[now],Q[qcnt].cnt=i-now,now=i;</span><br><span class="line">&#125;</span><br><span class="line">n=qcnt;</span><br><span class="line"><span class="built_in">cdq1d</span>(<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)Q[i].ans+=Q[i].cnt<span class="number">-1</span>,A[Q[i].ans]+=Q[i].cnt;<span class="comment">//,cout&lt;&lt;Q[i].a&lt;&lt;&quot; &quot;&lt;&lt;Q[i].b&lt;&lt;&quot; &quot;&lt;&lt;Q[i].c&lt;&lt;&quot; &quot;&lt;&lt;Q[i].ans&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;pp;i++)cout&lt;&lt;A[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面就是四维偏序 + 1D/1D 动态规划的 dp 的嵌套 CDQ 的题了。</p><p>使用 cdq+cdq+BIT 自认为最好写：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P4849 寻找宝藏</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P4849</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 3000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">qu</span>&#123;</span><br><span class="line"><span class="type">int</span> a,b,c,d,ans,cas,val,cnt;</span><br><span class="line"><span class="type">bool</span> flg;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> != (<span class="type">const</span> qu &amp;p) <span class="type">const</span> &#123;</span><br><span class="line"><span class="built_in">return</span> (a!=p.a||b!=p.b||c!=p.c||d!=p.d);</span><br><span class="line">&#125;</span><br><span class="line">&#125;Q[<span class="number">80005</span>],T[<span class="number">80005</span>],tmp[<span class="number">80005</span>];</span><br><span class="line"><span class="type">int</span> t[<span class="number">80005</span>],c[<span class="number">80005</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=<span class="number">80000</span>)&#123;</span><br><span class="line">t[x]=<span class="number">0</span>;</span><br><span class="line">c[x]=<span class="number">0</span>;</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v,<span class="type">int</span> C)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=<span class="number">80000</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(t[x]&lt;v)c[x]=C,t[x]=v;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t[x]==v)c[x]+=C;</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; <span class="title">q</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>,cc=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(t[x]&gt;res)cc=c[x],res=t[x];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(t[x]==res)cc+=c[x];</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">make_pair</span>(res,cc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp1</span><span class="params">(<span class="type">const</span> qu &amp;a,<span class="type">const</span> qu &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.a==b.a?(a.b==b.b?(a.c==b.c?a.d&lt;b.d:a.c&lt;b.c):a.b&lt;b.b):a.a&lt;b.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp2</span><span class="params">(<span class="type">const</span> qu &amp;a,<span class="type">const</span> qu &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.b==b.b?(a.c==b.c?a.d&lt;b.d:a.c&lt;b.c):a.b&lt;b.b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp3</span><span class="params">(<span class="type">const</span> qu &amp;a,<span class="type">const</span> qu &amp;b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.c==b.c?a.d&lt;b.d:a.c&lt;b.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> D[<span class="number">80001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cdq2d</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">cdq2d</span>(l,mid);</span><br><span class="line"><span class="built_in">stable_sort</span>(Q+l,Q+r+<span class="number">1</span>,cmp2);</span><br><span class="line"><span class="built_in">stable_sort</span>(Q+l,Q+mid+<span class="number">1</span>,cmp3);</span><br><span class="line"><span class="built_in">stable_sort</span>(Q+mid+<span class="number">1</span>,Q+r+<span class="number">1</span>,cmp3);</span><br><span class="line"><span class="type">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i=l,j=mid+<span class="number">1</span>;j&lt;=r;j++)&#123;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid&amp;&amp;Q[i].c&lt;=Q[j].c)&#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(Q[i<span class="number">-1</span>].flg==<span class="number">0</span>)<span class="built_in">mdf</span>(Q[i<span class="number">-1</span>].d,Q[i<span class="number">-1</span>].ans,Q[i<span class="number">-1</span>].cas);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(Q[j].flg)&#123;</span><br><span class="line"><span class="keyword">auto</span> nowans=<span class="built_in">q</span>(Q[j].d);</span><br><span class="line"><span class="keyword">if</span>(Q[j].ans&lt;nowans.first+Q[j].val)Q[j].ans=nowans.first+Q[j].val,Q[j].cas=nowans.second;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Q[j].ans==nowans.first+Q[j].val)Q[j].cas+=nowans.second;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;nowans.first&lt;&lt;&quot; &quot;&lt;&lt;Q[j].ans&lt;&lt;&quot; &quot;&lt;&lt;Q[j].cas&lt;&lt;&quot; &quot;&lt;&lt;Q[j].a&lt;&lt;&quot; &quot;&lt;&lt;Q[j].b&lt;&lt;&quot; &quot;&lt;&lt;Q[j].c&lt;&lt;&quot; &quot;&lt;&lt;Q[j].d&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i--;i&gt;=l;i--)<span class="keyword">if</span>(Q[i].flg==<span class="number">0</span>)<span class="built_in">clear</span>(Q[i].d);</span><br><span class="line"><span class="built_in">stable_sort</span>(Q+mid+<span class="number">1</span>,Q+r+<span class="number">1</span>,cmp2);</span><br><span class="line"><span class="built_in">cdq2d</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cdq1d</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">cdq1d</span>(l,mid);</span><br><span class="line"><span class="built_in">sort</span>(Q+l,Q+r+<span class="number">1</span>,cmp1);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=mid;i++)Q[i].flg=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=mid+<span class="number">1</span>;i&lt;=r;i++)Q[i].flg=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">stable_sort</span>(Q+l,Q+r+<span class="number">1</span>,cmp2);</span><br><span class="line"><span class="built_in">cdq2d</span>(l,r);</span><br><span class="line"><span class="built_in">stable_sort</span>(Q+l,Q+r+<span class="number">1</span>,cmp1);</span><br><span class="line"><span class="built_in">cdq1d</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;T[i].a&gt;&gt;T[i].b&gt;&gt;T[i].c&gt;&gt;T[i].d&gt;&gt;T[i].val,D[i]=T[i].d;</span><br><span class="line"><span class="built_in">sort</span>(D+<span class="number">1</span>,D+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)T[i].d=<span class="built_in">lower_bound</span>(D+<span class="number">1</span>,D+n+<span class="number">1</span>,T[i].d)-D;</span><br><span class="line"><span class="built_in">stable_sort</span>(T+<span class="number">1</span>,T+n+<span class="number">1</span>,cmp1);</span><br><span class="line"><span class="type">int</span> qcnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,now=<span class="number">1</span>,nowsum=<span class="number">0</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(T[i]!=T[now])Q[++qcnt]=T[now],Q[qcnt].cnt=i-now,Q[qcnt].val=nowsum,Q[qcnt].ans=nowsum,Q[qcnt].cas=<span class="number">1</span>,nowsum=<span class="number">0</span>,now=i;</span><br><span class="line">nowsum+=T[i].val;</span><br><span class="line">&#125;</span><br><span class="line">n=qcnt;</span><br><span class="line"><span class="built_in">cdq1d</span>(<span class="number">1</span>,n);</span><br><span class="line"><span class="type">int</span> maxx=<span class="number">0</span>,fangan=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=qcnt;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(Q[i].ans&gt;maxx)maxx=Q[i].ans,fangan=Q[i].cas;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(Q[i].ans==maxx)fangan+=Q[i].cas;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;maxx&lt;&lt;<span class="string">&quot;\n&quot;</span>&lt;&lt;fangan%<span class="number">998244353</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得要多用 <code>stable_sort</code>，虽然我也不知道为什么。</p><h4 id="P2717-P7868">P2717/P7868</h4><p>其实对于每个数都减 $k$ 之后，就是个前缀和的二维偏序：满足 $pre_i\geq pre_j\and id_i&lt;id_j$。</p><p>使用 CDQ 分治或者树状数组二维数点即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P2717 寒假作业</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P2717</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">100001</span>],v[<span class="number">100001</span>];</span><br><span class="line"><span class="type">int</span> n,k,ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cdq</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">cdq</span>(l,mid);</span><br><span class="line"><span class="built_in">cdq</span>(mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="type">int</span> i,j,C=<span class="number">0</span>,po=l;</span><br><span class="line"><span class="keyword">for</span>(i=l,j=mid+<span class="number">1</span>;j&lt;=r;j++)&#123;</span><br><span class="line"><span class="keyword">while</span>(a[i]&lt;=a[j]&amp;&amp;i&lt;=mid)&#123;</span><br><span class="line">i++;</span><br><span class="line">C++;</span><br><span class="line">v[po++]=a[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">ans+=C,v[po++]=a[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=mid)v[po++]=a[i],i++;</span><br><span class="line"><span class="keyword">for</span>(i=l;i&lt;=r;i++)a[i]=v[i];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i],a[i]-=k,a[i]+=a[i<span class="number">-1</span>];</span><br><span class="line"><span class="built_in">cdq</span>(<span class="number">0</span>,n);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="P7424">P7424</h4><p>整体二分练习题。</p><p>显然，答案具有可二分性，那么直接整体二分答案，模拟 $[l,mid]$ 的射弹过程，合法的区间放左边，不合法的区间放右边且减去当前答案即可。注意要检验当前答案合法性，不然当有木板没有被打碎时会多计算。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P7424 [THUPC2017] 天天爱射击</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P7424</span></span><br><span class="line"><span class="comment">// Memory Limit: 500 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">wood</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,k;</span><br><span class="line">&#125;Q[<span class="number">200001</span>],Q1[<span class="number">200001</span>],Q2[<span class="number">200005</span>];</span><br><span class="line"><span class="type">int</span> n,m,shot[<span class="number">200001</span>];</span><br><span class="line"><span class="type">int</span> t[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=<span class="number">200000</span>)&#123;</span><br><span class="line">t[x]+=v;</span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">q</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">res+=t[x];</span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">200001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span>&#123;</span><br><span class="line"><span class="comment">// cerr&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;L&lt;&lt;&quot; &quot;&lt;&lt;R&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line"><span class="built_in">mdf</span>(shot[l],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L;i&lt;=R;i++)&#123;</span><br><span class="line"><span class="type">int</span> chk=<span class="built_in">q</span>(Q[i].r)-<span class="built_in">q</span>(Q[i].l<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(chk&gt;=Q[i].k)ans[l]++;</span><br><span class="line"><span class="comment">//cout&lt;&lt;Q[i].l&lt;&lt;&quot; &quot;&lt;&lt;Q[i].r&lt;&lt;&quot; &quot;&lt;&lt;Q[i].k&lt;&lt;&quot; &quot;&lt;&lt;chk&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">mdf</span>(shot[l],<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="type">int</span> po1=<span class="number">0</span>,po2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=mid;i++)<span class="built_in">mdf</span>(shot[i],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L;i&lt;=R;i++)&#123;</span><br><span class="line"><span class="type">int</span> chk=<span class="built_in">q</span>(Q[i].r)-<span class="built_in">q</span>(Q[i].l<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">if</span>(chk&gt;=Q[i].k)Q1[++po1]=Q[i];</span><br><span class="line"><span class="keyword">else</span> Q2[++po2]=Q[i],Q2[po2].k-=chk;<span class="comment">//,cout&lt;&lt;Q[i].l&lt;&lt;&quot; &quot;&lt;&lt;Q[i].r&lt;&lt;&quot; &quot;&lt;&lt;chk&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L;i&lt;=L+po1<span class="number">-1</span>;i++)Q[i]=Q1[i-L+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L+po1;i&lt;=L+po2+po1<span class="number">-1</span>;i++)Q[i]=Q2[i-L-po1+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=mid;i++)<span class="built_in">mdf</span>(shot[i],<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">solve</span>(l,mid,L,L+po1<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">solve</span>(mid+<span class="number">1</span>,r,L+po1,L+po1+po2<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;Q[i].l&gt;&gt;Q[i].r&gt;&gt;Q[i].k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)cin&gt;&gt;shot[i];</span><br><span class="line"><span class="built_in">solve</span>(<span class="number">1</span>,m,<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="P3380">P3380</h4><p>属于是整体二分毕业题了。</p><p>这里如果使用两次整体二分的算法，那么就可以用树状数组，就是将前驱后继都转化成排名为 $\operatorname{rk}(num)$ 的形式，第一遍求出 $\operatorname{rk}(num)$，第二次再去求第 $k$ 大就行了。</p><p>而存在只使用一次整体二分的算法（我写的这个），但是只能使用线段树，于是由于常数原因，是跑不过上面的算法的。</p><p>下面就来一个操作一个操作的讲解。</p><p>首先，这种整体二分是操作序列上的值域整体二分。即脱离原数列的整体二分。</p><ul class="lvl-0"><li class="lvl-2"><p>求 $k$ 的排名。考虑先比较 $k$ 和当前值域分治中心的大小，如果 $k$ 更大，那么可以直接在答案中加入当前值域区间 $[l,mid]$ 的贡献，然后放在右区间继续求排名。注意排名的答案有初始值 $1$。</p></li><li class="lvl-2"><p>求第 $k$ 小。正常求就行了，见带修区间第 $k$ 小。</p></li><li class="lvl-2"><p>求前驱。考虑当 $mid&lt; k$ 时（即 $k$ 在右区间时），取左区间的最大值与答案作 $\max$。</p></li><li class="lvl-2"><p>求后继。与前驱差不多，当 $mid\geq k$ 时（即 $k$ 在左区间时），取右区间的最小值作 $\min$。</p></li></ul><p>这个时候，线段树和修改操作的实现就有些不同了。首先确定线段树要维护区间和，区间最大最小值。</p><p>修改的时候对于 $k&gt;mid$ 的数不加，只修改最小值；而对于 $k\leq mid$ 的数要加，只修改最大值。修改最大最小值时，利用线段树上元素只可能为 $0$ 或者 $1$，所以需要注意的是当该元素修改后为 $1$ 时将最大最小值更新为当前的数，否则最小值更新为 $+\infty\ (2147483647\to \infty)$，最大值更新为 $-\infty$。</p><p>可能讲的不太清楚。可以看看代码理解一下。</p><p>由于这份代码没有调几下就过了，我都不敢相信，所以可能有些谬误，欢迎指出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P3380 【模板】二逼平衡树（树套树）</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P3380</span></span><br><span class="line"><span class="comment">// Memory Limit: 512 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// Start coding at 2023-11-30 14:48:41</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,x;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">qu</span>&#123;</span><br><span class="line"><span class="comment">// int ;//0-&gt;modify(c=1,-1,k in 0,1e8),1-&gt;kth,2-&gt;rk(k),3-&gt;pre,4-&gt;suf</span></span><br><span class="line"><span class="type">int</span> ty,C,l,r,k,id;</span><br><span class="line">&#125;Q[<span class="number">200001</span>],Q1[<span class="number">200001</span>],Q2[<span class="number">200001</span>];</span><br><span class="line"><span class="type">int</span> ans[<span class="number">200001</span>];</span><br><span class="line"><span class="type">int</span> xdsmax[<span class="number">400001</span>],xdsmin[<span class="number">400001</span>],xdssum[<span class="number">400001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">xdsmax[now]=<span class="built_in">max</span>(xdsmax[now&lt;&lt;<span class="number">1</span>],xdsmax[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">xdsmin[now]=<span class="built_in">min</span>(xdsmin[now&lt;&lt;<span class="number">1</span>],xdsmin[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">xdssum[now]=xdssum[now&lt;&lt;<span class="number">1</span>]+xdssum[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> q,<span class="type">int</span> num,<span class="type">int</span> v,<span class="type">bool</span> T)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line"><span class="keyword">if</span>(T)&#123;</span><br><span class="line"><span class="keyword">if</span>(v==<span class="number">1</span>)xdsmin[now]=num;</span><br><span class="line"><span class="keyword">else</span> xdsmin[now]=<span class="number">2147483647</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">xdssum[now]+=v;</span><br><span class="line"><span class="keyword">if</span>(xdssum[now])xdsmax[now]=num;</span><br><span class="line"><span class="keyword">else</span> xdsmax[now]=<span class="number">-2147483647</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(q&lt;=mid)<span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>,l,mid,q,num,v,T);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">mdf</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,q,num,v,T);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> q)</span></span>&#123;</span><br><span class="line">xdsmin[now]=<span class="number">2147483647</span>;</span><br><span class="line">xdsmax[now]=<span class="number">-2147483647</span>;</span><br><span class="line">xdssum[now]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(q&lt;=mid)<span class="built_in">clear</span>(now&lt;&lt;<span class="number">1</span>,l,mid,q);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">clear</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,q);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qsum</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)<span class="keyword">return</span> xdssum[now];</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)res+=<span class="built_in">qsum</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid));</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)res+=<span class="built_in">qsum</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmax</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)<span class="keyword">return</span> xdsmax[now];</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>,res=<span class="number">-2147483647</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)res=<span class="built_in">max</span>(res,<span class="built_in">qmax</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid)));</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)res=<span class="built_in">max</span>(res,<span class="built_in">qmax</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr));</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmin</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)<span class="keyword">return</span> xdsmin[now];</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>,res=<span class="number">2147483647</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)res=<span class="built_in">min</span>(res,<span class="built_in">qmin</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(mid,sr)));</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)res=<span class="built_in">min</span>(res,<span class="built_in">qmin</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(mid+<span class="number">1</span>,sl),sr));</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> qcnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> L,<span class="type">int</span> R)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l&gt;r||L&gt;R)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L;i&lt;=R;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(Q[i].ty==<span class="number">1</span>)ans[Q[i].id]=l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> M=(l+r)/<span class="number">2</span>,cnt1=<span class="number">0</span>,cnt2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L;i&lt;=R;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(Q[i].ty==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">mdf</span>(<span class="number">1</span>,<span class="number">1</span>,n,Q[i].l,Q[i].k,Q[i].C,Q[i].k&gt;M);</span><br><span class="line"><span class="keyword">if</span>(Q[i].k&lt;=M)Q1[++cnt1]=Q[i];</span><br><span class="line"><span class="keyword">else</span> Q2[++cnt2]=Q[i];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(Q[i].ty==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="type">int</span> st=<span class="built_in">qsum</span>(<span class="number">1</span>,<span class="number">1</span>,n,Q[i].l,Q[i].r);</span><br><span class="line"><span class="comment">// cerr&lt;&lt;std&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(st&gt;=Q[i].k)Q1[++cnt1]=Q[i];</span><br><span class="line"><span class="keyword">else</span> Q[i].k-=st,Q2[++cnt2]=Q[i];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(Q[i].ty==<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(Q[i].k&lt;=M)Q1[++cnt1]=Q[i];</span><br><span class="line"><span class="keyword">else</span> ans[Q[i].id]+=<span class="built_in">qsum</span>(<span class="number">1</span>,<span class="number">1</span>,n,Q[i].l,Q[i].r),Q2[++cnt2]=Q[i];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(Q[i].ty==<span class="number">3</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(Q[i].k&gt;M)&#123;</span><br><span class="line">Q2[++cnt2]=Q[i];</span><br><span class="line">ans[Q[i].id]=<span class="built_in">max</span>(ans[Q[i].id],<span class="built_in">qmax</span>(<span class="number">1</span>,<span class="number">1</span>,n,Q[i].l,Q[i].r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> Q1[++cnt1]=Q[i];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(Q[i].k&lt;=M)&#123;</span><br><span class="line">Q1[++cnt1]=Q[i];</span><br><span class="line">ans[Q[i].id]=<span class="built_in">min</span>(ans[Q[i].id],<span class="built_in">qmin</span>(<span class="number">1</span>,<span class="number">1</span>,n,Q[i].l,Q[i].r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> Q2[++cnt2]=Q[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L;i&lt;=R;i++)<span class="keyword">if</span>(Q[i].ty==<span class="number">0</span>)<span class="built_in">clear</span>(<span class="number">1</span>,<span class="number">1</span>,n,Q[i].l);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt1;i++)Q[i+L<span class="number">-1</span>]=Q1[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt2;i++)Q[i+L+cnt1<span class="number">-1</span>]=Q2[i];</span><br><span class="line"><span class="built_in">solve</span>(l,M,L,L+cnt1<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">solve</span>(M+<span class="number">1</span>,r,L+cnt1,L+cnt1+cnt2<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> op,l,r,pos,a[<span class="number">50004</span>],ii;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">8</span>;i++)xdsmin[i]=<span class="number">2147483647</span>,xdsmax[i]=<span class="number">-2147483647</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">Q[++qcnt]=&#123;<span class="number">0</span>,<span class="number">1</span>,i,<span class="number">0</span>,x,<span class="number">0</span>&#125;;</span><br><span class="line">a[i]=x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;op;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r&gt;&gt;k;</span><br><span class="line">Q[++qcnt]=&#123;<span class="number">2</span>,<span class="number">0</span>,l,r,k,++ii&#125;;</span><br><span class="line">ans[ii]=<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)&#123;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r&gt;&gt;k;</span><br><span class="line">Q[++qcnt]=&#123;<span class="number">1</span>,<span class="number">0</span>,l,r,k,++ii&#125;;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>)&#123;</span><br><span class="line">cin&gt;&gt;pos&gt;&gt;k;</span><br><span class="line">Q[++qcnt]=&#123;<span class="number">0</span>,<span class="number">-1</span>,pos,<span class="number">0</span>,a[pos],<span class="number">0</span>&#125;;</span><br><span class="line">a[pos]=k;</span><br><span class="line">Q[++qcnt]=&#123;<span class="number">0</span>,<span class="number">1</span>,pos,<span class="number">0</span>,a[pos],<span class="number">0</span>&#125;;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">4</span>)&#123;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r&gt;&gt;k;</span><br><span class="line">Q[++qcnt]=&#123;<span class="number">3</span>,<span class="number">0</span>,l,r,k,++ii&#125;;</span><br><span class="line">ans[ii]=<span class="number">-2147483647</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">cin&gt;&gt;l&gt;&gt;r&gt;&gt;k;</span><br><span class="line">Q[++qcnt]=&#123;<span class="number">4</span>,<span class="number">0</span>,l,r,k,++ii&#125;;</span><br><span class="line">ans[ii]=<span class="number">2147483647</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">solve</span>(<span class="number">0</span>,<span class="number">1e8</span>,<span class="number">1</span>,qcnt);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=ii;i++)cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>前缀和与差分</h1><h1>倍增</h1><p>糊里糊涂的就先写倍增了。</p><h2 id="例题：P7167">例题：P7167</h2><p>用单调栈维护该圆盘会流到下面哪个圆盘里，发现是一个倒着的关系树。</p><p>考虑类似于求 LCA 的倍增，对于每个点维护第 $2^i$ 的祖先和要跳到第 $2^i$ 祖先需要的水量，然后像求 LCA 那样倍增就行了。</p><p>当然第二个可以用树上前缀和做。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P7167 [eJOI2020 Day1] Fountain</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P7167</span></span><br><span class="line"><span class="comment">// Memory Limit: 512 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1500 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">400001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">100005</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> V[<span class="number">100005</span>][<span class="number">21</span>],fa[<span class="number">100005</span>][<span class="number">21</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now][<span class="number">0</span>]=f;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;)i++,fa[now][i]=fa[fa[now][i<span class="number">-1</span>]][i<span class="number">-1</span>],V[now][i]=V[now][i<span class="number">-1</span>]+V[fa[now][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(E[i].to,now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;fa[now][0]&lt;&lt;&quot; &quot;&lt;&lt;V[now][0]&lt;&lt;&quot; &quot;&lt;&lt;fa[now][1]&lt;&lt;&quot; &quot;&lt;&lt;V[now][1]&lt;&lt;&quot; &quot;&lt;&lt;V[now][2]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Q</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;v&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">20</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="comment">//if(V[now][i]==0)continue;</span></span><br><span class="line"><span class="comment">//cerr&lt;&lt;V[now][i]&lt;&lt;&quot; &quot;&lt;&lt;now&lt;&lt;&quot; -&gt; &quot;;</span></span><br><span class="line"><span class="keyword">if</span>(v&gt;V[now][i])v-=V[now][i],now=fa[now][i];</span><br><span class="line"><span class="comment">//cerr&lt;&lt;now&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(now==<span class="number">0</span>||now==<span class="number">1e5</span>+<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">return</span> now;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> d[<span class="number">100001</span>];</span><br><span class="line">stack&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;d[i]&gt;&gt;V[i][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line">s.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(!s.<span class="built_in">empty</span>()&amp;&amp;d[s.<span class="built_in">top</span>()]&lt;d[i])<span class="built_in">addE</span>(s.<span class="built_in">top</span>(),i),<span class="built_in">addE</span>(i,s.<span class="built_in">top</span>()),s.<span class="built_in">pop</span>();</span><br><span class="line">s.<span class="built_in">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!s.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="built_in">addE</span>(<span class="number">1e5</span>+<span class="number">1</span>,s.<span class="built_in">top</span>());</span><br><span class="line"><span class="built_in">addE</span>(s.<span class="built_in">top</span>(),<span class="number">1e5</span>+<span class="number">1</span>);</span><br><span class="line">s.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1e5</span>+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//cerr&lt;&lt;fa[260][0]&lt;&lt;&quot; &quot;&lt;&lt;fa[260][1];</span></span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">cout&lt;&lt;<span class="built_in">Q</span>(x,y)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题：P4155">例题：P4155</h2><p>考虑将问题转化，就是给定一些区间，对于每个区间，求如果强制选定该区间时，覆盖整个环的最小区间数。</p><p>首先断环为链，然后按左端点排序，由于每个区间不包含，所以左右端点都满足单调性，可以用双指针求出对于每一个区间，落在该区间的最右边的左端点，这样就求出了这个区间可以接着的最右边的区间，也就是最优的区间。然后倍增求出下第 $2^i$ 个区间，只需要满足 $l_{now}\leq r_{end}-m$ 就合法。最后别忘了加上起始区间和终点区间。</p><p>注意断环为链时，跨过 $n\to 1$ 的区间的那些区间也要加入两次，但是其实可以只用加原来的区间和 $[l+m,m\times 2]$ 这个区间，因为在答案内的 $l$ 最多就是 $m$，也就是右端点最大就是 $m\times 2$，而跨过 $n\to1$ 的那些区间如果按 $[l+m,r+m\times 2]$ 加入，右端点一定大于 $m\times 2$，那么就可以加入右端点为 $m\times 2$ 的区间，防止爆 <code>int</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P4155 [SCOI2015] 国旗计划</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P4155</span></span><br><span class="line"><span class="comment">// Memory Limit: 250 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1500 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> nxt[<span class="number">400005</span>][<span class="number">23</span>];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">S</span>&#123;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; p;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> S &amp;a) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> p&lt;a.p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;seg[<span class="number">400005</span>];</span><br><span class="line"><span class="type">int</span> ans[<span class="number">200005</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> l first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> r second</span></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(y&lt;x)&#123;</span><br><span class="line">y+=m;</span><br><span class="line">seg[++cnt]=&#123;<span class="built_in">make_pair</span>(x,y),i&#125;;</span><br><span class="line">seg[++cnt]=&#123;<span class="built_in">make_pair</span>(x+m,<span class="number">2</span>*m),<span class="number">200001</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">seg[++cnt]=&#123;<span class="built_in">make_pair</span>(x,y),i&#125;;</span><br><span class="line">seg[++cnt]=&#123;<span class="built_in">make_pair</span>(x+m,y+m),<span class="number">200001</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(seg+<span class="number">1</span>,seg+cnt+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//for(int i=1;i&lt;=cnt;i++)&#123;</span></span><br><span class="line"><span class="comment">//cerr&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;seg[i].p.l&lt;&lt;&quot; &quot;&lt;&lt;seg[i].p.r&lt;&lt;&quot; &quot;&lt;&lt;seg[i].id&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(j&lt;cnt&amp;&amp;seg[j+<span class="number">1</span>].p.l&lt;=seg[i].p.r)j++;</span><br><span class="line">nxt[i][<span class="number">0</span>]=j;</span><br><span class="line"><span class="comment">//cout&lt;&lt;seg[i].id&lt;&lt;&quot; &quot;&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;j&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">seg[<span class="number">0</span>]=&#123;<span class="built_in">make_pair</span>(<span class="number">1</span>,INT_MAX),<span class="number">200001</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">20</span>;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=cnt;j++)&#123;</span><br><span class="line">nxt[j][i]=nxt[nxt[j][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line"><span class="comment">// int L=seg[i].p.l,R=seg[i].p.r;</span></span><br><span class="line"><span class="type">int</span> A=i,c=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">20</span>;j&gt;=<span class="number">0</span>;j--)&#123;</span><br><span class="line"><span class="keyword">if</span>(seg[nxt[A][j]].p.r-seg[i].p.l&lt;m)A=nxt[A][j],c+=(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">&#125;</span><br><span class="line">ans[seg[i].id]=c+<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;二分&lt;/h1&gt;
&lt;p&gt;分为二分序列，二分数据结构，和二分答案。&lt;/p&gt;
&lt;p&gt;需要满足有单调性才能二分。如果是一个凸壳可以三分。&lt;/p&gt;
&lt;h2 id=&quot;二分答案&quot;&gt;二分答案&lt;/h2&gt;
&lt;h3 id=&quot;例题：P6069&quot;&gt;例题：P6069&lt;/h3&gt;
&lt;p&gt;注意这题对于方差</summary>
      
    
    
    
    <category term="OI" scheme="http://blog.eltaos.top/categories/OI/"/>
    
    
    <category term="OI" scheme="http://blog.eltaos.top/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>Basic-Mathmatics-Notes</title>
    <link href="http://blog.eltaos.top/2023/Basic-Mathmatics-Notes/"/>
    <id>http://blog.eltaos.top/2023/Basic-Mathmatics-Notes/</id>
    <published>2023-10-31T16:00:00.000Z</published>
    <updated>2023-12-08T11:32:54.760Z</updated>
    
    <content type="html"><![CDATA[<h1>鲜花</h1><p>从树论赶来的，感觉这个东西没什么用啊…QwQ</p><h1>欧几里得</h1><h2 id="欧几里得算法">欧几里得算法</h2><p>也称辗转相除法。</p><p>就是一个简单的式子：<br>$$<br>\gcd(a,b)=\gcd(b,a \bmod b)<br>$$<br>证明如下：<br>$$<br>\text{令 } b=ka+r\ ,\ gcd(a,b)=d\<br>\text{则有 } d\ \vert\ a\ ,\ d\ \vert\ b\<br>r=b-ka\Rightarrow \frac{b}{d} - \frac{ka}{d}=\frac{r}{d}\<br>\text{由于左边显然为整数}\<br>\therefore r\ \text{和 } a \text{ 的公约数相等}\<br>\therefore r\ \text{和 } a \text{ 的最大公约数相等}<br>$$<br>证毕。</p><h2 id="扩展欧几里得算法（exgcd）">扩展欧几里得算法（exgcd）</h2><h3 id="裴蜀定理">裴蜀定理</h3><h4 id="定理">定理</h4><p>对于任意不全为 $0$ 的整数 $a,b$，均存在一组整数 $x,y$，使得 $ax+by=\gcd(a,b)$。</p><h4 id="证明">证明</h4><p>令 $d=\gcd(a,b),a=a_1d,b=b_1d$。</p><p>则有 $a_1dx+b_1dy=d(a_1x+b_1y)$。</p><p>那么可以把证明转化为<strong>对于任意不全为 $0$ 的整数 $a,b$ 满足 $\gcd(a,b)=1$，存在一组整数 $x,y$，满足 $ax+by=1$</strong>。</p><p>考虑模拟一遍欧几里得算法求 $\gcd(a,b)$。<br>$$<br>\gcd(a,b)\Rightarrow\gcd(b,a\bmod b)\Rightarrow\gcd(a\bmod b,b\bmod(a\bmod b))\Rightarrow\cdots\cdots<br>$$<br>发现很复杂，则把每一次的数记为 $r_1,r_2,r_3$，并记录每一次的等式：<br>$$<br>r_{m-1}=r_mq_m\<br>r_{m-2}=r_{m-1}q_{m-1}+r_m\\cdots\cdots\<br>r_1=r_2q_2+r_3\<br>a=r_1q_1+r_2<br>$$<br>考虑带入 $\gcd(a,b)=1$，则 $r_m=1$。然后把 $q_k$ 换成 $x_{k+1}$。<br>$$<br>\cdots\Rightarrow r_{m-2}=r_{m-1}x_{m}+1\Rightarrow 1=r_{m-2}-x_mr_{m-1}<br>$$<br>继续带入。<br>$$<br>r_{m-3}=r_{m-2}x_{m-1}+r_{m-1}\Rightarrow r_{m-1}=r_{m-3}-r_{m-2}x_{m-1}\<br>\cdots\Rightarrow 1=r_{m-2}-x_m(r_{m-3}-x_{m-1}r_{m-2})\Rightarrow 1=r_{m-2}-x_mr_{m-3}+x_mx_{m-1}r_{m-2}\Rightarrow 1=(1+x_mx_{m-1})r_{m-2}-x_mr_{m-3}\<br>r_{m-4}=r_{m-3}x_{m-2}+r_{m-2}\Rightarrow r_{m-2}=r_{m-4}-r_{m-3}x_{m-2}\<br>\cdots\Rightarrow1=(1+x_mx_{m-1})(r_{m-4}-r_{m-3}x_{m-2})-x_mr_{m-3}\Rightarrow 1=(1+x_mx_{m-1})r_{m-4}-(x_{m-2}x_{m-1}x_m+x_{m-2}+x_m)r_{m-3}<br>$$<br>可以通过模拟发现，总有系数可以满足等式左边为 $1$，由于最后 $r$ 可变为 $a,b$，所以可推出 $ax+by=1$ 成立。</p><p>证毕。</p><h4 id="例题：P4549">例题：<a href="https://www.lougu.com.cn/problem/P4549">P4549</a></h4><p>显然 $a_1x+b_1y=1$  是右边最小的情况。所以 $ax+by=\gcd(a,b)$ 是当前式子右边最小的情况。</p><p>由于 $\gcd(a,b)=\gcd(a,-b)$，所以只需要算出所有数的 $\gcd$ 即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">0</span>)<span class="keyword">return</span> b;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gcd</span>(b%a,a);</span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> a[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line">a[i]=<span class="built_in">abs</span>(a[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)a[i]=<span class="built_in">gcd</span>(a[i],a[i<span class="number">-1</span>]);</span><br><span class="line">cout&lt;&lt;a[n];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="应用：CF510D">应用：<a href="https://www.luogu.com.cn/problem/CF510D">CF510D</a></h4><p>根据裴蜀定理可得，当 $\gcd(a,b)=1$ 时，一定有一组解 $x,y$，能满足 $ax+by=1$，此时就能满足题中所要求的 <code>能跳到所有位置上</code>。</p><p>然而题中要求最小。</p><p>考虑 dp，列出 dp 方程式：<br>$$<br>f_{\gcd(x,y)}=\min(f_{\gcd(x,y)},f_x+c_y)<br>$$<br>使用 <code>unordered_map</code> 记录之前的状态，对于每个点进行转移即可。</p><p>时间复杂度 $O(玄学)$。</p><p>咳咳，我之前写树上莫队的时候什么也没说。</p><p>但是很神奇的是用 <code>unordered_map</code> 会 <code>WA</code>，所以有点离谱。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!b)<span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gcd</span>(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,l[<span class="number">301</span>],c[<span class="number">303</span>];</span><br><span class="line">map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;l[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;c[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; x:mp)&#123;</span><br><span class="line"><span class="type">int</span> _next=<span class="built_in">gcd</span>(x.first,l[i]);</span><br><span class="line"><span class="keyword">if</span>(!mp[_next])mp[_next]=c[i]+x.second;</span><br><span class="line"><span class="keyword">else</span> mp[_next]=<span class="built_in">min</span>(mp[_next],c[i]+x.second);</span><br><span class="line"><span class="comment">//cout&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;_next&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!mp[l[i]])mp[l[i]]=c[i];</span><br><span class="line"><span class="keyword">else</span> mp[l[i]]=<span class="built_in">min</span>(mp[l[i]],c[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!mp[<span class="number">1</span>])mp[<span class="number">1</span>]=<span class="number">-1</span>;</span><br><span class="line">cout&lt;&lt;mp[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进一步结论">进一步结论</h4><p>对于不定方程 $ax+by=n$，如果该方程有解，则称 $n$ 能被（系数） $a,b$ 表示。</p><p>记 $C=ab-a-b$，发现 $C=(a-1)(b-1)-1$，而若 $a,b$ 互质，那么至少其中有一个为偶数，那么 $C$ 必为奇数。</p><p>那么则有结论，<strong>对于任意整数 $n$，$n$ 和 $C-n$ 中只有一个能被 $a,b$ 表示</strong>。</p><p>注意此处的 $x,y$ 为自然数，即 $0$ 可被表示，$C$ 不可被表示；负数不可被表示，大于 $C$ 的数可被表示。</p><p>证明分三步：</p><p>令原方程解为：<br>$$<br>\begin{cases}<br>x=x_0+bt \cr<br>y=y_0-at<br>\end{cases}<br>$$<br>如果控制 $t$ 的大小，$y$ 能控制在 $0$ 到 $a-1$ 的范围内。其实可以发现对于 $[0,C]$ 的数， $y$ 不可能超过 $a-1$。</p><p>第一步：证明当 $n&gt;C$ 时，$n$ 都能被表示。</p><p>考虑 $y_{max}=a-1$，可以得到以下式子：<br>$$<br>ax=n-by&gt;ab-a-b-by\geq ab-a-b-b(a-1)=-a\Rightarrow x&gt;-1<br>$$<br>可见 $x$ 也是非负整数。</p><p>第二步：证明 $n=C$ 时，$n$ 不能被表示。</p><p>考虑如果 $n=C$ 时有解，即满足 $ax+by=ab-a-b$。</p><p>则有 $ab=a(x+1)+b(y+1)\Rightarrow a(b-x-1)=b(y+1)$。</p><p>由于 $a,b$ 互质，那么可以满足 $b-x-1=kb\ ,\ y+1=ka$。</p><p>由于 $y\in[0,a-1]$，所以 $k=1$。此时 $x=-1$，矛盾，故 $C$ 不能被表示。</p><p>此处的证明是作者口胡的，所以与 OI Wiki 上的解释不同。</p><p>第三步：证明当 $n$ 不能被表示时，$C-n$ 能被表示。</p><p>由于 $n$ 不能被表示，而 $y\in[0,a-1]$，故 $x$ 为负数。<br>$$<br>C-n=ab-a-b-ax-by=a(-1-x)+b(a-1-y)<br>$$<br>显然 $-1-x$ 和 $a-1-y$ 是非负的。</p><p>证毕。</p><p>几何意义看不懂。</p><h4 id="另一种解释">另一种解释</h4><p>考虑模 $b$ 意义下的每个剩余系最小能表示的值。因为 $\gcd(a,b)=1$，所以 $0,a,2a,\cdots,(b-1)a$ 在模 $b$ 的时候意义各不相同。</p><p>那么小于等于 $n$ 的能表示的所有非负整数的<strong>数量</strong>为：<br>$$<br>\sum_{i=0}^{\left\lfloor \frac{n}{a} \right\rfloor}\left\lfloor\frac{n-ai}{b}\right\rfloor<br>$$</p><p>因为对于所有剩余系的意义不同，所以要将所有剩余系的贡献累加。</p><p>用类欧几里得算法可以做到 $O(\log(\max(a,b)))$。</p><h3 id="exgcd">exgcd</h3><p>这个东西主要是来求不定方程 $ax+by=\gcd(a,b)$ 的一组整数解。也就是构造裴蜀定理的一组解。</p><h4 id="构造过程">构造过程</h4><p>考虑证明裴蜀定理的时候，对于 $\gcd(a,b)=1$ 的情况，我们是直接对欧几里得算法进行了反带最后得出解。</p><p>有了计算机，那么我们可以反带 $\gcd(a,b)\ne 1$ 的情况，是与 $\gcd(a,b)=1$ 时差不多的。</p><p>下面就是推式子环节了。</p><p>首先，对于欧几里得算法退出时，它的返回条件是 $b=0$，可发现此时一组可行解为：（不换行太丑了）<br>$$<br>\begin{cases}x=1\cr y=0\end{cases}<br>$$<br>然后对于任意 $ax+by=\gcd(a,b)$，考虑转化为递推。<br>$$<br>ax+by=\gcd(a,b)=\gcd(b,a \bmod b)=bx_0+(a\bmod b)y_0\<br>\Rightarrow ax+by=bx_0+(a-\left\lfloor\frac{a}{b}\right\rfloor\times b)y_0=ay_0+b(x_0-\left\lfloor\frac{a}{b}\right\rfloor y_0)<br>$$<br>所以推出一组可行的解 $x=y_0\ ,\ y=x_0-\left\lfloor\frac{a}{b}\right\rfloor y_0$。</p><p>递推即可。</p><h4 id="例题：P5656">例题：<a href="https://www.luogu.com.cn/problem/P5656">P5656</a></h4><p>这题要求是真的多。</p><p>首先用 exgcd 算出一组特解，然后来考虑各组解的关系。</p><p>列出式子 $a(x+p)+b(y-q)=ax+by=c$，发现 $ap=bq$。</p><p>由于 $p$ 和 $q$ 均为整数，所以 $p_{min}=\frac{1}{a}\times\operatorname{lcm}(a,b)$，$q_{min}$ 同。</p><p>然后就可以直接算出题中要求的所有信息了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> x,y,_a,_b,_c;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> d=a;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> d=<span class="built_in">exgcd</span>(b,a%b),<span class="built_in">swap</span>(x,y),y-=a/b*x;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line">cin&gt;&gt;_a&gt;&gt;_b&gt;&gt;_c;</span><br><span class="line"><span class="type">int</span> d=<span class="built_in">exgcd</span>(_a,_b);</span><br><span class="line"><span class="keyword">if</span>(_c%d)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> k=_c/d;</span><br><span class="line">x*=k,y*=k;</span><br><span class="line"><span class="type">int</span> p=_b/d,q=_a/d;<span class="comment">//a(x+p)+b(y-q)=c，要交叉对应，别写反了！！！！</span></span><br><span class="line"><span class="comment">//用x,y其中一个最小整数解对应的那个数判断</span></span><br><span class="line"><span class="type">int</span> test=y/q;</span><br><span class="line"><span class="type">int</span> tx=test*p+x,ty=-test*q+y;</span><br><span class="line"><span class="keyword">if</span>(ty&lt;=<span class="number">0</span>)ty+=q,tx-=p;</span><br><span class="line"><span class="keyword">if</span>(tx&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">cout&lt;&lt;-(tx/p)*p+p+tx&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ty&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout&lt;&lt;(tx<span class="number">-1</span>)/p+<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;(tx<span class="number">-1</span>)%p+<span class="number">1</span>&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;ty&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;tx&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;(tx<span class="number">-1</span>)/p*q+ty&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例题：P1516">例题：<a href="https://www.luogu.com.cn/problem/P1516">P1516</a></h4><p>考虑把这道题的参数转换成 $ax+by=n$。</p><p>考虑追及问题，所以可以列出：$\Delta vx+Ly=\Delta s$。</p><p>算出特解之后像上面那道题一样算 $x$ 的最小正整数解即可。</p><p>注意 $\Delta v$ 必须为正，如果要取反记得把 $\Delta s$ 也要取反。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> n,m,x,y,L;</span><br><span class="line"><span class="type">int</span> _x,_y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> d=a;</span><br><span class="line"><span class="keyword">if</span>(!b)_x=<span class="number">1</span>,_y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> d=<span class="built_in">exgcd</span>(b,a%b),<span class="built_in">swap</span>(_x,_y),_y-=a/b*_x;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y&gt;&gt;m&gt;&gt;n&gt;&gt;L;</span><br><span class="line"><span class="type">int</span> z=n-m,f=x-y;</span><br><span class="line"><span class="keyword">if</span>(z&lt;<span class="number">0</span>)z=-z,f=-f;</span><br><span class="line"><span class="keyword">if</span>(f==<span class="number">0</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;z&lt;&lt;&quot; &quot;&lt;&lt;L&lt;&lt;&quot; &quot;&lt;&lt;f&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="type">int</span> k=<span class="built_in">exgcd</span>(z,L),p=L/k,q=z/k;<span class="comment">//!!!</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;k&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">_x*=(f/k),_y*=(f/k);</span><br><span class="line"><span class="comment">//cout&lt;&lt;p&lt;&lt;&quot; &quot;&lt;&lt;q&lt;&lt;&quot; &quot;&lt;&lt;_x&lt;&lt;&quot; &quot;&lt;&lt;_y&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(f%k)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Impossible&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(_x&gt;<span class="number">0</span>)cout&lt;&lt;(_x<span class="number">-1</span>)%p+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;_x%p+p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例题：P1082">例题：<a href="https://www.luogu.com/problem/P1082">P1082</a></h4><p>水题。</p><p>考虑式子 $ax \equiv 1\pmod b$，可以转换成 $ax-by=1$，由于题中说保证有解，故直接求 $x$ 的最小正整数解即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> d=a;</span><br><span class="line"><span class="keyword">if</span>(!b)x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> d=<span class="built_in">exgcd</span>(b,a%b),<span class="built_in">swap</span>(x,y),y-=a/b*x;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> d=<span class="built_in">exgcd</span>(n,m);</span><br><span class="line">y=-y;</span><br><span class="line"><span class="type">int</span> p=m/d,ans;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">0</span>)ans=(x<span class="number">-1</span>)%p+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> ans=x%p+p;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例题：P2421">例题：<a href="https://www.luogu.com.cn/problem/P2421">P2421</a></h4><p>较复杂的一道题。</p><p>判断每个野人生存周期以内的两两的 exgcd 即可。</p><p>然后由于没有单调性不能二分，直接枚举就行了。</p><p>和 P1516 差不多。</p><p>时间复杂度 $O(Mn^2\log c)$，随机打乱野人的遍历顺序之后应该能做到更优。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> d=a;</span><br><span class="line"><span class="keyword">if</span>(!b)x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> d=<span class="built_in">exgcd</span>(b,a%b),<span class="built_in">swap</span>(x,y),y-=a/b*x;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> c[<span class="number">21</span>],p[<span class="number">21</span>],l[<span class="number">21</span>],n;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> L)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)&#123;</span><br><span class="line"><span class="type">int</span> z=p[j]-p[i],f=c[i]-c[j];</span><br><span class="line"><span class="keyword">if</span>(z&lt;<span class="number">0</span>)z=-z,f=-f;</span><br><span class="line"><span class="keyword">if</span>(f==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> d=<span class="built_in">exgcd</span>(z,L);</span><br><span class="line"><span class="keyword">if</span>(f%d)<span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> p=L/d,q=z/d;</span><br><span class="line">x*=(f/d),y*=(f/d);</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;p&lt;&lt;&quot; &quot;&lt;&lt;i&lt;&lt;&quot; &quot;&lt;&lt;j&lt;&lt;&quot; &quot;&lt;&lt;f&lt;&lt;&quot; &quot;&lt;&lt;d&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">0</span>)ans=(x<span class="number">-1</span>)%p+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> ans=x%p+p;</span><br><span class="line"><span class="keyword">if</span>(ans&lt;=l[i]&amp;&amp;ans&lt;=l[j])<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> maxc=<span class="number">-1</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;c[i]&gt;&gt;p[i]&gt;&gt;l[i],maxc=<span class="built_in">max</span>(c[i],maxc);</span><br><span class="line"><span class="keyword">for</span>(;;maxc++)<span class="keyword">if</span>(<span class="built_in">check</span>(maxc))&#123;</span><br><span class="line">cout&lt;&lt;maxc;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="应用：UVA12775">应用：<a href="https://www.luogu.com.cn/problem/UVA12775">UVA12775</a></h4><p>枚举每个 $C$，然后先求 $\operatorname{exgcd}(A,B)$，然后枚举每个 $Ax+By=P-iC$ 的解的数量即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Gift Dilemma</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/UVA12775</span></span><br><span class="line"><span class="comment">// Memory Limit: 0 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 3000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> T,a,b,c,p,x,y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> d=a;</span><br><span class="line"><span class="keyword">if</span>(!b)x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> d=<span class="built_in">exgcd</span>(b,a%b),<span class="built_in">swap</span>(x,y),y-=a/b*x;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;T;</span><br><span class="line"><span class="type">int</span> Y=T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;p;</span><br><span class="line"><span class="type">int</span> d=<span class="built_in">exgcd</span>(a,b);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i*c&lt;=p;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>((p-i*c)%d)<span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> tx=x*(p-i*c)/d,ty=y*(p-i*c)/d;</span><br><span class="line"><span class="type">int</span> p=b/d,q=a/d;</span><br><span class="line"><span class="comment">//cout&lt;&lt;tx&lt;&lt;&quot; &quot;&lt;&lt;ty&lt;&lt;&quot; &quot;&lt;&lt;p&lt;&lt;&quot; &quot;&lt;&lt;q&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(tx&gt;=<span class="number">0</span>||tx%p==<span class="number">0</span>)res=tx%p;</span><br><span class="line"><span class="keyword">else</span> res=tx%p+p;</span><br><span class="line">res=(res-tx)/p;</span><br><span class="line">ty-=res*q;</span><br><span class="line"><span class="keyword">if</span>(ty&gt;=<span class="number">0</span>)ans+=ty/q+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//cout&lt;&lt;ty-res*q&lt;&lt;&quot; &quot;&lt;&lt;res&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;Case &quot;</span>&lt;&lt;Y-T&lt;&lt;<span class="string">&quot;: &quot;</span>&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="应用：UVA10104">应用：<a href="https://www.luogu.com.cn/problem/UVA10104">UVA10104</a></h4><p>不会证明这个结论，因此直接搬 tj 了。</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/pi4uje7u.png" alt=""></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Euclid Problem</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/UVA10104</span></span><br><span class="line"><span class="comment">// Memory Limit: 0 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 3000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">exgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> d=a;</span><br><span class="line"><span class="keyword">if</span>(!b)x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> d=<span class="built_in">exgcd</span>(b,a%b),<span class="built_in">swap</span>(x,y),y-=a/b*x;</span><br><span class="line"><span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> a,b,gcd;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;a&gt;&gt;b)gcd=<span class="built_in">exgcd</span>(a,b),cout&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;y&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;gcd&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类欧几里得算法">类欧几里得算法</h2><p>这个算法是用来在 $O(\log n)$ 的时间内计算下面三个函数：<br>$$<br>f(a,b,c,n)=\sum_{i=0}^n\left\lfloor\frac{ai+b}{c}\right\rfloor\<br>g(a,b,c,n)=\sum_{i=0}^ni\left\lfloor\frac{ai+b}{c}\right\rfloor\<br>h(a,b,c,n)=\sum_{i=0}<sup>n\left\lfloor\frac{ai+b}{c}\right\rfloor</sup>2<br>$$</p><h3 id="推式子">推式子</h3><p>然后开始艰难地推式子…</p><p>先令 $s<sup>0(n)=n+1 , s</sup>1(n)=\frac{(n+1)n}{2}\ ,\ s^2(n)=\frac{n(n+1)(2n+1)}{6}$。</p><p>对于 $a&gt;c \or b&gt;c$ 的情况：<br>$$<br>\begin{aligned}<br>f(a,b,c,n)&amp;=\sum_{i=0}^n\left\lfloor\frac{ai+b}{c}\right\rfloor\cr<br>&amp;=\sum_{i=0}^n\left(\left\lfloor\frac{(a\bmod c)i+b\bmod c}{c}\right\rfloor+\left\lfloor\frac{a}{c}\right\rfloor i+\left\lfloor\frac{b}{c}\right\rfloor\right)\cr<br>&amp;=\left\lfloor\frac{b}{c}\right\rfloor\times s^0(n)+\left\lfloor\frac{a}{c}\right\rfloor \times s^1(n)+f(a\bmod c,b\bmod c,c,n)\cr<br>g(a,b,c,n)&amp;=\sum_{i=0}^ni\left\lfloor\frac{ai+b}{c}\right\rfloor\cr<br>&amp;=\sum_{i=0}^ni\left(\left\lfloor\frac{(a\bmod c)i+b\bmod c}{c}\right\rfloor+\left\lfloor\frac{a}{c}\right\rfloor i+\left\lfloor\frac{b}{c}\right\rfloor\right)\cr<br>&amp;=\sum_{i=0}^n\left(\left\lfloor\frac{a}{c}\right\rfloor i^2+\left\lfloor\frac{b}{c}\right\rfloor i\right)+g(a\bmod c,b\bmod c,c,n)\cr<br>&amp;=\left\lfloor\frac{a}{c}\right\rfloor\times s^2(n)+\left\lfloor\frac{b}{c}\right\rfloor\times s^1(n)+g(a\bmod c,b\bmod c,c,n)\cr<br>h(a,b,c,n)&amp;=\sum_{i=0}<sup>n\left\lfloor\frac{ai+b}{c}\right\rfloor</sup>2\cr<br>&amp;=\sum_{i=0}^n\left(\left\lfloor\frac{(a\bmod c)i+b\bmod c}{c}\right\rfloor+\left\lfloor\frac{a}{c}\right\rfloor i+\left\lfloor\frac{b}{c}\right\rfloor\right)^2\cr<br>&amp;=h(a\bmod c,b\bmod c,c,n)+2\left\lfloor\frac{a}{c}\right\rfloor g(a\bmod c,b\bmod c,c,n)+2\left\lfloor\frac{b}{c}\right\rfloor f(a\bmod c,b\bmod c,c,n)+\sum_{i=0}<sup>n\left(\left\lfloor\frac{a}{c}\right\rfloor</sup>2 i<sup>2+\left\lfloor\frac{b}{c}\right\rfloor</sup>2+2\left\lfloor\frac{a}{c}\right\rfloor \left\lfloor\frac{b}{c}\right\rfloor i\right)\cr<br>&amp;=s^0(n)\times \left\lfloor\frac{b}{c}\right\rfloor<sup>2+s</sup>1(n)\times 2\left\lfloor\frac{a}{c}\right\rfloor\left\lfloor\frac{b}{c}\right\rfloor+s^2(n)\times \left\lfloor\frac{a}{c}\right\rfloor^2+h(a\bmod c,b\bmod c,c,n)+2\left\lfloor\frac{a}{c}\right\rfloor g(a\bmod c,b\bmod c,c,n)+2\left\lfloor\frac{b}{c}\right\rfloor f(a\bmod c,b\bmod c,c,n)<br>\end{aligned}<br>$$<br>作者的手已经打废了。/kk</p><p>对于 $a&lt;c\and b&lt;c$ 的情况：</p><p>先看三个式子同样要用到的东西：</p><p>令 $\displaystyle m=\left\lfloor\frac{an+b}{c}\right\rfloor$。<br>$$<br>\begin{aligned}<br>\sum_{i=0}<sup>n\left[j&lt;\left\lfloor\frac{ai+b}{c}\right\rfloor\right]&amp;=\sum_{i=0}</sup>n\left[j+1\leq\frac{ai+b}{c}\right]\cr<br>&amp;=\sum_{i=0}^{n}\left[jc+c\leq ai+b\right]\cr<br>&amp;=\sum_{i=0}^{n}[ai\geq jc+c-b]\cr<br>&amp;=\sum_{i=0}^n[ai&gt;jc+c-b-1]\cr<br>&amp;=\sum_{i=0}^n\left[i&gt;\left\lfloor\frac{jc+c+b-1}{a}\right\rfloor\right]\cr<br>&amp;=n-\left\lfloor\frac{jc+c+b-1}{a}\right\rfloor<br>\end{aligned}<br>$$<br>然后逐个击破：<br>$$<br>\begin{aligned}<br>f(a,b,c,n)&amp;=\sum_{i=0}^n\left\lfloor\frac{ai+b}{c}\right\rfloor\cr<br>&amp;=\sum_{i=0}<sup>n\sum_{j=0}</sup>{\lfloor\frac{ai+b}{c}\rfloor-1}1\cr<br>&amp;=\sum_{i=0}<sup>n\sum_{j=0}</sup>{m-1}\left[j&lt;\left\lfloor\frac{ai+b}{c}\right\rfloor\right]\cr<br>&amp;=\sum_{j=0}<sup>{m-1}\sum_{i=0}</sup>n\left[j&lt;\left\lfloor\frac{ai+b}{c}\right\rfloor\right]\cr<br>&amp;=\sum_{j=0}^{m-1}\left(n-\left\lfloor\frac{jc+c+b-1}{a}\right\rfloor\right)\cr<br>&amp;=nm-f(c,c-b-1,a,m-1)\cr<br>g(a,b,c,n)&amp;=\sum_{i=0}^ni\left\lfloor\frac{ai+b}{c}\right\rfloor\cr<br>&amp;=\sum_{i=0}<sup>n\sum_{j=0}</sup>{\lfloor\frac{ai+b}{c}\rfloor-1}i\cr<br>&amp;=\sum_{i=0}<sup>n\sum_{j=0}</sup>{m-1}\left(\left[j&lt;\left\lfloor\frac{ai+b}{c}\right\rfloor\right]\times i\right)\cr<br>&amp;=\sum_{j=0}<sup>{m-1}\sum_{i=0}</sup>n\left(\left[j&lt;\left\lfloor\frac{ai+b}{c}\right\rfloor\right]\times i\right)\cr<br>&amp;=\sum_{j=0}<sup>{m-1}\sum_{i=0}</sup>n\left(\left[i&gt;\left\lfloor\frac{jc+c+b-1}{a}\right\rfloor\right]\times i\right)\cr<br>&amp;=\sum_{j=0}^{m-1}\frac{\left(n+\left\lfloor\frac{jc+c+b-1}{a}\right\rfloor+1\right)\times\left(n-\left\lfloor\frac{jc+c+b-1}{a}\right\rfloor\right)}{2}\cr<br>&amp;=\frac{\displaystyle\sum_{j=0}<sup>{m-1}\left(n</sup>2-\left\lfloor\frac{jc+c+b-1}{a}\right\rfloor^2+n-\left\lfloor\frac{jc+c+b-1}{a}\right\rfloor\right)}{2}\cr<br>&amp;=\frac{n(n+1)m-h(c,c-b-1,a,m-1)-f(c,c-b-1,a,m-1)}{2}\cr<br>h(a,b,c,n)&amp;=\sum_{i=0}<sup>n\left\lfloor\frac{ai+b}{c}\right\rfloor</sup>2\cr<br>&amp;=2\sum_{i=0}<sup>n\sum_{j=0}</sup>{\lfloor\frac{ai+b}{c}\rfloor-1}(j+1)-\sum_{i=0}^n\left\lfloor\frac{ai+b}{c}\right\rfloor\cr<br>&amp;=2\sum_{i=0}<sup>n\sum_{j=0}</sup>{m-1}\left(\left[j&lt;\left\lfloor\frac{ai+b}{c}\right\rfloor\right]\times (j+1)\right)-f(a,b,c,n)\cr<br>&amp;=2\sum_{j=0}<sup>{m-1}(j+1)\sum_{i=0}</sup>n\left[j&lt;\left\lfloor\frac{ai+b}{c}\right\rfloor\right]-f(a,b,c,n)\cr<br>&amp;=2\sum_{j=0}^{m-1}\left((j+1)\times \left(n-\left\lfloor\frac{jc+c+b-1}{a}\right\rfloor\right)\right)-f(a,b,c,n)\cr<br>&amp;=(m+1)mn-2\sum_{j=0}^{m-1}\left(j\left\lfloor\frac{jc+c+b-1}{a}\right\rfloor+\left\lfloor\frac{jc+c+b-1}{a}\right\rfloor\right)-f(a,b,c,n)\cr<br>&amp;=(m+1)mn-2g(c,c-b-1,a,m-1)-2f(c,c-b-1,a,m-1)-f(a,b,c,n)<br>\end{aligned}<br>$$<br>边界：<br>$$<br>\begin{aligned}<br>f(0,b,c,n)&amp;=s^0(n)\times \left\lfloor\frac{b}{c}\right\rfloor\cr<br>g(0,b,c,n)&amp;=s^1(n)\times \left\lfloor\frac{b}{c}\right\rfloor\cr<br>h(0,b,c,n)&amp;=s<sup>0(n)\times\left\lfloor\frac{b}{c}\right\rfloor</sup>2\cr<br>\end{aligned}<br>$$<br>写完这个东西就去复习 CSP 了。</p><h3 id="板子题：P5170">板子题：P5170</h3><p>没啥可说的，注意取模即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">long</span> <span class="type">long</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">R</span>&#123;</span><br><span class="line"><span class="type">int</span> f,g,h;</span><br><span class="line">&#125;ans;</span><br><span class="line"><span class="function">R <span class="title">getr</span><span class="params">(<span class="type">int</span> _f,<span class="type">int</span> _g,<span class="type">int</span> _h)</span></span>&#123;</span><br><span class="line">R temp;</span><br><span class="line">temp.f=_f;</span><br><span class="line">temp.g=_g;</span><br><span class="line">temp.h=_h;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> I2=<span class="number">499122177</span>,I6=<span class="number">166374059</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">s0</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> k+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">s1</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> k*(k+<span class="number">1</span>)%mod*I2%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">s2</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> k*(k+<span class="number">1</span>)%mod*(<span class="number">2</span>*k+<span class="number">1</span>)%mod*I6%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">R <span class="title">simgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> F=<span class="number">0</span>,G=<span class="number">0</span>,H=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">0</span>)<span class="keyword">return</span> <span class="built_in">getr</span>((b/c)*<span class="built_in">s0</span>(n)%mod,(b/c)*<span class="built_in">s1</span>(n)%mod,(b/c)*(b/c)%mod*<span class="built_in">s0</span>(n)%mod);</span><br><span class="line">R res;</span><br><span class="line"><span class="keyword">if</span>(a&gt;=c||b&gt;=c)&#123;</span><br><span class="line">res=<span class="built_in">simgcd</span>(a%c,b%c,c,n);</span><br><span class="line">F=res.f+b/c*<span class="built_in">s0</span>(n)%mod+a/c*<span class="built_in">s1</span>(n)%mod;</span><br><span class="line">G=res.g+a/c*<span class="built_in">s2</span>(n)%mod+b/c*<span class="built_in">s1</span>(n)%mod;</span><br><span class="line">H=b/c*<span class="number">2</span>*res.f%mod+a/c*<span class="number">2</span>*res.g%mod+res.h+b/c*(b/c)%mod*<span class="built_in">s0</span>(n)%mod+b/c*(a/c)*<span class="number">2</span>%mod*<span class="built_in">s1</span>(n)%mod+(a/c)*(a/c)%mod*<span class="built_in">s2</span>(n)%mod;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">getr</span>(F%mod,G%mod,H%mod);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> m=(a*n+b)/c;</span><br><span class="line">res=<span class="built_in">simgcd</span>(c,c-b<span class="number">-1</span>,a,m<span class="number">-1</span>);</span><br><span class="line">F=n*m%mod-res.f%mod;</span><br><span class="line">G=(n*(n+<span class="number">1</span>)%mod*m%mod-res.h%mod-res.f%mod)*I2%mod;</span><br><span class="line">H=(m+<span class="number">1</span>)*m%mod*n%mod+<span class="number">-2</span>*res.g%mod<span class="number">-2</span>*res.f%mod-F%mod;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">getr</span>((F%mod+mod)%mod,(G%mod+mod)%mod,(H%mod+mod)%mod);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T,aa,bb,cc,nn;</span><br><span class="line">cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">cin&gt;&gt;nn&gt;&gt;aa&gt;&gt;bb&gt;&gt;cc;</span><br><span class="line">ans=<span class="built_in">simgcd</span>(aa,bb,cc,nn);</span><br><span class="line">cout&lt;&lt;(ans.f%mod)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;(ans.h%mod)&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;(ans.g%mod)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="应用：P5171">应用：P5171</h3><p>CSP 复习前的最后一道题。</p><p>考虑分开讨论 $x,y$。</p><p>之前好像有证明 $\gcd(a,b)=1$ 的特殊情况的式子。</p><p>先讨论 $y$ 的范围：<br>$$<br>ax+by\leq c\Rightarrow by\leq c-ax\Rightarrow y\leq\left\lfloor\frac{c-ax}{b}\right\rfloor<br>$$<br>所以对于 $y$ ，合法的 $x$ 至多有 $\left\lfloor\frac{c-ax}{b}\right\rfloor+1$ 个。</p><p>再来讨论 $x$ 的范围。考虑当 $y=0$ 的极限情况，$x$ 最大就是 $\lfloor\frac{c}{a}\rfloor$，所以 $x\in[0,\left\lfloor\frac{c}{a}\right\rfloor]$。</p><p>所以式子列出来就是：<br>$$<br>\sum_{x=0}^{\left\lfloor\frac{c}{a}\right\rfloor}\left(\left\lfloor\frac{c-ax}{b}\right\rfloor+1\right)<br>$$<br>因为 $-a&lt;0$，要进行转化。考虑此时的 $x$ 和 $y$ 无论以哪个作为对象都能得到答案，所以此时的 $a,b$ 互换是没有影响的，所以可以将式子改写为：<br>$$<br>\sum_{x=0}<sup>{\left\lfloor\frac{c}{a}\right\rfloor}\left(\left\lfloor\frac{(b-a)x+c}{b}\right\rfloor-x\right)+s</sup>0\left(\left\lfloor\frac{c}{a}\right\rfloor\right)=\sum_{x=0}<sup>{\left\lfloor\frac{c}{a}\right\rfloor}\left\lfloor\frac{(b-a)x+c}{b}\right\rfloor-s</sup>1\left(\left\lfloor\frac{c}{a}\right\rfloor\right)+s^0\left(\left\lfloor\frac{c}{a}\right\rfloor\right)<br>$$<br>然后就可以求解了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P5171 Earthquake</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P5171</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 250 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">s0</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> k+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">s1</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> k*(k+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">simgcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c,<span class="type">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a&gt;=c||b&gt;=c)res+=<span class="built_in">s1</span>(n)*(a/c)+<span class="built_in">s0</span>(n)*(b/c),a%=c,b%=c;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">0</span>)<span class="keyword">return</span> <span class="built_in">s0</span>(n)*(b/c)+res;</span><br><span class="line"><span class="type">int</span> m=(a*n+b)/c;</span><br><span class="line"><span class="keyword">return</span> m*n-<span class="built_in">simgcd</span>(c,c-b<span class="number">-1</span>,a,m<span class="number">-1</span>)+res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> A,B,C;</span><br><span class="line">cin&gt;&gt;A&gt;&gt;B&gt;&gt;C;</span><br><span class="line"><span class="keyword">if</span>(A&gt;B)<span class="built_in">swap</span>(A,B);</span><br><span class="line"><span class="type">int</span> ans=<span class="built_in">simgcd</span>(B-A,C,B,C/A);</span><br><span class="line">ans-=<span class="built_in">s1</span>(C/A)-C/A;</span><br><span class="line">cout&lt;&lt;ans+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="鸽">鸽</h3><p>这里应该还有 $3$ 道类欧没有写，CSP 回来之后再写，祝 RP++！</p><p>没写的：AT_abc283_h，P5172，P5179。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;鲜花&lt;/h1&gt;
&lt;p&gt;从树论赶来的，感觉这个东西没什么用啊…QwQ&lt;/p&gt;
&lt;h1&gt;欧几里得&lt;/h1&gt;
&lt;h2 id=&quot;欧几里得算法&quot;&gt;欧几里得算法&lt;/h2&gt;
&lt;p&gt;也称辗转相除法。&lt;/p&gt;
&lt;p&gt;就是一个简单的式子：&lt;br&gt;
$$&lt;br&gt;
&#92;gcd(a,b)=&#92;gcd(</summary>
      
    
    
    
    <category term="OI" scheme="http://blog.eltaos.top/categories/OI/"/>
    
    
    <category term="OI" scheme="http://blog.eltaos.top/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>search-Notes</title>
    <link href="http://blog.eltaos.top/2023/search-Notes/"/>
    <id>http://blog.eltaos.top/2023/search-Notes/</id>
    <published>2023-10-16T02:28:39.000Z</published>
    <updated>2023-11-02T12:34:05.491Z</updated>
    
    <content type="html"><![CDATA[<p>DFS 和 BFS 就不写了。</p><h1>记忆化搜索</h1><p>就是加个 <code>unordered_map</code>。</p><h2 id="例题：P8658">例题：P8658</h2><p>实际上可能是个错题，但是记忆化搜索是能过原数据的。</p><p>考虑加记忆化之后判断一下 <code>LO*</code>，<code>L*L</code>，<code>*OL</code> 等情况，然后再判断一下没有 <code>*</code> 的情况即可。</p><p>只用一个小剪枝：当检测到一次必胜的走法直接返回。</p><p>注意这道题是 $0$，$1$ 存的，所以记忆化的值要加上或减去一个常量。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P8658 [蓝桥杯 2017 国 A] 填字母游戏</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P8658</span></span><br><span class="line"><span class="comment">// Memory Limit: 255 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,siz;</span><br><span class="line">unordered_map&lt;string,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(string st)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[st])<span class="keyword">return</span> mp[st]<span class="number">-2</span>;</span><br><span class="line"><span class="keyword">if</span>(st.<span class="built_in">find</span>(<span class="string">&quot;LO*&quot;</span>)!=string::npos||st.<span class="built_in">find</span>(<span class="string">&quot;L*L&quot;</span>)!=string::npos||st.<span class="built_in">find</span>(<span class="string">&quot;*OL&quot;</span>)!=string::npos||st.<span class="built_in">find</span>(<span class="string">&quot;L*L&quot;</span>)!=string::npos)&#123;</span><br><span class="line">mp[st]=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(st.<span class="built_in">find</span>(<span class="string">&quot;*&quot;</span>)==string::npos&amp;&amp;st.<span class="built_in">find</span>(<span class="string">&quot;LOL&quot;</span>)==string::npos)&#123;</span><br><span class="line">mp[st]=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//if(st.find(&quot;LO*&quot;)!=string::npos||st.find(&quot;L*L&quot;)!=string::npos||st.find(&quot;*OL&quot;)!=string::npos)return mp[st]=1;</span></span><br><span class="line"><span class="type">int</span> maxx=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> &amp;i:st)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">i=<span class="string">&#x27;L&#x27;</span>;</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,-<span class="built_in">dfs</span>(st));</span><br><span class="line">i=<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(maxx==<span class="number">1</span>)&#123;</span><br><span class="line">mp[st]=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">i=<span class="string">&#x27;O&#x27;</span>;</span><br><span class="line">maxx=<span class="built_in">max</span>(maxx,-<span class="built_in">dfs</span>(st));</span><br><span class="line">i=<span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(maxx==<span class="number">1</span>)&#123;</span><br><span class="line">mp[st]=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">mp[st]=maxx+<span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> maxx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">string s;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">while</span>(n--)&#123;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">siz=s.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span>(siz&lt;<span class="number">3</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="built_in">dfs</span>(s)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题：P4850">例题：P4850</h2><p>Hanghang PPT 上的题。</p><p>考虑 dp。设 $f_{x,y,i,j}$ 为左上顶点为 $(x,y)$，右下顶点为 $(i,j)$ 的矩形的最小花费，然后记忆化搜索式转移即可。</p><p>注意要用矩形前缀和优化 $O(1)$ 计算当前矩形一定会产生的代价。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P4850 [IOI2009] Raisins</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P4850</span></span><br><span class="line"><span class="comment">// Memory Limit: 128 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 5000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="type">int</span> s[<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="type">int</span> f[<span class="number">51</span>][<span class="number">51</span>][<span class="number">51</span>][<span class="number">51</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y,<span class="type">int</span> i,<span class="type">int</span> j)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f[x][y][i][j])<span class="keyword">return</span> f[x][y][i][j];</span><br><span class="line"><span class="keyword">if</span>(x==i&amp;&amp;y==j)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">f[x][y][i][j]=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=x;k&lt;i;k++)f[x][y][i][j]=<span class="built_in">min</span>(f[x][y][i][j],<span class="built_in">dfs</span>(x,y,k,j)+<span class="built_in">dfs</span>(k+<span class="number">1</span>,y,i,j));</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=y;k&lt;j;k++)f[x][y][i][j]=<span class="built_in">min</span>(f[x][y][i][j],<span class="built_in">dfs</span>(x,y,i,k)+<span class="built_in">dfs</span>(x,k+<span class="number">1</span>,i,j));</span><br><span class="line">f[x][y][i][j]+=s[i][j]+s[x<span class="number">-1</span>][y<span class="number">-1</span>]-s[i][y<span class="number">-1</span>]-s[x<span class="number">-1</span>][j];</span><br><span class="line"><span class="keyword">return</span> f[x][y][i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)cin&gt;&gt;s[i][j],a[i][j]=s[i][j];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)s[i][j]+=s[i][j<span class="number">-1</span>]+s[i<span class="number">-1</span>][j]-s[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>,n,m);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不找其他题了。有些记搜可以状压存。</p><h1>迭代加深</h1><p>又名 IDDFS。</p><p>DFS 慢的一个原因是可能陷入一个不优的解里出不来了，于是给 DFS 的深度限定一个 lim，到 lim 之后就返回，然后逐步增加 lim 即可。</p><p>但是判断无解的效率大大下降，所以要谨慎使用。</p><h2 id="例题：UVA529">例题：UVA529</h2><p>迭代加深板题。</p><p>枚举深度即可。</p><p>几个优化：</p><ul class="lvl-0"><li class="lvl-2"><p>当当前的值在当前的深度限制下怎么加也加不到 $n$ 时，返回。</p></li><li class="lvl-2"><p>深度限制从 $\log_2n$ 开始。</p></li></ul><p>注意 UVA 不允许有多余空格，sb。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Addition Chains</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/UVA529</span></span><br><span class="line"><span class="comment">// Memory Limit: 0 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 3000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a[<span class="number">1001</span>],lim,n;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">1001</span>][<span class="number">10001</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dep)</span></span>&#123;</span><br><span class="line"><span class="comment">//if(vis[dep][a[dep]])return 0;</span></span><br><span class="line"><span class="comment">//vis[dep][a[dep]]=1;</span></span><br><span class="line"><span class="keyword">if</span>(dep&gt;lim)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[dep]==n)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(a[dep]&lt;&lt;(lim-dep+<span class="number">1</span>)&lt;n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="comment">//set&lt;int&gt; s;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=dep;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">a[dep+<span class="number">1</span>]=a[i]+a[j];</span><br><span class="line"><span class="comment">//if(s.count(a[dep+1]))continue;</span></span><br><span class="line"><span class="comment">//s.insert(a[dep+1]);</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">dfs</span>(dep+<span class="number">1</span>))<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">a[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line"><span class="keyword">if</span>(!n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(lim=<span class="built_in">log2</span>(n);;lim++)<span class="keyword">if</span>(<span class="built_in">dfs</span>(<span class="number">1</span>))<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=lim;i++)cout&lt;&lt;a[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;a[lim+<span class="number">1</span>]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>折半搜索</h1><p>如果能记录下一半的信息，那么就可以使用折半搜索。</p><p>就是将前一半的所有情况记录下来，然后把另一半的情况与前一半的情况一一对应。</p><h2 id="例题：P9234">例题：P9234</h2><p>sb 剪枝题。</p><p>剪枝的地方在代码中已经标出。然后尽量让 <code>unordered_map</code> 的访问次数变少。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P9234 [蓝桥杯 2023 省 A] 买瓜</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P9234</span></span><br><span class="line"><span class="comment">// Memory Limit: 256 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">int</span> n,a[<span class="number">31</span>],m,mid,temp;</span><br><span class="line"><span class="type">int</span> ans1[<span class="number">30000001</span>];</span><br><span class="line"><span class="type">int</span> cnt1,cnt2,sum2;</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; vis1;</span><br><span class="line">unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Ldfs</span><span class="params">(<span class="type">int</span> sum,<span class="type">int</span> dep,<span class="type">int</span> ci)</span></span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;dep&lt;&lt;&quot; &quot;&lt;&lt;sum&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(dep&gt;mid)&#123;</span><br><span class="line"><span class="keyword">if</span>(sum&gt;m||sum+sum2&lt;m)<span class="keyword">return</span>;<span class="comment">//1(用前缀和更佳)</span></span><br><span class="line">temp=vis1[sum];</span><br><span class="line"><span class="keyword">if</span>(temp)ans1[temp]=<span class="built_in">min</span>(ans1[temp],ci);</span><br><span class="line"><span class="keyword">else</span> ans1[++cnt1]=ci,vis1[sum]=cnt1;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Ldfs</span>(sum+a[dep],dep+<span class="number">1</span>,ci),<span class="built_in">Ldfs</span>(sum+a[dep]/<span class="number">2</span>,dep+<span class="number">1</span>,ci+<span class="number">1</span>),<span class="built_in">Ldfs</span>(sum,dep+<span class="number">1</span>,ci);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">1e9</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Rdfs</span><span class="params">(<span class="type">int</span> sum,<span class="type">int</span> dep,<span class="type">int</span> ci)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep&gt;n)&#123;</span><br><span class="line"><span class="keyword">if</span>(sum&gt;m)<span class="keyword">return</span>;<span class="comment">//2</span></span><br><span class="line">temp=vis1[m-sum];</span><br><span class="line"><span class="keyword">if</span>(temp)ans=<span class="built_in">min</span>(ci+ans1[temp],ans);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Rdfs</span>(sum+a[dep],dep+<span class="number">1</span>,ci),<span class="built_in">Rdfs</span>(sum+a[dep]/<span class="number">2</span>,dep+<span class="number">1</span>,ci+<span class="number">1</span>),<span class="built_in">Rdfs</span>(sum,dep+<span class="number">1</span>,ci);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//记得m*=2,a[i]*=2</span></span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">if</span>(m==<span class="number">0</span>||m==n)cout&lt;&lt;<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(m*<span class="number">2</span>==n)cout&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">m*=<span class="number">2</span>;</span><br><span class="line">mid=n/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i],a[i]*=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());<span class="comment">//3</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=mid+<span class="number">1</span>;i&lt;=n;i++)sum2+=a[i];<span class="comment">//1</span></span><br><span class="line"><span class="built_in">Ldfs</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>),<span class="built_in">Rdfs</span>(<span class="number">0</span>,mid+<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//if(val1.count(m))ans=min(ans,ans1[vis1[m]]);</span></span><br><span class="line"><span class="comment">//if(val2.count(m))ans=min(ans,ans2[vis2[m]]);</span></span><br><span class="line"><span class="comment">//for(it=val1.begin();it!=val1.end();it++)&#123;</span></span><br><span class="line"><span class="comment">//if(val2.count(m-*it))ans=min(ans1[vis1[*it]]+ans2[vis2[m-*it]],ans);//,cerr&lt;&lt;ans1[vis1[*it]]&lt;&lt;&quot; &quot;&lt;&lt;ans2[vis2[m-*it]]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">//cerr&lt;&lt;*it&lt;&lt;&quot; &quot;&lt;&lt;ans&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//for(int i=0;i&lt;n;i++)cout&lt;&lt;(1&lt;&lt;i)&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">1e9</span>)ans=<span class="number">-1</span>;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以用前缀和做到更优秀的剪枝。</p><h2 id="例题：AGC026C">例题：AGC026C</h2><p>折半搜索 + hash 经典题。</p><p>可以先正着计算左边所有情况时的红蓝哈希值，然后右边反着搜索出红蓝哈希值，由于字符串长度为偶数，所以可以发现 $L_{red}=R_{blue}\and R_{red}=L_{blue}$ 时满足题目条件。可以稍微画一下图来理解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: [AGC026C] String Coloring</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/AT_agc026_c</span></span><br><span class="line"><span class="comment">// Memory Limit: 1 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 3000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long</span></span><br><span class="line">ull mask=chrono::steady_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line"><span class="function">ull <span class="title">gethash</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">x^=mask;</span><br><span class="line">x^=x&lt;&lt;<span class="number">13</span>;</span><br><span class="line">x^=x&gt;&gt;<span class="number">7</span>;</span><br><span class="line">x^=mask;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">unordered_map&lt;ull,unordered_map&lt;ull,<span class="type">int</span>&gt; &gt; mp;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">char</span> c[<span class="number">51</span>];</span><br><span class="line"><span class="function">ull <span class="title">gh</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> dep)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">gethash</span>((x&lt;&lt;<span class="number">1</span>)+((c[dep]+<span class="number">1</span>)^<span class="built_in">gethash</span>((ull)c[dep]&lt;&lt;<span class="number">2</span>))+<span class="number">14</span>);</span><br><span class="line">&#125;</span><br><span class="line">pair&lt;ull,ull&gt; temp;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Ldfs</span><span class="params">(<span class="type">int</span> dep,ull rhash,ull bhash)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep&gt;n)&#123;</span><br><span class="line">mp[rhash][bhash]=mp[rhash][bhash]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Ldfs</span>(dep+<span class="number">1</span>,<span class="built_in">gh</span>(rhash,dep),bhash);</span><br><span class="line"><span class="built_in">Ldfs</span>(dep+<span class="number">1</span>,rhash,<span class="built_in">gh</span>(bhash,dep));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Rdfs</span><span class="params">(<span class="type">int</span> dep,ull rhash,ull bhash)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep&lt;=n)&#123;</span><br><span class="line">ans+=mp[rhash][bhash];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Rdfs</span>(dep<span class="number">-1</span>,<span class="built_in">gh</span>(rhash,dep),bhash);</span><br><span class="line"><span class="built_in">Rdfs</span>(dep<span class="number">-1</span>,rhash,<span class="built_in">gh</span>(bhash,dep));</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*<span class="number">2</span>;i++)cin&gt;&gt;c[i];</span><br><span class="line"><span class="built_in">Ldfs</span>(<span class="number">1</span>,<span class="number">998244353ull</span>,<span class="number">998244353ull</span>);</span><br><span class="line"><span class="built_in">Rdfs</span>(n*<span class="number">2</span>,<span class="number">998244353ull</span>,<span class="number">998244353ull</span>);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题：CF1423L">例题：CF1423L</h2><p>考虑先预处理出前 $B$ 个开关的所有可能情况，然后后面的询问再处理后面的情况。时间复杂度 $O(2^B+q\times 2^{S-B})$。</p><p>发现在极限数据下 $B=20$ 最优，所以取 $B=\frac{2S}{3}$。</p><p>用 bitset 维护每种情况即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Light switches</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/CF1423L</span></span><br><span class="line"><span class="comment">// Memory Limit: 1000 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 3000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">unordered_map&lt;bitset&lt;1001&gt;,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="type">int</span> n,s,d,t;</span><br><span class="line"><span class="type">int</span> id,lim;</span><br><span class="line">bitset&lt;1001&gt; now,Q,S[<span class="number">31</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Ldfs</span><span class="params">(<span class="type">int</span> dep,<span class="type">int</span> ci=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep&gt;lim)&#123;</span><br><span class="line"><span class="keyword">if</span>(!mp[now])mp[now]=ci+<span class="number">1</span>;<span class="comment">//注意ci为0也有可能</span></span><br><span class="line"><span class="keyword">else</span> mp[now]=<span class="built_in">min</span>(mp[now],ci+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Ldfs</span>(dep+<span class="number">1</span>,ci);</span><br><span class="line">now^=S[dep];</span><br><span class="line"><span class="built_in">Ldfs</span>(dep+<span class="number">1</span>,ci+<span class="number">1</span>);</span><br><span class="line">now^=S[dep];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Rdfs</span><span class="params">(<span class="type">int</span> dep,<span class="type">int</span> ci=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep&gt;lim)&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[now])ans=<span class="built_in">min</span>(mp[now]+ci<span class="number">-1</span>,ans);<span class="comment">//,cerr&lt;&lt;now&lt;&lt;&quot; &quot;&lt;&lt;mp[now]&lt;&lt;&quot; &quot;&lt;&lt;ans&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Rdfs</span>(dep+<span class="number">1</span>,ci);</span><br><span class="line">now^=S[dep];</span><br><span class="line"><span class="built_in">Rdfs</span>(dep+<span class="number">1</span>,ci+<span class="number">1</span>);</span><br><span class="line">now^=S[dep];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;s&gt;&gt;d;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=s;i++)&#123;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=t;j++)cin&gt;&gt;id,S[i][id]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">lim=s*<span class="number">2</span>/<span class="number">3</span>;</span><br><span class="line"><span class="built_in">Ldfs</span>(<span class="number">1</span>);</span><br><span class="line">lim=s;<span class="comment">//注意上界是s，不是n ！！！！！！</span></span><br><span class="line"><span class="type">int</span> st=s*<span class="number">2</span>/<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=d;i++)&#123;</span><br><span class="line">cin&gt;&gt;t;</span><br><span class="line">ans=<span class="number">1e9</span>;</span><br><span class="line">now.<span class="built_in">reset</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=t;j++)cin&gt;&gt;id,now[id]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;now&lt;&lt;&quot; &quot;&lt;&lt;mp[now]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="built_in">Rdfs</span>(st);</span><br><span class="line"><span class="keyword">if</span>(ans==<span class="number">1e9</span>)ans=<span class="number">-1</span>;</span><br><span class="line">cout&lt;&lt;ans&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>剪枝</h1><p>有两种剪枝方式。</p><p>第一种是最优性剪枝，即如果现在的情况已经无论如何也不能达到现在的最优情况时，直接退出。</p><p>第二种是可行性剪枝，即如果当前的情况怎么也不可能使最后搜索出的结果可行，直接退出。</p><p>当然还有一些玄学剪枝。</p><h2 id="例题：P1120">例题：P1120</h2><p>不想说了，sb 剪枝题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P1120 小木棍</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P1120</span></span><br><span class="line"><span class="comment">// Memory Limit: 128 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 260000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">bitset&lt;71&gt; vis;</span><br><span class="line"><span class="type">int</span> lim,n,sum,a[<span class="number">71</span>],nxt[<span class="number">71</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> k,<span class="type">int</span> pre,<span class="type">int</span> la,<span class="type">int</span> re)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(re==<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(k+<span class="number">1</span>==sum/lim)&#123;</span><br><span class="line">cout&lt;&lt;lim;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//pre=nxt[pre];</span></span><br><span class="line"><span class="keyword">while</span>(vis[pre])pre++;</span><br><span class="line">vis[pre]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(k+<span class="number">1</span>,pre,pre,lim-a[pre]);</span><br><span class="line">vis[pre]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> st=<span class="built_in">lower_bound</span>(a+la+<span class="number">1</span>,a+n+<span class="number">1</span>,re,<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;())-a;</span><br><span class="line"><span class="comment">//if(la==n)return 0;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=st;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>((re-a[i]&gt;=a[n]||re-a[i]==<span class="number">0</span>)&amp;&amp;!vis[i])&#123;</span><br><span class="line">vis[i]=<span class="number">1</span>,<span class="built_in">dfs</span>(k,pre,i,re-a[i]),vis[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a[i]==re)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">i=nxt[i]<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i],lim=<span class="built_in">max</span>(a[i],lim),sum+=a[i];</span><br><span class="line"><span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line"><span class="type">int</span> ha=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[ha]!=a[i])&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=ha;j&lt;i;j++)nxt[j]=i;<span class="comment">//,cerr&lt;&lt;j&lt;&lt;&quot; -&gt; &quot;&lt;&lt;i&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">ha=i;</span><br><span class="line">&#125;</span><br><span class="line">nxt[i]=i+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(;;lim++)&#123;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;lim&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(sum%lim==<span class="number">0</span>)vis[<span class="number">1</span>]=<span class="number">1</span>,<span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,lim-a[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>A*</h1><p>属于是一种对优先队列 BFS 的优化。</p><p>在此之前先了解 BFS 的底层工作原理：让队列内的元素有序。</p><p>所以我们可以定义一个估价函数来估算还有好久能到终点，再按估价函数排序，这样能更快的达到终点。</p><p>如果估价函数 $h^<em>$ 满足 $h(x)\leq h^</em>(x)$，那么保证能找到最优解。在满足能找到最优解的前提下，如果 $h^<em>$ 还满足 $h^</em>(v)\leq dis_{u,v}+h^*(u)$，那么可以保证队列内不会重复加入元素的同时能找到最优解，可以加 $vis$ 标记。</p><h2 id="例题：P1379">例题：P1379</h2><p>不难发现如果 $h^*$ 函数定义为有几个数字与最终状态不同，这个估价函数能满足以上两个条件，那么复杂度就能做到 $O(k\log k)$，其中 $k$ 为理论最大答案。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P1379 八数码难题</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P1379</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string G=<span class="string">&quot;123804765&quot;</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">h_star</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)<span class="keyword">if</span>(s[i]!=G[i])res++;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">string now;</span><br><span class="line"><span class="type">int</span> h,dis,_0;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt;(<span class="type">const</span> node &amp;a) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> h&gt;a.h;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">node <span class="title">getnode</span><span class="params">(string s,<span class="type">int</span> H,<span class="type">int</span> DIS,<span class="type">int</span> __0)</span></span>&#123;</span><br><span class="line">node temp;</span><br><span class="line">temp.now=s;</span><br><span class="line">temp.h=H;</span><br><span class="line">temp.dis=DIS;</span><br><span class="line">temp._0=__0;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;node,vector&lt;node&gt;,less&lt;node&gt; &gt; q;</span><br><span class="line">string org;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x<span class="number">-1</span>)*<span class="number">3</span>+y;</span><br><span class="line">&#125;</span><br><span class="line">unordered_map&lt;string,<span class="type">int</span>&gt; dis;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">A_star</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(org[i]==<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">getnode</span>(org,<span class="built_in">h_star</span>(org),<span class="number">0</span>,i+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">node u=q.<span class="built_in">top</span>();q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">//cerr&lt;&lt;u.now&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(u.now==G)&#123;</span><br><span class="line">cout&lt;&lt;u.dis;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x0=(u._0+<span class="number">2</span>)/<span class="number">3</span>,y0=(u._0<span class="number">-1</span>)%<span class="number">3</span>+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//cout&lt;&lt;x0&lt;&lt;&quot; &quot;&lt;&lt;y0&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> nowx=x0+dx[i],nowy=y0+dy[i];</span><br><span class="line"><span class="comment">//cerr&lt;&lt;nowx&lt;&lt;&quot; &quot;&lt;&lt;nowy&lt;&lt;&quot; &quot;&lt;&lt;calc(nowx,nowy)&lt;&lt;&quot; zfyNB\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(nowx&lt;<span class="number">1</span>||nowx&gt;<span class="number">3</span>||nowy&lt;<span class="number">1</span>||nowy&gt;<span class="number">3</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">swap</span>(u.now[<span class="built_in">calc</span>(x0,y0)<span class="number">-1</span>],u.now[<span class="built_in">calc</span>(nowx,nowy)<span class="number">-1</span>]);</span><br><span class="line"><span class="keyword">if</span>(!dis[u.now]||dis[u.now]&gt;u.dis+<span class="number">1</span>)q.<span class="built_in">push</span>(<span class="built_in">getnode</span>(u.now,<span class="built_in">h_star</span>(u.now)+u.dis+<span class="number">1</span><span class="comment">/*注意这个地方是加全局的估价，不是剩余的*/</span>,u.dis+<span class="number">1</span>,<span class="built_in">calc</span>(nowx,nowy))),dis[u.now]=u.dis+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">swap</span>(u.now[<span class="built_in">calc</span>(x0,y0)<span class="number">-1</span>],u.now[<span class="built_in">calc</span>(nowx,nowy)<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;org;</span><br><span class="line"><span class="built_in">A_star</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题：P2901">例题：P2901</h2><p>考虑设计估价函数。</p><p>可以在开始的时候反向建边处理出最短路，显然发现这个最短路满足估价函数的性质。</p><p>那么就可以 A* 了，先预处理出 $h^<em>$ 函数，然后用 A</em> 求即可。如果已经到了 $k$ 次终点，可以直接输出加退出。</p><p>发现一个节点在保证只遍历 $k$ 次的情况下可以找出最优解（就是相当于跑 $k$ 次 A*），那么，可以对 $vis$ 数组做出限制，时间复杂度 $O(mk\log n)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P2901 [USACO08MAR] Cow Jogging G</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P2901</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,k;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link,w;</span><br><span class="line">&#125;E[<span class="number">20001</span>],I[<span class="number">20001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">10001</span>],headI[<span class="number">10001</span>],tot,totI;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">E[tot].w=w;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addI</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">I[++totI].link=headI[u];</span><br><span class="line">I[totI].to=v;</span><br><span class="line">I[totI].w=w;</span><br><span class="line">headI[u]=totI;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">po</span>&#123;</span><br><span class="line"><span class="type">int</span> dis,id;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &gt;(<span class="type">const</span> po &amp;a) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dis&gt;a.dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Apo</span>&#123;</span><br><span class="line"><span class="type">int</span> dis,id,h;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &gt;(<span class="type">const</span> Apo &amp;a) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> h&gt;a.h;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">po <span class="title">getpo</span><span class="params">(<span class="type">int</span> _dis,<span class="type">int</span> _id)</span></span>&#123;</span><br><span class="line">po p;</span><br><span class="line">p.dis=_dis;</span><br><span class="line">p.id=_id;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Apo <span class="title">getApo</span><span class="params">(<span class="type">int</span> _dis,<span class="type">int</span> _id,<span class="type">int</span> _h)</span></span>&#123;</span><br><span class="line">Apo p;</span><br><span class="line">p.dis=_dis;</span><br><span class="line">p.id=_id;</span><br><span class="line">p.h=_h;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;po,vector&lt;po&gt;,greater&lt;po&gt; &gt; qI;</span><br><span class="line"><span class="type">int</span> h_star[<span class="number">10001</span>],visI[<span class="number">10001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dij</span><span class="params">()</span></span>&#123;<span class="comment">//calc 1-&gt;n</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)h_star[i]=<span class="number">1e9</span>;</span><br><span class="line">qI.<span class="built_in">push</span>(<span class="built_in">getpo</span>(<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">h_star[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!qI.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> u=qI.<span class="built_in">top</span>().id;qI.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(visI[u])<span class="keyword">continue</span>;</span><br><span class="line">visI[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=headI[u];i;i=I[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(h_star[I[i].to]&gt;h_star[u]+I[i].w)&#123;</span><br><span class="line">h_star[I[i].to]=h_star[u]+I[i].w;</span><br><span class="line">qI.<span class="built_in">push</span>(<span class="built_in">getpo</span>(h_star[I[i].to],I[i].to));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;Apo,vector&lt;Apo&gt;,greater&lt;Apo&gt; &gt; q;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">10001</span>],cnt,vis[<span class="number">10001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">A_star</span><span class="params">()</span></span>&#123;<span class="comment">//calc n-&gt;1 1~kth</span></span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">getApo</span>(<span class="number">0</span>,n,h_star[n]));</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">Apo u=q.<span class="built_in">top</span>();q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">//cerr&lt;&lt;u.id&lt;&lt;&quot; &quot;&lt;&lt;u.dis&lt;&lt;&quot; &quot;&lt;&lt;u.h&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(u.id==<span class="number">1</span>)&#123;</span><br><span class="line">ans[++cnt]=u.dis;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;u.id&lt;&lt;&quot; &quot;&lt;&lt;cnt&lt;&lt;&quot; &quot;&lt;&lt;u.dis&lt;&lt;&quot; in\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(cnt==k)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(vis[u.id]&gt;k)<span class="keyword">continue</span>;<span class="comment">//一个点最多经过k次</span></span><br><span class="line">vis[u.id]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u.id];i;i=E[i].link)&#123;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">getApo</span>(u.dis+E[i].w,E[i].to,u.dis+E[i].w+h_star[E[i].to]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line"><span class="built_in">addI</span>(y,x,z);</span><br><span class="line"><span class="built_in">addE</span>(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dij</span>();</span><br><span class="line"><span class="comment">//for(int i=1;i&lt;=n;i++)cout&lt;&lt;h_star[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="built_in">A_star</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(!ans[i])ans[i]=<span class="number">-1</span>;</span><br><span class="line">cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题：P2324">例题：P2324</h2><p>和 P1379 差不多。使用 A* 时注意需要剪枝，即估价函数超过 $15+1=16$ 时直接退出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P2324 [SCOI2005] 骑士精神</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P2324</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">string G=<span class="string">&quot;111110111100*110000100000&quot;</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">h_star</span><span class="params">(string s)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;<span class="built_in">i</span>&lt;<span class="number">25</span>;i++)<span class="keyword">if</span>(G[i]!=s[i])res++;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">po</span>&#123;</span><br><span class="line">string now;</span><br><span class="line"><span class="type">int</span> dis,h,_0;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &gt;(<span class="type">const</span> po &amp;a) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> h&gt;a.h;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">po <span class="title">getpo</span><span class="params">(string s,<span class="type">int</span> _dis,<span class="type">int</span> _h,<span class="type">int</span> __0)</span></span>&#123;</span><br><span class="line">po p;</span><br><span class="line">p.now=s;</span><br><span class="line">p.dis=_dis;</span><br><span class="line">p.h=_h;</span><br><span class="line">p._0=__0;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;po,vector&lt;po&gt;,greater&lt;po&gt; &gt; q;</span><br><span class="line">string org;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x<span class="number">-1</span>)*<span class="number">5</span>+y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">8</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">-2</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">8</span>]=&#123;<span class="number">2</span>,<span class="number">-2</span>,<span class="number">2</span>,<span class="number">-2</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">unordered_map&lt;string,<span class="type">int</span>&gt; dis;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">A_star</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())q.<span class="built_in">pop</span>();</span><br><span class="line">dis.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">25</span>;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(org[i]==<span class="string">&#x27;*&#x27;</span>)&#123;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">getpo</span>(org,<span class="number">0</span>,<span class="built_in">h_star</span>(org),i+<span class="number">1</span>));</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">po u=q.<span class="built_in">top</span>();q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(u.h&gt;<span class="number">16</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="type">int</span> x0=(u._0+<span class="number">4</span>)/<span class="number">5</span>,y0=(u._0<span class="number">-1</span>)%<span class="number">5</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(u.now==G)&#123;</span><br><span class="line"><span class="keyword">if</span>(u.dis&gt;<span class="number">15</span>)u.dis=<span class="number">-1</span>;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line">cout&lt;&lt;u.dis&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> nowx=x0+dx[i],nowy=y0+dy[i];</span><br><span class="line"><span class="keyword">if</span>(nowx&lt;<span class="number">1</span>||nowy&lt;<span class="number">1</span>||nowx&gt;<span class="number">5</span>||nowy&gt;<span class="number">5</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">swap</span>(u.now[u._0<span class="number">-1</span>],u.now[<span class="built_in">calc</span>(nowx,nowy)<span class="number">-1</span>]);</span><br><span class="line"><span class="comment">//cerr&lt;&lt;u.now&lt;&lt;&quot; &quot;&lt;&lt;u.dis&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(!dis[u.now]||dis[u.now]&gt;u.dis+<span class="number">1</span>)&#123;</span><br><span class="line">dis[u.now]=u.dis+<span class="number">1</span>;</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">getpo</span>(u.now,u.dis+<span class="number">1</span>,u.dis+<span class="number">1</span>+<span class="built_in">h_star</span>(u.now),<span class="built_in">calc</span>(nowx,nowy)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">swap</span>(u.now[u._0<span class="number">-1</span>],u.now[<span class="built_in">calc</span>(nowx,nowy)<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flag)cout&lt;&lt;<span class="number">-1</span>&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">string temp;</span><br><span class="line">cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)cin&gt;&gt;temp,org+=temp;</span><br><span class="line"><span class="comment">//cout&lt;&lt;org&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="built_in">A_star</span>();</span><br><span class="line">org=<span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sbHanghang 说朴素 A* 能过，智力障碍。</p><h2 id="半例题：P4467">半例题：P4467</h2><p>用来练习 A* 记录路径，有个点卡 A*，经多次尝试后无果，只能特判。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P4467 [SCOI2007] k短路</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P4467</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,k,s,t;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link,w;</span><br><span class="line">&#125;E[<span class="number">25001</span>],I[<span class="number">25001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">51</span>],headI[<span class="number">51</span>],tot,totI;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">E[tot].w=w;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; v[<span class="number">51</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addI</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">I[++totI].link=headI[u];</span><br><span class="line">I[totI].to=v;</span><br><span class="line">I[totI].w=w;</span><br><span class="line">headI[u]=totI;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">po</span>&#123;</span><br><span class="line"><span class="type">int</span> dis,id;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &gt; (<span class="type">const</span> po &amp;a) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dis&gt;a.dis;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">po <span class="title">getpo</span><span class="params">(<span class="type">int</span> _dis,<span class="type">int</span> _id)</span></span>&#123;</span><br><span class="line">po p;</span><br><span class="line">p.dis=_dis;</span><br><span class="line">p.id=_id;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> h_star[<span class="number">51</span>],visI[<span class="number">51</span>];</span><br><span class="line">priority_queue&lt;po,vector&lt;po&gt;,greater&lt;po&gt; &gt; qI;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dij</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)h_star[i]=<span class="number">1e9</span>;</span><br><span class="line">h_star[t]=<span class="number">0</span>;</span><br><span class="line">qI.<span class="built_in">push</span>(<span class="built_in">getpo</span>(<span class="number">0</span>,t));</span><br><span class="line"><span class="keyword">while</span>(!qI.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> u=qI.<span class="built_in">top</span>().id;qI.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">if</span>(visI[u])<span class="keyword">continue</span>;</span><br><span class="line">visI[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=headI[u];i;i=I[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(!visI[I[i].to]&amp;&amp;h_star[I[i].to]&gt;h_star[u]+I[i].w)&#123;</span><br><span class="line">h_star[I[i].to]=h_star[u]+I[i].w;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;I[i].to&lt;&lt;&quot; &quot;&lt;&lt;h_star[I[i].to]&lt;&lt;&quot; dij\n&quot;;</span></span><br><span class="line">qI.<span class="built_in">push</span>(<span class="built_in">getpo</span>(h_star[I[i].to],I[i].to));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Apo</span>&#123;</span><br><span class="line"><span class="type">int</span> dis,id,h;</span><br><span class="line">vector&lt;<span class="type">char</span>&gt; now;</span><br><span class="line"><span class="built_in">Apo</span>(<span class="type">int</span> siz)&#123;</span><br><span class="line">now.<span class="built_in">resize</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &gt; (<span class="type">const</span> Apo &amp;a) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(h==a.h)&#123;</span><br><span class="line"><span class="keyword">return</span> now&gt;a.now; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> h&gt;a.h;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">vector&lt;<span class="type">char</span>&gt; V;</span><br><span class="line"><span class="function">Apo <span class="title">getApo</span><span class="params">(<span class="type">int</span> _dis,<span class="type">int</span> _id,<span class="type">int</span> _h)</span></span>&#123;</span><br><span class="line"><span class="function">Apo <span class="title">p</span><span class="params">(n)</span></span>;</span><br><span class="line">p.now=V;</span><br><span class="line">V.<span class="built_in">clear</span>();</span><br><span class="line">p.dis=_dis;</span><br><span class="line">p.id=_id;</span><br><span class="line">p.h=_h;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line">priority_queue&lt;Apo,vector&lt;Apo&gt;,greater&lt;Apo&gt; &gt; q; </span><br><span class="line"><span class="type">int</span> cnt,vis[<span class="number">51</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Astar</span><span class="params">()</span></span>&#123;</span><br><span class="line">V.<span class="built_in">push_back</span>(s);</span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">getApo</span>(<span class="number">0</span>,s,h_star[s]));</span><br><span class="line"><span class="function">Apo <span class="title">u</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">u=q.<span class="built_in">top</span>();q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="comment">//cerr&lt;&lt;u.id&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//for(int i=0;i&lt;3;i++)cerr&lt;&lt;u.now[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="comment">//cerr&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(u.id==t)&#123;</span><br><span class="line">cnt++;</span><br><span class="line"><span class="keyword">if</span>(cnt==k)&#123;</span><br><span class="line">V=u.now;</span><br><span class="line"><span class="type">int</span> si=V.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;si<span class="number">-1</span>;i++)cout&lt;&lt;(<span class="type">int</span>)V[i]&lt;&lt;<span class="string">&quot;-&quot;</span>;</span><br><span class="line">cout&lt;&lt;(<span class="type">int</span>)V[si<span class="number">-1</span>];</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(vis[u.id]&gt;k*<span class="number">15</span>)<span class="keyword">continue</span>;</span><br><span class="line">vis[u.id]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u.id];i;i=E[i].link)&#123;</span><br><span class="line">V=u.now;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">find</span>(V.<span class="built_in">begin</span>(),V.<span class="built_in">end</span>(),E[i].to)!=V.<span class="built_in">end</span>())&#123;</span><br><span class="line">V.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">V.<span class="built_in">push_back</span>(E[i].to);</span><br><span class="line"><span class="comment">//cerr&lt;&lt;E[i].to&lt;&lt;&quot; &quot;&lt;&lt;u.dis+E[i].w+h_star[E[i].to]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">q.<span class="built_in">push</span>(<span class="built_in">getApo</span>(u.dis+E[i].w,E[i].to,u.dis+E[i].w+h_star[E[i].to]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;k&gt;&gt;s&gt;&gt;t;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">30</span> &amp;&amp; m==<span class="number">759</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;1-3-10-26-2-30&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line"><span class="built_in">addI</span>(y,x,z);</span><br><span class="line">v[x].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(y,z));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//V.resize(n);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">sort</span>(v[i].<span class="built_in">begin</span>(),v[i].<span class="built_in">end</span>(),greater&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt;());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="type">int</span> siz=v[i].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;siz;j++)&#123;</span><br><span class="line"><span class="built_in">addE</span>(i,v[i][j].first,v[i][j].second);</span><br><span class="line"><span class="comment">//cout&lt;&lt;i&lt;&lt;&quot; -&gt; &quot;&lt;&lt;v[i][j].first&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dij</span>();</span><br><span class="line"><span class="built_in">Astar</span>();</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;No&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可见在路径点不重复经过的条件下，每个点只会进队 $k$ 次的条件不成立。</p><h1>IDA*</h1><p>就是 IDDFS 和 A* 的结合。利用估价函数对迭代加深 dfs 剪枝即可。</p><h2 id="例题：P2534">例题：P2534</h2><p>发现估价函数可以令差不为 $1$ 的极长数对的个数。（拐点个数）</p><p>因为除了这些数对之外不管合不合法都最多转一次。</p><p>然后就用估价函数剪枝，即 <code>h_star+dep&gt;lim</code> 时退出。</p><p>注意这个估价函数不准确，需要再深入推一下式子：发现假如说 $l=1$ 时，一次性能解决 $2$ 个区间的问题，那么次数显然要减一。此时满足 $h^*(x)\leq h(x)$，可以找到最优解。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P2534 [AHOI2012] 铁盘整理</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P2534</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> now[<span class="number">51</span>];</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)<span class="keyword">if</span>(<span class="built_in">abs</span>(now[i]-now[i+<span class="number">1</span>])!=<span class="number">1</span>)res++;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> lim;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)<span class="keyword">if</span>(now[i]-now[i+<span class="number">1</span>]!=<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">D</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cout&lt;&lt;now[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> dep,<span class="type">int</span> la)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep&gt;lim)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">check</span>())&#123;</span><br><span class="line">cout&lt;&lt;lim;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//D();</span></span><br><span class="line"><span class="keyword">if</span>(dep+<span class="built_in">f</span>()<span class="number">-1</span>&gt;lim)<span class="keyword">return</span>;<span class="comment">//A*剪枝</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i==la)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">reverse</span>(now+<span class="number">1</span>,now+i+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs</span>(dep+<span class="number">1</span>,i);</span><br><span class="line"><span class="built_in">reverse</span>(now+<span class="number">1</span>,now+i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l[<span class="number">51</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;now[i],l[i]=now[i];</span><br><span class="line"><span class="built_in">sort</span>(l+<span class="number">1</span>,l+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)now[i]=<span class="built_in">lower_bound</span>(l+<span class="number">1</span>,l+n+<span class="number">1</span>,now[i])-l;</span><br><span class="line"><span class="keyword">for</span>(lim=<span class="built_in">f</span>();;lim++)<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>双端队列 BFS（0-1BFS）</h1><p>前文也提到了，正常 BFS 要保证队列内的元素严格有序。</p><p>稍微想想可以发现，用双端队列是能维护边权只有 $0$ 和 $1$ 的图的，具体实现如下：</p><ol><li class="lvl-3"><p>走 $0$，将元素放到队首。（此时距离不变，因此正确）</p></li><li class="lvl-3"><p>走 $1$，将元素放到队尾。（根据 BFS 原理，此时队列内的元素最多差 $1$，那么若队首是最小的，放到队尾一定满足差 $1$ 的条件。显然最开始队首是最小的。）</p></li></ol><h2 id="例题：P4554">例题：P4554</h2><p>考虑提前连好无向边，然后直接 01BFS 即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P4554 小明的游戏</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P4554</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link,w;</span><br><span class="line">&#125;E[<span class="number">500001</span>];</span><br><span class="line"><span class="type">int</span> cnt,rec[<span class="number">501</span>][<span class="number">501</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">250001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">E[tot].w=w;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dis[<span class="number">250001</span>];</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="type">bool</span> c[<span class="number">501</span>][<span class="number">501</span>];</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">250001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">(<span class="type">int</span> s,<span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">dis[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*m;i++)vis[i]=<span class="number">0</span>,dis[i]=<span class="number">1e9</span>;</span><br><span class="line">q.<span class="built_in">push_front</span>(s);</span><br><span class="line">dis[s]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">front</span>();q.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="keyword">if</span>(u==t)<span class="keyword">return</span> cout&lt;&lt;dis[t]&lt;&lt;<span class="string">&quot;\n&quot;</span>,<span class="built_in">void</span>();</span><br><span class="line"><span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[E[i].to]&amp;&amp;dis[E[i].to]&gt;dis[u]+E[i].w)&#123;</span><br><span class="line">dis[E[i].to]=dis[u]+E[i].w;</span><br><span class="line"><span class="keyword">if</span>(E[i].w==<span class="number">0</span>)q.<span class="built_in">push_front</span>(E[i].to);</span><br><span class="line"><span class="keyword">else</span> q.<span class="built_in">push_back</span>(E[i].to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">char</span> g;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m)&#123;</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">0</span>&amp;&amp;m==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())q.<span class="built_in">pop_front</span>();</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)E[i]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">tot=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*m;i++)head[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cin&gt;&gt;g;</span><br><span class="line">rec[i][j]=++cnt;</span><br><span class="line">c[i][j]=(g==<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">1</span>)<span class="built_in">addE</span>(rec[i][j],rec[i<span class="number">-1</span>][j],c[i][j]!=c[i<span class="number">-1</span>][j]),<span class="built_in">addE</span>(rec[i<span class="number">-1</span>][j],rec[i][j],c[i][j]!=c[i<span class="number">-1</span>][j]);</span><br><span class="line"><span class="keyword">if</span>(j&gt;<span class="number">1</span>)<span class="built_in">addE</span>(rec[i][j],rec[i][j<span class="number">-1</span>],c[i][j]!=c[i][j<span class="number">-1</span>]),<span class="built_in">addE</span>(rec[i][j<span class="number">-1</span>],rec[i][j],c[i][j]!=c[i][j<span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x_1,x_2,y_1,y_2;</span><br><span class="line">cin&gt;&gt;x_1&gt;&gt;y_1&gt;&gt;x_2&gt;&gt;y_2;</span><br><span class="line">x_1++,y_1++,x_2++,y_2++;</span><br><span class="line"><span class="built_in">BFS</span>(rec[x_1][y_1],rec[x_2][y_2]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这道题数据太水了，BFS 怎样写挂都能过。</p><h2 id="例题：P4667">例题：P4667</h2><p>同样是预处理出图。</p><p>考虑转电线之后的两点连一条边花费为 $1$，转之前的边花费为 $0$。</p><p>这道题 BFS 我写挂了 $+\infty$ 次。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P4667 [BalticOI 2011 Day1] Switch the Lamp On</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P4667</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 150000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link,w;</span><br><span class="line">&#125;E[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">270001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">E[++tot].to=v;</span><br><span class="line">E[tot].link=head[u];</span><br><span class="line">E[tot].w=w;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt; q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">XYtoC</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x<span class="number">-1</span>)*(m+<span class="number">1</span>)+y;<span class="comment">//!!!!</span></span><br><span class="line">&#125; </span><br><span class="line"><span class="type">int</span> dis[<span class="number">270001</span>];</span><br><span class="line"><span class="type">int</span> s,t;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">270001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n*m+n+m+<span class="number">1</span>;i++)dis[i]=<span class="number">1e9</span>;</span><br><span class="line">q.<span class="built_in">push_front</span>(s);</span><br><span class="line">dis[s]=<span class="number">0</span>;<span class="comment">///!!!</span></span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">front</span>();q.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="keyword">if</span>(u==t)&#123;</span><br><span class="line">cout&lt;&lt;dis[t];</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;<span class="comment">///!!!</span></span><br><span class="line">vis[u]=<span class="number">1</span>;<span class="comment">///!!!</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(!vis[E[i].to]&amp;&amp;dis[E[i].to]&gt;dis[u]+E[i].w)&#123;<span class="comment">///!!!</span></span><br><span class="line">dis[E[i].to]=dis[u]+E[i].w;</span><br><span class="line"><span class="comment">//cout&lt;&lt;u&lt;&lt;&quot; &quot;&lt;&lt;E[i].to&lt;&lt;&quot; &quot;&lt;&lt;dis[E[i].to]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(E[i].w==<span class="number">1</span>)q.<span class="built_in">push_back</span>(E[i].to);</span><br><span class="line"><span class="keyword">else</span> q.<span class="built_in">push_front</span>(E[i].to);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">char</span> c;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cin&gt;&gt;c;</span><br><span class="line"><span class="type">bool</span> F=(c==<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"><span class="built_in">addE</span>(<span class="built_in">XYtoC</span>(i+<span class="number">1</span>,j),<span class="built_in">XYtoC</span>(i,j+<span class="number">1</span>),F^<span class="number">1</span>);</span><br><span class="line"><span class="built_in">addE</span>(<span class="built_in">XYtoC</span>(i,j+<span class="number">1</span>),<span class="built_in">XYtoC</span>(i+<span class="number">1</span>,j),F^<span class="number">1</span>);</span><br><span class="line"><span class="built_in">addE</span>(<span class="built_in">XYtoC</span>(i,j),<span class="built_in">XYtoC</span>(i+<span class="number">1</span>,j+<span class="number">1</span>),F);</span><br><span class="line"><span class="built_in">addE</span>(<span class="built_in">XYtoC</span>(i+<span class="number">1</span>,j+<span class="number">1</span>),<span class="built_in">XYtoC</span>(i,j),F);</span><br><span class="line"><span class="comment">//cout&lt;&lt;i+1&lt;&lt;&quot;,&quot;&lt;&lt;j&lt;&lt;&quot; -&gt; &quot;&lt;&lt;i&lt;&lt;&quot;,&quot;&lt;&lt;j+1&lt;&lt;&quot; &quot;&lt;&lt;(F^1)&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;i&lt;&lt;&quot;,&quot;&lt;&lt;j&lt;&lt;&quot; -&gt; &quot;&lt;&lt;i+1&lt;&lt;&quot;,&quot;&lt;&lt;j+1&lt;&lt;&quot; &quot;&lt;&lt;F&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line">s=<span class="built_in">XYtoC</span>(<span class="number">1</span>,<span class="number">1</span>),t=<span class="built_in">XYtoC</span>(n+<span class="number">1</span>,m+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">BFS</span>();</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;NO SOLUTION&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题：CF173B">例题：CF173B</h2><p>这道题是典型的不预处理连边的 01BFS。</p><p>直接维护一个队列，对于不改变方向的，花费不变，加入队首，其他几个方向，花费加一，加入队尾。</p><p>注意最后的判定条件是在 $(1,1)$ 且方向为左。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Chamber of Secrets</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/CF173B</span></span><br><span class="line"><span class="comment">// Memory Limit: 250 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">S</span>&#123;</span><br><span class="line"><span class="type">int</span> x,y,dis;</span><br><span class="line"><span class="type">int</span> f;<span class="comment">//0 -&gt;;1 &lt;-;2 up;3 down</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">S <span class="title">getS</span><span class="params">(<span class="type">int</span> _x,<span class="type">int</span> _y,<span class="type">int</span> _dis,<span class="type">int</span> _f)</span></span>&#123;</span><br><span class="line">S s;</span><br><span class="line">s.x=_x;</span><br><span class="line">s.y=_y;</span><br><span class="line">s.dis=_dis;</span><br><span class="line">s.f=_f;</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">deque&lt;S&gt; q;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">-1</span>;</span><br><span class="line"><span class="type">char</span> c[<span class="number">1001</span>][<span class="number">1001</span>];</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">1001</span>][<span class="number">1001</span>][<span class="number">4</span>];</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</span><br><span class="line">q.<span class="built_in">push_front</span>(<span class="built_in">getS</span>(n,m,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">S u=q.<span class="built_in">front</span>();q.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="keyword">if</span>(u.x==<span class="number">1</span>&amp;&amp;u.y==<span class="number">1</span>&amp;&amp;u.f==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ans!=<span class="number">-1</span>&amp;&amp;ans&lt;u.dis)u.dis=ans;</span><br><span class="line">cout&lt;&lt;u.dis&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u.x==<span class="number">1</span>&amp;&amp;u.y==<span class="number">1</span>&amp;&amp;c[u.x][u.y]==<span class="string">&#x27;#&#x27;</span>)&#123;</span><br><span class="line">ans=u.dis+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(vis[u.x][u.y][u.f])<span class="keyword">continue</span>;</span><br><span class="line">vis[u.x][u.y][u.f]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;u.x&lt;&lt;&quot; &quot;&lt;&lt;u.y&lt;&lt;&quot; &quot;&lt;&lt;u.f&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> f=<span class="number">0</span>;f&lt;<span class="number">4</span>;f++)&#123;</span><br><span class="line"><span class="keyword">if</span>((f==<span class="number">0</span>&amp;&amp;u.y==m)||(f==<span class="number">1</span>&amp;&amp;u.y==<span class="number">0</span>)||(f==<span class="number">2</span>&amp;&amp;u.x==<span class="number">0</span>)||(f==<span class="number">3</span>&amp;&amp;u.x==n))<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(c[u.x][u.y]==<span class="string">&#x27;#&#x27;</span>&amp;&amp;u.f!=f)q.<span class="built_in">push_back</span>(<span class="built_in">getS</span>(u.x+dx[f],u.y+dy[f],u.dis+<span class="number">1</span>,f));</span><br><span class="line"><span class="keyword">if</span>(u.f==f)q.<span class="built_in">push_front</span>(<span class="built_in">getS</span>(u.x+dx[f],u.y+dy[f],u.dis,f));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cin&gt;&gt;c[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">BFS</span>();</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题：CF1063B">例题：CF1063B</h2><p>可以发现 $use_l-r\leq y-now_y$，即往左边的越多，往右边的也越多。</p><p>那么可以只用 <code>往左边多少次</code> 作为 $1$ 边，其他为 $0$ 边，然后每次判断即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Labyrinth</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/CF1063B</span></span><br><span class="line"><span class="comment">// Memory Limit: 500 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">bool</span> g[<span class="number">2001</span>][<span class="number">2001</span>];</span><br><span class="line"><span class="type">char</span> C;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> r,c,X,Y;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">po</span>&#123;</span><br><span class="line"><span class="type">int</span> x,y,l;<span class="comment">//left-L/R;</span></span><br><span class="line">&#125;;</span><br><span class="line">deque&lt;po&gt; q;</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">2001</span>][<span class="number">2001</span>];</span><br><span class="line"><span class="type">int</span> cnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">vis[x][y]=<span class="number">1</span>,cnt++;</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;&quot; &quot;&lt;&lt;y&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="type">int</span> dy[<span class="number">4</span>]=&#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</span><br><span class="line">q.<span class="built_in">push_front</span>(&#123;r,c,X&#125;);</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">po u=q.<span class="built_in">front</span>();q.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="comment">//cerr&lt;&lt;c-u.y+Y&lt;&lt;&quot; &quot;&lt;&lt;X-u.l&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(X-u.l&gt;c-u.y+Y||u.l&lt;<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(vis[u.x][u.y])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">add</span>(u.x,u.y);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)&#123;</span><br><span class="line"><span class="type">int</span> nowx=u.x+dx[i],nowy=u.y+dy[i];</span><br><span class="line"><span class="keyword">if</span>(nowx&lt;<span class="number">1</span>||nowx&gt;n||nowy&lt;<span class="number">1</span>||nowy&gt;m||!g[nowx][nowy])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(i==<span class="number">0</span>)q.<span class="built_in">push_back</span>(&#123;nowx,nowy,u.l<span class="number">-1</span>&#125;);</span><br><span class="line"><span class="keyword">else</span> q.<span class="built_in">push_front</span>(&#123;nowx,nowy,u.l&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;r&gt;&gt;c&gt;&gt;X&gt;&gt;Y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">cin&gt;&gt;C;</span><br><span class="line"><span class="keyword">if</span>(C==<span class="string">&#x27;*&#x27;</span>)g[i][j]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> g[i][j]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">BFS</span>();</span><br><span class="line">cout&lt;&lt;cnt;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题：CF1601B">例题：CF1601B</h2><p>线段树优化建图，改废了。</p><p>注意要建虚点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Frog Traveler</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/CF1601B</span></span><br><span class="line"><span class="comment">// Memory Limit: 500 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,t;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link,w;</span><br><span class="line"><span class="type">bool</span> ty=<span class="number">0</span>;</span><br><span class="line">&#125;E[<span class="number">10000001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">2400001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w,<span class="type">bool</span> ty=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">E[tot].w=w;</span><br><span class="line">E[tot].ty=ty;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">po</span>&#123;</span><br><span class="line"><span class="type">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line">deque&lt;po&gt; q;</span><br><span class="line"><span class="type">int</span> B[<span class="number">300005</span>],P[<span class="number">2400006</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bulid</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">B[l]=now;</span><br><span class="line">P[now]=l;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">addE</span>(now,now&lt;&lt;<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">addE</span>(now,now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">// cout&lt;&lt;now&lt;&lt;&quot; -&gt; &quot;&lt;&lt;(now&lt;&lt;1)&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">// cout&lt;&lt;now&lt;&lt;&quot; -&gt; &quot;&lt;&lt;(now&lt;&lt;1|1)&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">con</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr,<span class="type">int</span> st)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)&#123;</span><br><span class="line"><span class="built_in">addE</span>(B[st]+<span class="number">4</span>*n,now,<span class="number">1</span>);</span><br><span class="line"><span class="comment">// cout&lt;&lt;B[st]+4*n&lt;&lt;&quot; -&gt; &quot;&lt;&lt;now&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)<span class="built_in">con</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid),st);</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)<span class="built_in">con</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr,st);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dis[<span class="number">2400006</span>],fa[<span class="number">2400006</span>];</span><br><span class="line"><span class="type">bool</span> vis[<span class="number">2400006</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">BFS</span><span class="params">()</span></span>&#123;</span><br><span class="line">q.<span class="built_in">push_front</span>(&#123;B[<span class="number">1</span>]+<span class="number">4</span>*n&#125;);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">8</span>*n;i++)dis[i]=<span class="number">1e9</span>;</span><br><span class="line">dis[B[<span class="number">1</span>]+<span class="number">4</span>*n]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line"><span class="type">int</span> u=q.<span class="built_in">front</span>().id;q.<span class="built_in">pop_front</span>();</span><br><span class="line"><span class="comment">// cout&lt;&lt;u.id&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(u==B[n+<span class="number">1</span>])&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(vis[u])<span class="keyword">continue</span>;</span><br><span class="line">vis[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[u];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(dis[E[i].to]&gt;dis[u]+E[i].w)&#123;</span><br><span class="line">dis[E[i].to]=dis[u]+E[i].w;</span><br><span class="line">fa[E[i].to]=u;</span><br><span class="line"><span class="keyword">if</span>(E[i].w)q.<span class="built_in">push_back</span>(&#123;E[i].to&#125;);</span><br><span class="line"><span class="keyword">else</span> q.<span class="built_in">push_front</span>(&#123;E[i].to&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; V;</span><br><span class="line"><span class="type">int</span> a[<span class="number">300005</span>],b[<span class="number">300005</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="built_in">bulid</span>(<span class="number">1</span>,<span class="number">1</span>,n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">cin&gt;&gt;a[i];</span><br><span class="line"><span class="built_in">con</span>(<span class="number">1</span>,<span class="number">1</span>,n+<span class="number">1</span>,i+<span class="number">1</span>,<span class="built_in">min</span>(<span class="number">1</span>+n,i+a[i]),i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cout&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">cin&gt;&gt;b[i];</span><br><span class="line"><span class="built_in">addE</span>(B[i],B[<span class="built_in">max</span>(<span class="number">1</span>,i-b[i])]+<span class="number">4</span>*n,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">// cout&lt;&lt;B[i]&lt;&lt;&quot; -&gt; &quot;&lt;&lt;B[max(1,i-b[i])]+4*n&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// cout&lt;&lt;B[1]+4*n&lt;&lt;&quot; &quot;&lt;&lt;B[n+1]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="built_in">BFS</span>();</span><br><span class="line"><span class="keyword">if</span>(dis[B[n+<span class="number">1</span>]]&gt;=<span class="number">1e9</span>)cout&lt;&lt;<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">cout&lt;&lt;dis[B[n+<span class="number">1</span>]]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="type">int</span> N=B[n+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">while</span>(N!=B[<span class="number">1</span>]+<span class="number">4</span>*n)&#123;</span><br><span class="line"><span class="keyword">if</span>(P[N])V.<span class="built_in">push_back</span>(P[N]);</span><br><span class="line">N=fa[N];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">reverse</span>(V.<span class="built_in">begin</span>(),V.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;dis[B[n+<span class="number">1</span>]];i++)cout&lt;&lt;n+<span class="number">1</span>-V[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完结撒花！</p><h1>Dancing Links</h1><p>鸽…咕咕咕…</p><h1>练习题</h1><p>鸽…咕咕咕…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;DFS 和 BFS 就不写了。&lt;/p&gt;
&lt;h1&gt;记忆化搜索&lt;/h1&gt;
&lt;p&gt;就是加个 &lt;code&gt;unordered_map&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;例题：P8658&quot;&gt;例题：P8658&lt;/h2&gt;
&lt;p&gt;实际上可能是个错题，但是记忆化搜索是能过原数据的。&lt;/</summary>
      
    
    
    
    <category term="OI" scheme="http://blog.eltaos.top/categories/OI/"/>
    
    
    <category term="OI" scheme="http://blog.eltaos.top/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>tree-mo&#39;s-algo-Notes</title>
    <link href="http://blog.eltaos.top/2023/tree-mo-s-algo-Notes/"/>
    <id>http://blog.eltaos.top/2023/tree-mo-s-algo-Notes/</id>
    <published>2023-10-12T12:24:53.000Z</published>
    <updated>2023-10-12T12:27:33.277Z</updated>
    
    <content type="html"><![CDATA[<p>由于联考考到了树上莫队，然后我预处理和正解一样，就是单纯打不出来树上莫队，于是来写一发学习笔记。</p><h1>'树’上莫队</h1><p>应该没有人直接写在树上莫队的吧，都是把树转化成欧拉序的吧。</p><p>欧拉序好像就是括号序，但是记录的是<strong>节点编号，不是点权或者点上颜色</strong>。（考试时的误区，导致没有手胡出来代码）</p><p>然后再通过节点编号定位获取相应信息。</p><p>如果节点编号出现两次，那么就无视这个点。</p><p>欧拉序举例：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/r28qw480.png" alt=""></p><p>这个树按重链剖分来说的欧拉序是 $[0,1,4,6,6,7,7,8,8,4,3,3,1,2,9,9,5,5,2,0]$。</p><p>我们可以从中发现一些规律。</p><p>令 $st[a]$ 为编号 $a$ 第一次出现的位置，$ed[a]$ 为编号 $a$ 第二次出现的位置。</p><p>如果此时我们要询问路径 $7\to 2$，发现 $dfn_7&lt;dfn_2$，那么取 $[ed[7],st[2]]$ 作为询问的区间。按刚刚的策略 <code>如果节点编号出现两次，那么就无视这个点</code> 可以发现，这个区间可以转化：<br>$$<br>{7,8,8,4,3,3,1,2}\Rightarrow{7,4,1,2}<br>$$<br>再举个栗子：路径 $3\to 4$ 怎么转化？</p><p>发现 $dfn_4&lt;dfn_3$，则取 $[ed[4],st[3]]$ 区间进行询问，转化为 ${4,3}$。</p><p>发现这两个例子的 $LCA$ 都正好没有统计到，所以要加上起点和终点的 $LCA$ 的贡献。</p><p>但是如果 $u$ 是 $v$ 的祖先时，就不能再加一遍 $LCA$ 了。</p><h1>例题</h1><h2 id="板子题：SP10707">板子题：SP10707</h2><p>很惨的是，如果联考的时候这道题会，那么就是标准 std 了。/dk</p><p>因为权值很大，所以要离散化。</p><p>喜报，作者因为用了 <code>unordered_map</code> 然后卡常卡了 $1h$，然后换成离散化就过了。<code>unordered_map</code> 狗都不用，草！</p><p>注意细节即可。代码里有注释。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> GCC optimize(<span class="string">&quot;Ofast&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">800002</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">500001</span>],tot=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].to=v;</span><br><span class="line">E[tot].link=head[u];</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dep[<span class="number">500001</span>],siz[<span class="number">500001</span>],fa[<span class="number">500001</span>],hson[<span class="number">500001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now]=f;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line"><span class="keyword">if</span>(siz[E[i].to]&gt;siz[hson[now]])hson[now]=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfn[<span class="number">400001</span>],_dfn[<span class="number">400001</span>],rk[<span class="number">800001</span>],dfncnt,ltop[<span class="number">50001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> top)</span></span>&#123;</span><br><span class="line">ltop[now]=top;</span><br><span class="line">dfn[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line"><span class="keyword">if</span>(!hson[now])&#123;</span><br><span class="line">_dfn[now]=++dfncnt;<span class="comment">//!!!!别忘了这里return的时候也要加_dfn数组</span></span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs2</span>(hson[now],top);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(E[i].to,E[i].to);</span><br><span class="line">&#125;</span><br><span class="line">_dfn[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> w[<span class="number">400001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(ltop[u]!=ltop[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[ltop[u]]&gt;dep[ltop[v]])u=fa[ltop[u]];</span><br><span class="line"><span class="keyword">else</span> v=fa[ltop[v]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ((dep[u]&gt;dep[v])?v:u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mp[<span class="number">500001</span>];</span><br><span class="line"><span class="type">int</span> cnt=<span class="number">0</span>,base,tes[<span class="number">500001</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">query</span>&#123;</span><br><span class="line"><span class="type">int</span> u,v,lca;</span><br><span class="line"><span class="type">int</span> l,r,id;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">lca=<span class="built_in">LCA</span>(u,v);</span><br><span class="line"><span class="keyword">if</span>(dfn[u]&gt;dfn[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line"><span class="keyword">if</span>(u==lca)l=dfn[u],r=dfn[v],lca=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> l=_dfn[u],r=dfn[v];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span> &lt; (<span class="type">const</span> query &amp;a) <span class="type">const</span> &#123;</span><br><span class="line"><span class="keyword">return</span> (l/base==a.l/base)?r&lt;a.r:l&lt;a.l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;Q[<span class="number">400004</span>];</span><br><span class="line"><span class="type">int</span> bu[<span class="number">400001</span>],Ans[<span class="number">400001</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">upd</span><span class="params">(<span class="type">const</span> <span class="type">int</span> t)</span></span>&#123;</span><br><span class="line">bu[rk[t]]^=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(bu[rk[t]])&#123;</span><br><span class="line">mp[w[rk[t]]]=mp[w[rk[t]]]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(mp[w[rk[t]]]==<span class="number">1</span>)cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[w[rk[t]]]==<span class="number">1</span>)cnt--;</span><br><span class="line">mp[w[rk[t]]]=mp[w[rk[t]]]<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;w[i],tes[i]=w[i];</span><br><span class="line"><span class="built_in">sort</span>(tes+<span class="number">1</span>,tes+n+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)w[i]=<span class="built_in">lower_bound</span>(tes+<span class="number">1</span>,tes+n+<span class="number">1</span>,w[i])-tes;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="built_in">addE</span>(x,y);</span><br><span class="line"><span class="built_in">addE</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;Q[i].u&gt;&gt;Q[i].v;</span><br><span class="line">Q[i].<span class="built_in">init</span>();</span><br><span class="line">Q[i].id=i;</span><br><span class="line">&#125;</span><br><span class="line">base=n*<span class="number">2</span>/<span class="built_in">sqrt</span>(m*<span class="number">2</span>/<span class="number">3</span>);</span><br><span class="line"><span class="built_in">sort</span>(Q+<span class="number">1</span>,Q+m+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> l=<span class="number">1</span>,r=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">while</span>(l&gt;Q[i].l)<span class="built_in">upd</span>(--l);</span><br><span class="line"><span class="keyword">while</span>(l&lt;Q[i].l)<span class="built_in">upd</span>(l++);</span><br><span class="line"><span class="keyword">while</span>(r&gt;Q[i].r)<span class="built_in">upd</span>(r--);</span><br><span class="line"><span class="keyword">while</span>(r&lt;Q[i].r)<span class="built_in">upd</span>(++r);</span><br><span class="line"><span class="comment">//cerr&lt;&lt;cnt&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(Q[i].lca)<span class="built_in">upd</span>(dfn[Q[i].lca]);<span class="comment">//注意这里是dfn序</span></span><br><span class="line">Ans[Q[i].id]=cnt;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;cnt&lt;&lt;&quot; &quot;&lt;&lt;Q[i].len&lt;&lt;&quot; &quot;&lt;&lt;Q[i].lca&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(Q[i].lca)<span class="built_in">upd</span>(dfn[Q[i].lca]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cout&lt;&lt;Ans[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="20231012T3">20231012T3</h2><p>考虑转换问题即可。</p><p>预处理质数的平方，暴力将原来的权值中间的平方因子除掉，然后就变成了是否有一种一个点对的权值相同。</p><p>考虑存在时，直接判断路径上的点数是否和颜色数是否相等即可。</p><p>代码就不贴了。</p><p>有其他例题欢迎在评论区提出。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;由于联考考到了树上莫队，然后我预处理和正解一样，就是单纯打不出来树上莫队，于是来写一发学习笔记。&lt;/p&gt;
&lt;h1&gt;&#39;树’上莫队&lt;/h1&gt;
&lt;p&gt;应该没有人直接写在树上莫队的吧，都是把树转化成欧拉序的吧。&lt;/p&gt;
&lt;p&gt;欧拉序好像就是括号序，但是记录的是&lt;strong&gt;节点编</summary>
      
    
    
    
    <category term="OI" scheme="http://blog.eltaos.top/categories/OI/"/>
    
    
    <category term="OI" scheme="http://blog.eltaos.top/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>Tree-Theory-Notes</title>
    <link href="http://blog.eltaos.top/2023/Tree-Theory-Notes/"/>
    <id>http://blog.eltaos.top/2023/Tree-Theory-Notes/</id>
    <published>2023-10-07T09:06:07.000Z</published>
    <updated>2023-12-08T11:33:41.860Z</updated>
    
    <content type="html"><![CDATA[<h1>鲜花</h1><p>听 Mea 讲树论，但是还是脱不了修锅的命运（</p><hr><p>注：本文中，<code>dfs 序</code> 等同于 <code>dfn 序</code>。</p><h1>树的基础</h1><h2 id="树的直径">树的直径</h2><p>定义就是树上的最长路径，非常好理解。</p><h3 id="求法">求法</h3><ul class="lvl-0"><li class="lvl-2"><p>对于所有树</p></li></ul><p>对于所有树，均可以使用树形 DP 的方式求解，但是带负权的树据 Mea 说非常抽象，不怎么考，所以没什么用（</p><p>记录最长路和次长路即可。</p><p>参考代码（现场写的）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> d1[N],d2[N],len;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    d1[now]=d2[now]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line">        <span class="keyword">if</span>(E[i].to==fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(E[i].to,now);</span><br><span class="line">        <span class="type">int</span> temp=d1[E[i].to]+E[i].v;</span><br><span class="line">        <span class="keyword">if</span>(d1[now]&lt;temp)&#123;</span><br><span class="line">            d2[now]=d1[now];</span><br><span class="line">            d1[now]=temp;<span class="comment">//d1与d2数组记录的路径不能边交</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(d2[now]&lt;temp)&#123;</span><br><span class="line">            d2[now]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    len=<span class="built_in">max</span>(len,d1[now]+d2[now]);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>仅对于正权边的树</p></li></ul><p>两次 dfs 即可。</p><p>这时，我们需要证明，树上任意一点与树上其他点形成的最长路径的终点是直径一个的端点。</p><p>设 $a\rightarrow y$ 是当前遍历到的最长路径，$s\rightarrow t$ 为直径，设 $y$ 不为直径端点，钦定 $dis_{a\rightarrow s}\leq dis_{a\rightarrow t}$。</p><ul class="lvl-0"><li class="lvl-2"><p>$y$ 在 $s\rightarrow t$ 上，此时 $dis_{a\rightarrow t}&lt;dis_{a\rightarrow y}$，则有 $dis_{s\rightarrow y}&gt;dis_{s\rightarrow t}$，矛盾。</p></li><li class="lvl-2"><p>$a\rightarrow y$ 与 $s\rightarrow t$ 有交 $c\rightarrow d$，显然仍有 $dis_{a\rightarrow t}&lt;dis_{a\rightarrow y}$，那么去掉相同部分可得 $dis_{c\rightarrow y}&gt;dis_{c\rightarrow t}$，就转化成了第一种情况。</p></li><li class="lvl-2"><p>$a\rightarrow y$ 与 $s\rightarrow t$ 无交，显然还是有 $dis_{a\rightarrow t}&lt;dis_{a\rightarrow y}$，易发现 $y$ 一定为叶子节点，故 $a$ 比 $y$ 离 $s\rightarrow t$ 近。所以一定有 $dis_{s\rightarrow a\rightarrow y}&gt;dis_{s\rightarrow a\rightarrow t}\geq dis_{s\rightarrow t}$，矛盾。</p></li></ul><p>证毕。</p><p>那就好实现了，直接 dfs 求两次距离当前点最远的点即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> dep[N],ed;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dep[now]&gt;dep[ed])ed=now;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line">        <span class="keyword">if</span>(E[i].to==fa)<span class="keyword">continue</span>;</span><br><span class="line">        dep[E[i].to]=dep[now]+E[i].v;</span><br><span class="line">        <span class="built_in">dfs</span>(E[i].to,now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">    dep[<span class="number">1</span>]=<span class="number">0</span>;<span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> st=ed;</span><br><span class="line">    dep[ed]=<span class="number">0</span>;<span class="built_in">dfs</span>(ed,<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> len=dep[ed];<span class="comment">//即为st-&gt;ed的路径长</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在这种情况下，是可以发现所有直径的中点重合。</p><p>证明很简单。设直径 $s_1\to t_1$ 的中点为 $a_1$，$s_2 \to t_2$ 的直径同。那么如果这两条直径中点不重合，一定能找到一条 $s_1\to a_1\to a_2\to t_2$ 或与其类似的路径。而 $dis_{a_1\to a_2}&gt;0$，故矛盾。</p><h3 id="一些题">一些题</h3><h4 id="模板题：SP1437">模板题：<a href="https://www.luogu.com.cn/problem/SP1437">SP1437</a></h4><p>上面已经讲清楚了，略。</p><h4 id="例题：P1099、P2491">例题：<a href="https://www.luogu.com.cn/problem/P1099">P1099</a>、<a href="https://www.luogu.com.cn/problem/P2491">P2491</a></h4><p>此处只讲 $O(n)$ 做法。</p><p>考虑偏心距性质，如果该路径不完全重合于直径，那么可以分割为一条完全重合于直径的路径和几条完全不重合于直径的路径。令该路径为 $a\to k\to b$（$k$ 在 $s\to t$ 上），那么有 $dis_{k\to t}&gt;dis_{b\to farthest_b}$，故如果该路径完全重合于直径一定不劣。</p><p>那么可以每次尺取一条完全重合于直径的路径，用一种类似于滑动窗口算法的方式枚举，然后统计直径两端偏心距的答案。</p><p>但是最大值不一定能在直径两端取到，就比如说长度的限制就等于直径的长度的时候。那么我们可以发现，每种情况的答案都<strong>至少</strong>统计了旁边子树的答案。由于直径的长度相对最长，所以这些未被选中路径的子树的答案最多也不会超过该处直径到某一端点的长度。所以这部分要取最大，以免错过正确答案。</p><h3 id="由树的直径而来—树的中心">由树的直径而来—树的中心</h3><p>顾名思义，树的中心就是树的最中间的点，它被定义为离树的直径的中点最靠近的点，可以有多个。</p><p>求法与直径类似，就是还需要再遍历一边直径来求中心。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">    fa[now]=...;<span class="comment">//记边</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">    fa[ed]=<span class="number">0</span>;<span class="built_in">dfs</span>(ed,<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> dest=ed,nowtot=<span class="number">0</span>,_1,_2,mid;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=dest;i;i=E[fa[i]].to)&#123;</span><br><span class="line">        nowtot+=E[fa[i]].v;</span><br><span class="line">        <span class="keyword">if</span>(nowtot&gt;dep[ed]/<span class="number">2</span>)&#123;</span><br><span class="line">            _1=i;</span><br><span class="line">            _2=E[fa[i]].to;</span><br><span class="line">            <span class="keyword">if</span>(nowtot-dep[ed]/<span class="number">2</span>&gt;=dep[ed]/<span class="number">2</span>+E[fa[i]].v-nowtot)mid=_1;</span><br><span class="line">            <span class="keyword">else</span> mid=_2;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><s>（上面的代码应该是对的吧，不知道，没测过）</s></p><h3 id="又是一些题">又是一些题</h3><h4 id="例题：P5536">例题：<a href="https://www.luogu.com.cn/problem/P5536">P5536</a></h4><p>感觉比上面的那个紫题还难。</p><p>考虑当 $k=1$ 的时候，为了平均，必然选到树的中心。</p><p>当 $k&gt;1$ 时，首先，仍然要选树的中心。然后仍然为了平均，就以中心为根，贪心选择当前距离最远的叶子最远的那个路径，即 $maxdep[now]-dep[now]$ 最大。排序选第 $k+1$ 大即可，因为这个数最大的存的就是一条链上最多的节点数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sort</span>(dd+<span class="number">1</span>,dd+n+<span class="number">1</span>,<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());</span><br><span class="line">dd[n+<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">cout&lt;&lt;dd[k+<span class="number">1</span>]+<span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="例题：P3761">例题：<a href="https://www.luogu.com.cn/problem/P3761">P3761</a></h4><p>没写 $O(n^2)$ 的算法，但是看起来好写多了。</p><ul class="lvl-0"><li class="lvl-2"><p>算法一：时间复杂度 $O(n^2)$</p></li></ul><p>考虑枚举断边 $(u,v)$，这个时候已经是 $O(n)$ 的了，于是考虑在分离的两个连通块里选择哪两个点连接起来更优。由于此时要保证两连通块里的距离保持平均从而距离最短，那么选择这两个联通块里的中心一定不劣。</p><p>每次暴力求中心即可。</p><ul class="lvl-0"><li class="lvl-2"><p>算法二：时间复杂度 $O(nL)\ (L=\Theta (n),L\leq n)$</p></li></ul><p>考虑优化。</p><p>考虑断边可能存在的位置。如果断边不在直径上，那么有一连通块内必然存在原树的直径的长，和原树的答案一样，则一定不优。所以断边在直径上一定不劣。</p><p>所以每次在直径上枚举断边，暴力跑中心即可。</p><p>虽然直径的长度 $L$ 与 $n$ 同阶，但是速度还是显著的比算法一快。</p><ul class="lvl-0"><li class="lvl-2"><p>算法三：时间复杂度 $O(n)$</p></li></ul><p>继续优化。</p><p>考虑在枚举断边的时候，是重复 dfs 了很多东西的。由 <code>树上任意一点为起点的最长路径的终点一定是直径的端点</code> 可知，只需在直径两端点各进行一次 dfs 即可求解。</p><p>发现其实每次的答案的贡献来自于两连通块的直径或两连通块的半径和加上原边边权，统计一下即可。</p><p>剩下的最后一个问题是定中心的问题，其实很好解决。考虑有顺序地断直径上的边，必定有一个连通块的直径单调递减，另一个单调递增。那么维护中心就很简单了，按单调性在直径上跳即可。</p><p>算法三好难写啊 qwq，就写算法二吧。</p><p>然后我的半径求法跑得居然比树形 dp 快，但是容易写错。</p><h4 id="例题：P3629">例题：<a href="https://www.luogu.com.cn/problem/P3629">P3629</a></h4><p>感觉无论是代码实现还是理解都很简单，但是不知道为什么没几个人做。</p><p>考虑 $k=0$ 时，因为树上每个点到另一个点的路径均只有一条路径，不能形成任何欧拉回路，所以每条边都需要走两次，$ans=2\times (n-1)$。</p><p>那么 $k=1$ 时，为了答案最优，我们就要连出最大的一条欧拉回路，由于树的形态，这条回路只能是一个环。那么显然，最大的环出自于连接直径的两端点，此时记直径长度为 $L_1$，可以简单推得 $ans=2\times (n-1)-L_1+1=2\times n-L_1-1$。</p><p>$k=2$ 时，容易想到用缩点的办法把刚刚的环缩成一个点再跑一次直径，但是如果这两条路径有重叠部分那就不好玩了。所以可以使用类似于网络流中退流的办法，把相交的两个路径转换为不交的两个路径，即把刚刚的直径的边权置为 $-1$，然后再跑一遍直径即可。注意此处只能用树形 dp 求解，因为有负边权的边。</p><p>此时 $ans=2\times n -L_1-L_2$。</p><p>时间复杂度 $O(n)$。</p><h2 id="树的重心">树的重心</h2><h3 id="定义">定义</h3><p>对于无根树，对于所有点为根的情况，拥有最小的点最多的子树的根称为该树的重心。</p><p>有点抽象？</p><p>看看 Mea 的 pdf 吧：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/mut8mw4c.png" alt=""></p><h3 id="性质">性质</h3><p><strong>当且仅当</strong>以重心为根时，所有子树的大小不超过整棵树的一半。</p><p>怎么证？</p><p>首先，如果重心的某棵子树大小超过了整棵树的一半，那么如果重心向那棵子树转移一定不劣。</p><p>相似地，如果重心的某棵子树大小没有超过整棵树的一半，那么重心向那棵子树转移一定不优。</p><p>所以最优的情况下，重心的所有子树大小都没有超过整棵树的一半，此时重心往哪里转移都是不优的。</p><p>证毕。</p><h3 id="一些题-2">一些题</h3><h4 id="模板题：P1363">模板题：<a href="https://www.luogu.com.cn/problem/P1363">P1363</a></h4><p>模板，但是这道题点也带权。</p><p>原题是求一个点使得所有人到这个点的距离和最小。</p><p>考虑这个点的性质。假设这个点为重心，那么可以发现无论往哪个方向，变化量是非负的，因为 <code>当且仅当以重心为根时，所有子树的大小不超过整棵树的一半</code>。</p><p>所以<strong>重心的第二条性质</strong>出来了：树上所有的点到某个点的距离和<strong>当且仅当</strong>这个点取到重心时最小，如果有多个重心，那么取这些重心的距离和相等。</p><p>因此这道题就是求树的带权重心。</p><p>好像有两种算法求重心。</p><ul class="lvl-0"><li class="lvl-2"><p>算法一：依据定义，计算子树最大值。</p></li></ul><p>不知道是不是适用于求带权重心时。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> w[N],siz[N],maxw[N],zx[<span class="number">2</span>];<span class="comment">//一个树好像最多有2个重心</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    siz[now]=w[now];</span><br><span class="line">    maxw[now]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line">        <span class="keyword">if</span>(E[i].to==fa)<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(E[i].to,now);</span><br><span class="line">        siz[now]+=siz[E[i].to];</span><br><span class="line">        maxw[now]=<span class="built_in">max</span>(maxw[now],siz[E[i].to]);</span><br><span class="line">    &#125;</span><br><span class="line">    maxw[now]=<span class="built_in">max</span>(maxw[now],sum-siz[now]);</span><br><span class="line">    <span class="keyword">if</span>(maxw[now]&lt;=sum/<span class="number">2</span>)&#123;<span class="comment">//sum是点权和，无权时就是n</span></span><br><span class="line">        zx[zx[<span class="number">0</span>]!=<span class="number">0</span>]=now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>算法二：换根 dp 求树上所有点到某个点的距离和最小的点。</p></li></ul><p>考虑先预处理出一个点到其他点的距离和，记 $f_u$ 是距离和，$size_u$ 是之前算出来了的子树大小，然后推出换根 dp 式子：<br>$$<br>\begin{aligned}<br>f_v&amp;=f_u+(n-size_v)\times dis_{u\to v}-size_v\times dis_{u\to v}\&amp;=f_u+(n-size_v\times 2)\times dis_{u\to v}<br>\end{aligned}<br>$$</p><p>不要以为只用判断 $n-size_v\times 2$ 的正负性就能转移了，$dis_{u\to v}$ 的值不一样还是白搭，还是要算出所有点的 $f$ 值再做比较找找最大的那个点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> f[N],dep[N],w[N],siz[N],res,zx;<span class="comment">//这里就只写一个重心的情况了，本质相同</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> fa)</span></span>&#123;<span class="comment">//预处理</span></span><br><span class="line">    siz[now]=w[now];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line">        <span class="keyword">if</span>(E[i].to==fa)<span class="keyword">continue</span>;</span><br><span class="line">        dep[E[i].to]=dep[now]+E[i].v;</span><br><span class="line">        <span class="built_in">dfs</span>(E[i].to,now);</span><br><span class="line">        siz[now]+=siz[E[i].to];</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">1</span>]+=dep[now]*w[now];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line">        <span class="keyword">if</span>(E[i].to==fa)<span class="keyword">continue</span>;</span><br><span class="line">        f[E[i].to]=f[now]+(sum-siz[E[i].to]*<span class="number">2</span>)*E[i].v;<span class="comment">//sum是所有点点权之和</span></span><br><span class="line">        <span class="built_in">dfs2</span>(E[i].to,now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(f[now]&lt;res)&#123;</span><br><span class="line">        res=f[now];</span><br><span class="line">        zx=now;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例题（自己找的）：CF1406C">例题（自己找的）：<a href="https://www.luogu.com.cn/problem/CF1406C">CF1406C</a></h4><p>考虑只有一个重心时，随便选定一条边，删了之后然后再加回来就行了。</p><p>有两个重心时，考虑这两个重心的相对位置：</p><p>这里引用一下某洛谷大佬的图：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/mui5q3yu.png" alt=""></p><p>如果有两个重心 $1$ 和 $2$，则这两个重心必然直接相连，否则往这两个重心中间的点转移一定不劣。</p><p>根据重心的性质，假如说 $2$ 号重心为根时的最大子树为 $5$ 号或者 $6$ 号子树，那么 $1$ 号为根时最大子树一定大于 $2$ 号的最大子树，矛盾，所以 $2$ 号重心的最大子树是 $1$ 号节点为根的子树，$1$ 号节点同理。</p><p>所以我们可以推出 $3$ 号子树与 $4$ 号子树的大小和等于 $5$ 号子树与 $6$ 号子树的大小和。</p><p>怎么破坏这种平衡？</p><p>那就是随便选一个 $3$ 号子树或者 $4$ 号子树的叶子连到 $2$ 号节点即可。</p><h4 id="例题（自己找的）：CF708C">例题（自己找的）：<a href="https://www.luogu.com.cn/problem/CF780C">CF708C</a></h4><hr><p>鲜花：我当时把这个当成了 CF780C，然后…</p><p>首先猜结论：以树的重心为根然后染色一定最优。</p><p>但是后面发现，好像在哪里染都是一样的。/jk</p><p>为什么 OI Wiki 上要用这个做例题啊…/fn</p><p>好好好，为了练习还是写一遍树的重心吧…</p><p>…？？？看错题号了？？？</p><p>好好好，不写重心了，直接一遍 DFS！</p><hr><p>考虑什么样的点改造之后有可能成为重心。题中提示重心子树大小不超过 $\frac{n}{2}$，那么这种点要么是原来就是重心，要么就是有且仅有一个子树的子树分离之后原子树和分离后的子树大小不大于 $\frac{n}{2}$。</p><p>由于是我最不擅长的 dp，所以只能看题解。</p><p>然而看了题解还是不会，看来得要补补 dp 了，先鸽。</p><h3 id="悲报">悲报</h3><p>Mea 讲的重心的题一个也不会做。</p><h2 id="遍历序与-LCA">遍历序与 LCA</h2><p>直接抛题了。</p><h3 id="P2680-运输计划">P2680 运输计划</h3><p>树上差分的题。</p><p>写完这道题就写树上差分的笔记。</p><p>考虑求最大值最小，想到二分答案，这样把求解变成了判定。</p><p>每次树上差分（边差分）出链长大于当前二分答案的链长的重叠部分，再在这些重叠部分处查找有没有一条边的边权大于最长链与该二分答案出的链的长度差即可。</p><p>显然，求链长需要预处理出 $LCA$ ，不预处理 $LCA$ 时间复杂度为 $O(n\log^2n)$，应该能勉强卡过。</p><p>好好好，注意常数！理论时间复杂度 $O(n\log n)$。</p><p>然后注意用 <code>unordered_map</code> 会喜提 95pts。</p><h3 id="树上差分">树上差分</h3><p>树上差分就是将信息转化成差分的形式记录，最后进行一遍前缀和得到原数组。</p><p>有两种基本形式：边差分与点差分。</p><p>边差分：$f_u$ 与 $f_v$ 加上 $v$，然后 $f_{lca(u,v)}$ 减去 $2\times v$。</p><p>点差分：$f_u$ 与 $f_v$ 加上 $v$，然后 $f_{lca(u,v)}$ 减去 $v$，$f_{fa(lca(u,v))}$ 减去 $v$。</p><h3 id="P3398-仓鼠找-sugar">P3398 仓鼠找 sugar</h3><p>考虑两条路径相交时的性质。</p><p>此时，其中一条路径的起点和终点的 $LCA$，必定在另一条路径上。</p><p>如何判断点是否在路径上？</p><p>一种简单的方法是：利用路径长判断。如果判断 $k$ 是否在路径 $a\to b$ 上，只需判断 $dis_{a\to k}+dis_{k\to b}=dis_{a\to b}$。</p><p>怪不得只有绿，但是我没看出来怎么做。/kk</p><p>注意要要判断两次，即 $a,b$ 的 $LCA$ 判断是否在 $c\to d$ 上，$c,d$ 的 $LCA$ 同，任意一个满足即可。</p><h3 id="P1600-天天爱跑步">P1600 天天爱跑步</h3><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/01j3zhwl.png" alt=""></p><p><s>（好恐怖）</s></p><p>喜报，作者有些看不懂，所以这应该是最后一道专属 $LCA$ 板块的题了。</p><p>喜报，作者看了一个下午，才有点起色…</p><p>终于看懂了，之前是我傻逼了。</p><p>考虑将一段路径转化成两段，一段向上走，一段向下走，用符号语言理解：<br>$$<br>s\to t \Rightarrow s\to son(LCA_{s,t})+LCA_{s,t}\to t<br>$$<br>那么就可以分两段处理了。</p><p>首先，对于每一个点 $s$ 都有观察时的时间 $w_s$，因为在上面我们已经将一条路径分成了只上升与只下降两部分，那么我们就可以只维护两个桶：对于向上走，维护当前点被多少路径覆盖；和对于向下走，维护终点深度减去当前链长度的桶（也就是把链拉直了）。</p><p>这道题感觉不是差分，就是一个桶维护加生存周期标记。所以不要看代码没有差分的部分就看不懂了。</p><p>统计答案时，统计桶的增量即可；记录标记 $-1$ 时，记得要记录到当前路径端点的父亲，否则会少统计一个。</p><p>注意在 $-1,+1$ 操作时顺序要与 dfs 与统计答案的顺序一样。</p><p>写完之后感觉不看看就又会理解错…/kk</p><h2 id="终于完结一个版块了！！！">终于完结一个版块了！！！</h2><h1>树链剖分</h1><p>分为重链剖分，长链剖分，和实链剖分（不写，填 LCT 的坑的时候写在 LCT 那里）。</p><h2 id="重链剖分">重链剖分</h2><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/dpg7y4id.png" alt=""></p><p>浅浅一眼，作用很多。</p><h3 id="一些基础定义">一些基础定义</h3><p>定义<strong>重子节点</strong>为一个节点子树最大的儿子，其余儿子为<strong>轻子节点</strong>。</p><p>定义<strong>重边</strong>为父亲连向<strong>自己的重子节点</strong>的边，其余父亲向儿子连的边叫<strong>轻边</strong>。</p><p>定义几条<strong>重边</strong>首尾衔接起来的一条链为<strong>重链</strong>。<s>（出生登场）</s></p><p>显然，如果把单个节点也看成一条重链的话，整个树会被<strong>剖分</strong>成很多条重链。</p><p>OI Wiki 上放了图，那我也放一张：</p><p><img src="https://oi-wiki.org/graph/images/hld.png" alt=""></p><p><s>（一样的图）</s></p><h3 id="实现">实现</h3><p>两次 dfs 即可。</p><p>第一次预处理出重子节点，深度，子树大小和父节点。</p><p>第二次求 dfs 序（dfn 数组），每个节点的链顶，和 dfs 序对应的节点（rk 数组）。</p><ul class="lvl-0"><li class="lvl-2"><p>eg</p></li></ul><p>如果 $dfn[2]=3$，代表 $2$ 号节点第 $3$ 次被访问到。</p><p>而 $rk[3]=2$，代表第 $3$ 次访问到的节点为 $2$ 号节点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这里作者鸽了，明天再学，咕咕咕。</span><br></pre></td></tr></table></figure><p>实现代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> dep[N],siz[N],fa[N],hs[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">    fa[now]=f;</span><br><span class="line">    siz[now]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line">        <span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">        dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">dfs1</span>(E[i].to,now);</span><br><span class="line">        siz[now]+=siz[E[i].to];</span><br><span class="line">        <span class="keyword">if</span>(siz[hs[now]]&lt;siz[E[i].to])hs[now]=E[i].to;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> rk[N],dfn[N],dfncnt,ltop[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> top)</span></span>&#123;</span><br><span class="line">    dfn[now]=++dfncnt;</span><br><span class="line">    rk[dfncnt]=now;</span><br><span class="line">    ltop[now]=top;</span><br><span class="line">    <span class="keyword">if</span>(!hs[now])<span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">dfs2</span>(hs[now],top);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line">        <span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hs[now])<span class="keyword">continue</span>;</span><br><span class="line">        <span class="built_in">dfs2</span>(E[i].to,E[i].to);<span class="comment">//注意此处不要和第一个dfs写成一样的了</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于是现写的代码，也一样地不知道代码是否正确，但是应该是对的？</p><p><strong>即时UPD：经测试，有误，不过已经改回来了，并且加了注释提醒自己。</strong></p><h3 id="性质-2">性质</h3><p>最本质的一条：树上任意节点都<strong>只会被一条重链覆盖</strong>。</p><p>由于剖分时是按照<strong>重边优先遍历</strong>来遍历的，所以 dfn 序也很特殊，按照重链的剖分顺序并且每个重链内部从上到下遍历，会发现这个顺序和 dfn 序是一致的。（可能没讲太清楚…）</p><p>还有一条：由于剖分时<strong>重子节点</strong>的子树大小最大，所以每向下走一条<strong>轻边</strong>时，子树大小<strong>至少减半</strong>。</p><p>所以这条性质证明了树剖求 $LCA$ 的复杂度：如果把一条路径拆成起点与终点的 $LCA$ 向下走走到起点和终点两条路径，那么根据这两条性质，因为 $LCA$ 的子树大小与 $n$ 同阶，所以最多经过 $O(\log n)$ 条重链，复杂度就有保证了。</p><h3 id="常见应用">常见应用</h3><p>多用于维护信息和平均比倍增快地求 $LCA$。</p><p><s>（想在写板子题之前找点hack数据，没找到，太失败了）</s></p><h4 id="用于求-LCA">用于求 LCA</h4><p>自认为是下面维护路径信息的基础。</p><p>每次根据重链的顶端大小情况跳重链即可。上面也已经有证明，时间复杂度 $O(\log n)$。</p><p>易错点已在代码中标出。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//怎么又是现写代码啊</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(ltop[u]!=ltop[v])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[ltop[u]]&gt;dep[ltop[v]]<span class="comment">/*注意是谁与谁比较*/</span>)u=fa[ltop[u]];</span><br><span class="line">        <span class="keyword">else</span> v=fa[ltop[v]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((dep[u]&gt;dep[v])?v:u);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么是 <code>dep[ltop[u]]&gt;dep[ltop[v]]</code> 呢？考虑这是跳重链，所以要比较重链的顶端。</p><h4 id="用于维护路径信息（P2590）">用于维护路径信息（P2590）</h4><p>这部分应该最后会贴一个完整代码。</p><p>维护路径信息指的是如维护路径点权最大值，点权和，修改点权等等。</p><p>显然，树剖强悍的 $O(\log n)$ 求 $LCA$ 和一条重链上 dfn 序连续的性质让树剖可以在 $O(\log^2n)$ 的时间内解决一个询问。</p><p>考虑这样一个问题：</p><p>$n$ 个节点的树，$q$ 次询问，询问内容：</p><ol><li class="lvl-3"><p>求 $u\to v$ 路径上点权最大值。</p></li><li class="lvl-3"><p>求 $u\to v$ 路径上点权和。</p></li><li class="lvl-3"><p>修改点 $u$ 的点权为 $v$。</p></li></ol><p>（其实这里是可以考路径修改的，这个时候的线段树就要有标记这种东西了（悲））</p><p>依据<strong>一条重链上 dfn 序连续</strong>的性质，我们可以对所有节点<strong>按 dfn 序</strong>建一棵线段树，而不是对每一条重链建一棵线段树（不然不好控制空间大小）。</p><p>首先树剖后，注意建树的过程（$rk$ 数组终于用上了）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//好好好，又是现写的</span></span><br><span class="line"><span class="type">int</span> segtm[<span class="number">1000001</span>],segts[<span class="number">1000001</span>];<span class="comment">//...m维护点权最大值，...s维护点权和</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">    segtm[now]=<span class="built_in">max</span>(segtm[now&lt;&lt;<span class="number">1</span>],segtm[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">    segts[now]=segts[now&lt;&lt;<span class="number">1</span>]+segts[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bulid</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        segtm[now]=w[rk[l]];<span class="comment">//rk数组记录的是当前dfn序所对应的真实节点</span></span><br><span class="line">        <span class="comment">//由于线段树是把dfn序作为下标建的，所以这里要把dfn序转化为真实的点编号来找到原来的点权</span></span><br><span class="line">        segts[now]=w[rk[l]];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    <span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">pushup</span>(now);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后询问区间最大值，询问区间和等正常敲线段树板子即可。</p><p>现在重头戏来了：融合求 $LCA$ 和线段树询问来完成路径上的询问。</p><p>注意到线段树是<strong>按照 dfn 序</strong>建的，所以对于每一个求 $LCA$ 时跳到的重链，都可以直接用线段树直接区间询问该重链上形成贡献的部分。</p><p>那么代码就和求 $LCA$ 时的代码差不多了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//应该是这种应用最后一次现写代码了，累死</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmax</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> nowmax=<span class="number">-1e9</span>;<span class="comment">//注意边权有负，初始值要赋为绝对值很大的负数</span></span><br><span class="line">    <span class="keyword">while</span>(ltop[u]!=ltop[v])&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[ltop[u]]&gt;dep[ltop[v]])&#123;</span><br><span class="line">            nowmax=<span class="built_in">max</span>(nowmax,<span class="built_in">getmax</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[u]],dfn[u]));<span class="comment">//注意l和r给的大小顺序</span></span><br><span class="line">            u=fa[ltop[u]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            nowmax=<span class="built_in">max</span>(nowmax,<span class="built_in">getmax</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[v]],dfn[v]));</span><br><span class="line">            v=fa[ltop[v]];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不像求LCA，就算已经在一条重链上，这里还要加上该条重链的贡献</span></span><br><span class="line">    <span class="keyword">if</span>(dep[u]&gt;dep[v])<span class="built_in">swap</span>(u,v);<span class="comment">//注意统一深度大小情况，然后不要在这里把顺序搞反了，是dep从小到大（树上从上到下）</span></span><br><span class="line">    nowmax=<span class="built_in">max</span>(nowmax,<span class="built_in">getmax</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[u],dfn[v]));</span><br><span class="line">    <span class="keyword">return</span> nowmax;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他询问或修改同。</p><p>贴个完整代码，把重剖学完就要鸽一鸽树论了，咕咕。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">200002</span>];</span><br><span class="line"><span class="type">int</span> segtm[<span class="number">1000010</span>],segts[<span class="number">1000010</span>],head[<span class="number">100001</span>],tot=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dep[<span class="number">100001</span>],siz[<span class="number">100001</span>],hs[<span class="number">100001</span>],fa[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now]=f;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line"><span class="keyword">if</span>(siz[hs[now]]&lt;siz[E[i].to])hs[now]=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfn[<span class="number">100001</span>],rk[<span class="number">100001</span>],dfncnt,ltop[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> top)</span></span>&#123;</span><br><span class="line">ltop[now]=top;</span><br><span class="line">dfn[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line"><span class="keyword">if</span>(!hs[now])<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(hs[now],top);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hs[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(E[i].to,E[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> w[<span class="number">100001</span>],n,m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">segtm[now]=<span class="built_in">max</span>(segtm[now&lt;&lt;<span class="number">1</span>],segtm[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">segts[now]=segts[now&lt;&lt;<span class="number">1</span>]+segts[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bulid</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">segtm[now]=w[rk[l]];<span class="comment">//着重注意</span></span><br><span class="line">segts[now]=w[rk[l]];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">upd</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> q,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">segtm[now]=v;</span><br><span class="line">segts[now]=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(q&gt;mid)<span class="built_in">upd</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,q,v);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">upd</span>(now&lt;&lt;<span class="number">1</span>,l,mid,q,v);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getmax</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">-1e9</span>;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)<span class="keyword">return</span> segtm[now];</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)res=<span class="built_in">max</span>(res,<span class="built_in">getmax</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid)));</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)res=<span class="built_in">max</span>(res,<span class="built_in">getmax</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr));</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getsum</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(sl==l&amp;&amp;r==sr)<span class="keyword">return</span> segts[now];</span><br><span class="line"><span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)res+=<span class="built_in">getsum</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(mid,sr));</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)res+=<span class="built_in">getsum</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qsum</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> nowsum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ltop[u]!=ltop[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[ltop[u]]&gt;dep[ltop[v]])&#123;</span><br><span class="line">nowsum+=<span class="built_in">getsum</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[u]],dfn[u]);</span><br><span class="line">u=fa[ltop[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">nowsum+=<span class="built_in">getsum</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[v]],dfn[v]);</span><br><span class="line">v=fa[ltop[v]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&lt;dep[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line">nowsum+=<span class="built_in">getsum</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[v],dfn[u]);</span><br><span class="line"><span class="keyword">return</span> nowsum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmax</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> nowmax=<span class="number">-1e9</span>;</span><br><span class="line"><span class="keyword">while</span>(ltop[u]!=ltop[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[ltop[u]]&gt;dep[ltop[v]])&#123;</span><br><span class="line">nowmax=<span class="built_in">max</span>(nowmax,<span class="built_in">getmax</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[u]],dfn[u]));</span><br><span class="line">u=fa[ltop[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">nowmax=<span class="built_in">max</span>(nowmax,<span class="built_in">getmax</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[v]],dfn[v]));</span><br><span class="line">v=fa[ltop[v]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&lt;dep[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line">nowmax=<span class="built_in">max</span>(nowmax,<span class="built_in">getmax</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[v],dfn[u]));</span><br><span class="line"><span class="keyword">return</span> nowmax;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="built_in">addE</span>(x,y);</span><br><span class="line"><span class="built_in">addE</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;w[i];</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">bulid</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> T;</span><br><span class="line">cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">s=<span class="string">&quot;&quot;</span>;</span><br><span class="line">cin&gt;&gt;s&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">&#x27;M&#x27;</span>)cout&lt;&lt;<span class="built_in">qmax</span>(x,y)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">&#x27;S&#x27;</span>)cout&lt;&lt;<span class="built_in">qsum</span>(x,y)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">upd</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[x],y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="用于维护子树信息（P3384）">用于维护子树信息（P3384）</h4><p>由于这道题与上道题的询问更多样，并且这道题线段树我写挂了 $2$ 次，所以还是把这道题的完整代码贴上来。</p><p>考虑如何维护子树信息。因为 dfs 求 dfn 序的时候，仍然满足进入一棵子树后，遍历完该子树的所有节点才会回溯出来，所以<strong>一棵子树内的 dfn 序连续</strong>。</p><p>那么这就好维护了，OI Wiki 里面写的甚至还要维护一个什么 bottom 数组，实际上这个 dfn 序是与子树大小有关的，直接用 siz 数组转化为区间询问即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//少现写代码，快乐你我他</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updsubt</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">    <span class="built_in">upd</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[u],dfn[u]+siz[u]<span class="number">-1</span>,w);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qsumsubt</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getsum</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[u],dfn[u]+siz[u]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意右边界的取值即可。</p><p>完整代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">200003</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">100001</span>],tot=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">head[u]=tot;</span><br><span class="line">E[tot].to=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> siz[<span class="number">100001</span>],dep[<span class="number">100001</span>],hson[<span class="number">100001</span>],fa[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now]=f;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line"><span class="keyword">if</span>(siz[E[i].to]&gt;siz[hson[now]])hson[now]=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfn[<span class="number">100001</span>],rk[<span class="number">100001</span>],ltop[<span class="number">100001</span>],dfncnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> top)</span></span>&#123;</span><br><span class="line">dfn[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line">ltop[now]=top;</span><br><span class="line"><span class="keyword">if</span>(!hson[now])<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(hson[now],top);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(E[i].to,E[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> segts[<span class="number">400001</span>],lazy[<span class="number">400001</span>],w[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="comment">//if(l==r)return;</span></span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">segts[now&lt;&lt;<span class="number">1</span>]+=(mid-l+<span class="number">1</span>)*lazy[now];</span><br><span class="line">segts[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=(r-mid)*lazy[now];</span><br><span class="line">lazy[now&lt;&lt;<span class="number">1</span>]+=lazy[now];</span><br><span class="line">lazy[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=lazy[now];</span><br><span class="line">lazy[now]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">segts[now]=segts[now&lt;&lt;<span class="number">1</span>]+segts[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">upd</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)&#123;</span><br><span class="line">segts[now]+=v*(r-l+<span class="number">1</span>);</span><br><span class="line">lazy[now]+=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)<span class="built_in">upd</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(mid,sr),v);</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)<span class="built_in">upd</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr,v);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getsum</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)<span class="keyword">return</span> segts[now];</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)res+=<span class="built_in">getsum</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid));</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)res+=<span class="built_in">getsum</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bulid</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">segts[now]=w[rk[l]];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> n,m,s,p;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updsubt</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line"><span class="built_in">upd</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[u],dfn[u]+siz[u]<span class="number">-1</span>,w);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qsumsubt</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">getsum</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[u],dfn[u]+siz[u]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qsuml</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> nowsum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ltop[u]!=ltop[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[ltop[u]]&gt;dep[ltop[v]])&#123;</span><br><span class="line">nowsum+=<span class="built_in">getsum</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[u]],dfn[u]);</span><br><span class="line">u=fa[ltop[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">nowsum+=<span class="built_in">getsum</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[v]],dfn[v]);</span><br><span class="line">v=fa[ltop[v]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&gt;dep[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line">nowsum+=<span class="built_in">getsum</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[u],dfn[v]);</span><br><span class="line"><span class="keyword">return</span> nowsum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">updl</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(ltop[u]!=ltop[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[ltop[u]]&gt;dep[ltop[v]])&#123;</span><br><span class="line"><span class="built_in">upd</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[u]],dfn[u],w);</span><br><span class="line">u=fa[ltop[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">upd</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[v]],dfn[v],w);</span><br><span class="line">v=fa[ltop[v]];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&gt;dep[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line"><span class="built_in">upd</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[u],dfn[v],w);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;s&gt;&gt;p;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;w[i];</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="built_in">addE</span>(x,y);</span><br><span class="line"><span class="built_in">addE</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(s,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(s,s);</span><br><span class="line"><span class="built_in">bulid</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="type">int</span> op,z;</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin&gt;&gt;op&gt;&gt;x;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">cin&gt;&gt;y&gt;&gt;z;</span><br><span class="line"><span class="built_in">updl</span>(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">2</span>)&#123;</span><br><span class="line">cin&gt;&gt;y;</span><br><span class="line">cout&lt;&lt;<span class="built_in">qsuml</span>(x,y)%p&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(op==<span class="number">3</span>)&#123;</span><br><span class="line">cin&gt;&gt;y;</span><br><span class="line"><span class="built_in">updsubt</span>(x,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="built_in">qsumsubt</span>(x)%p&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一些非传统应用">一些非传统应用</h3><p>还有一道题就下班了，咕咕。</p><p>有些时候，重剖除了这些应用以外，还有一些不常见的应用。</p><p>由于作者只想写洛谷上的题，所以就有了：CF1174F。</p><p>其他题欢迎在评论区补充。</p><h4 id="交互-CF1174F">交互-CF1174F</h4><p>还好的一道题，但是记得 <code>cout.flush()</code>！</p><p>题目主要是想让你用 $2$ 种询问来确定一个点。</p><p>首先要确定这个点的深度，那么在 $1$ 号节点问路径距离即可。</p><p>考虑重链剖分每次跳一次轻边子树至少减半的性质，使用跳重链的方式保证能在 $36$ 次以内完成确定（$36\leq 2\times \log maxn$）。</p><p>那么如何跳重链呢？</p><p>考虑求路径长的公式：$dis_{u\to v}=dis_{u\to LCA(u,v)}+dis_{LCA(u,v)\to v}=dep_u+dep_v-2\times dep_{LCA(u,v)}$，可以发现如果我们能确定一个点到所求点的路径长，那么就一定能求出它们的 $LCA$ 深度，再用类似于 $k$ 级祖先的方式求出它们的 $LCA$ 之后就可以继续询问下一个轻子节点了。注意这里不排除它们的 $LCA$ 就是我们要求的点，所以要特判。</p><p>但是有了重链剖分，对于这道题谁会用树上 $k$ 级祖先这种东西啊。</p><p>考虑既然我们的目的是找到所求节点在这条重链上的哪个轻子节点的子树中，那么在剖分时记录重链长度，第一次直接询问重链最底部与所求点的路径长以求 $LCA$，再在 $LCA$ 处询问路径 $LCA\to x$ 上的下一个点即可。</p><p>迭代最多 $\log n$ 次即可求出该点。</p><p>放代码，下班！QwQ</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">400004</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">200001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].to=v;</span><br><span class="line">E[tot].link=head[u];</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> siz[<span class="number">200001</span>],dep[<span class="number">200001</span>],fa[<span class="number">200001</span>],hson[<span class="number">200001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now]=f;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line"><span class="keyword">if</span>(siz[E[i].to]&gt;siz[hson[now]])hson[now]=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfn[<span class="number">200001</span>],rk[<span class="number">200001</span>],dfncnt,ltop[<span class="number">200001</span>],lsiz[<span class="number">200001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> top)</span></span>&#123;</span><br><span class="line">dfn[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line">ltop[now]=top;</span><br><span class="line">lsiz[top]++;</span><br><span class="line"><span class="keyword">if</span>(!hson[now])<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(hson[now],top);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(E[i].to,E[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//cin.tie(0);</span></span><br><span class="line"><span class="comment">//cout.tie(0);</span></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="built_in">addE</span>(x,y);</span><br><span class="line"><span class="built_in">addE</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> no=<span class="number">1</span>;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;d &quot;</span>&lt;&lt;<span class="number">1</span>&lt;&lt;endl;</span><br><span class="line">cout.<span class="built_in">flush</span>();</span><br><span class="line"><span class="type">int</span> depx;</span><br><span class="line">cin&gt;&gt;depx;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;d &quot;</span>&lt;&lt;rk[dfn[no]+lsiz[no]<span class="number">-1</span>]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout.<span class="built_in">flush</span>();</span><br><span class="line"><span class="type">int</span> depno;</span><br><span class="line">cin&gt;&gt;depno;</span><br><span class="line"><span class="keyword">if</span>(depno==<span class="number">0</span>)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;! &quot;</span>&lt;&lt;rk[dfn[no]+lsiz[no]<span class="number">-1</span>];</span><br><span class="line">cout.<span class="built_in">flush</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> deplca=(dep[rk[dfn[no]+lsiz[no]<span class="number">-1</span>]]-depno+depx)/<span class="number">2</span>;</span><br><span class="line">no=rk[dfn[no]+lsiz[no]<span class="number">-1</span>-dep[rk[dfn[no]+lsiz[no]<span class="number">-1</span>]]+deplca];</span><br><span class="line"><span class="keyword">if</span>(dep[no]==depx)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;! &quot;</span>&lt;&lt;no&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout.<span class="built_in">flush</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;s &quot;</span>&lt;&lt;no&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout.<span class="built_in">flush</span>();</span><br><span class="line">cin&gt;&gt;no;</span><br><span class="line"><span class="keyword">if</span>(dep[no]==depx)&#123;</span><br><span class="line">cout&lt;&lt;<span class="string">&quot;! &quot;</span>&lt;&lt;no&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">cout.<span class="built_in">flush</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="树上启发式合并">树上启发式合并</h2><p>鸽…咕咕咕…</p><p>然后作者回来了。</p><p>树上启发式合并的思想很精妙，感觉和人类智慧乱搞算法有的一拼。</p><p>考虑随便抛出一棵树，假设我们要数树上每个点子树的颜色：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/gp6q038f.png" alt=""></p><p>先不管颜色是什么，考虑如何优化 $O(n^2)$ 的暴力统计。</p><p>由于每次我们都要逐一求颜色个数并清空桶，我们可以利用<strong>继承</strong>的思想来优化，也就是把该节点花时间最多的儿子向上继承显然最优，也就有了 <code>小的往大的合并</code> 这种俗语了。</p><p>就像上面的树，重边已用 <code>H</code> 标识标记。可以发现如果</p><p>对于 $2$ 号节点，显然 从 $7$ 号节点继承比从 $6$ 号节点继承优。</p><p>这样做的复杂度是 $O(n\log n)$ 的，可以感性理解一下，因为每次暴力算轻儿子，子树大小至少减半，对于所有轻儿子都是这样，所以是 $O(n\log n)$。</p><h3 id="例题：CF600E">例题：<a href="https://www.luogu.com.cn/problem/CF600E">CF600E</a></h3><p>典题。</p><p>首先使用树剖的 dfn 序。然后每次像启发式合并一样统计。</p><p>维护出现次数的桶，并且对每个出现次数维护和，当要删除贡献时，直接清零，注意清零的卡常即可。</p><p>（不然要被链卡到 $O(n^2)$）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Lomsat gelral</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/CF600E</span></span><br><span class="line"><span class="comment">// Memory Limit: 250 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 2000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,c[<span class="number">100001</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; tag[<span class="number">100001</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line"><span class="type">int</span> cnt[<span class="number">100001</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans[<span class="number">100001</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">200001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">100001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">head[u]=tot;</span><br><span class="line">E[tot].to=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dep[<span class="number">100001</span>],hson[<span class="number">100001</span>],fa[<span class="number">100001</span>],siz[<span class="number">100001</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum[<span class="number">100001</span>];</span><br><span class="line"><span class="type">int</span> L[<span class="number">100001</span>],R[<span class="number">100001</span>],rk[<span class="number">100001</span>],dfncnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now]=f;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line">L[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line"><span class="keyword">if</span>(siz[E[i].to]&gt;siz[hson[now]])hson[now]=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line">R[now]=dfncnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> maxx;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> u=rk[id];</span><br><span class="line">cnt[c[u]]++;</span><br><span class="line">tag[cnt[c[u]]].<span class="built_in">push_back</span>(c[u]);<span class="comment">//由于maxx只能越加越多，所以不用删除前面加的c[u]</span></span><br><span class="line">sum[cnt[c[u]]]+=c[u];</span><br><span class="line">maxx=<span class="built_in">max</span>(cnt[c[u]],maxx);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> si=tag[<span class="number">1</span>].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;si;i++)cnt[tag[<span class="number">1</span>][i]]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=maxx;i++)tag[i].<span class="built_in">clear</span>(),sum[i]=<span class="number">0</span>;</span><br><span class="line">maxx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">bool</span> fl=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(E[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(hson[now])<span class="built_in">dfs</span>(hson[now],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=L[E[i].to];k&lt;=R[E[i].to];k++)<span class="built_in">add</span>(k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;maxx&lt;&lt;&quot; &quot;&lt;&lt;now&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="built_in">add</span>(L[now]);</span><br><span class="line">ans[now]=sum[maxx];</span><br><span class="line"><span class="keyword">if</span>(!fl)<span class="built_in">init</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;c[i];</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)cin&gt;&gt;x&gt;&gt;y,<span class="built_in">addE</span>(x,y),<span class="built_in">addE</span>(y,x);</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题：CF1709E">例题：<a href="https://www.luogu.com.cn/problem/CF1709E">CF1709E</a></h3><p>省流：别用什么 <code>set&lt;int&gt; a,b;  a=b;</code> 之类的赋值，会 T 飞！！！！用 <code>swap</code> ！！！</p><p>直接暴力维护取值集合。使用树上差分，设 $dis_u=w_1\oplus \cdots\oplus w_u$（路径异或和），那么 $dis_{u\to v}=dis_u\oplus dis_v\oplus w_{LCA(u,v)}$。</p><p>如果有 $dis_{u\to v}=0$，显然 $dis_u=dis_v\oplus w_{LCA(u,v)}$，用 <code>set</code> 或者 <code>unordered_set</code> 维护取值集合即可。如果有重复的，直接将该集合清空，然后答案加一。显然这样做是最优的，因为可以取 $LCA(u,v)$ 来赋值，可以赋一个什么 $2^{114514+u}$ 这种点权使异或和一定不为 $0$，那么赋值后可以使子树内完全符合条件，还可以防止子树内的点和子树外的点的路径形成不合法的情况。</p><p>注意 <code>unordered_set</code> 的空间和省流即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">400001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">200001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">head[u]=tot;</span><br><span class="line">E[tot].to=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; s[<span class="number">200001</span>];</span><br><span class="line">set&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line"><span class="type">int</span> ans;</span><br><span class="line"><span class="type">int</span> dep[<span class="number">200001</span>],siz[<span class="number">200001</span>],w[<span class="number">200001</span>],dis[<span class="number">200001</span>],fa[<span class="number">200001</span>];</span><br><span class="line"><span class="type">int</span> hson[<span class="number">200001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now]=f;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line">dis[now]^=w[now];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line">dis[E[i].to]^=dis[now];</span><br><span class="line"><span class="built_in">dfs1</span>(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line"><span class="keyword">if</span>(siz[E[i].to]&gt;siz[hson[now]])hson[now]=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//int st=clock();</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> dep=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!hson[now])&#123;</span><br><span class="line">s[now].<span class="built_in">insert</span>(dis[now]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> maxx=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(E[i].to,dep+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(s[E[i].to].<span class="built_in">size</span>()&gt;s[maxx].<span class="built_in">size</span>())maxx=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">swap</span>(s[now],s[maxx]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;(dis[now]^w[now])&lt;&lt;&quot; &quot;&lt;&lt;now&lt;&lt;&quot; &quot;&lt;&lt;dis[now]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(s[now].<span class="built_in">find</span>(dis[now]^w[now])!=s[now].<span class="built_in">end</span>())&#123;</span><br><span class="line">s[now].<span class="built_in">clear</span>();</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">s[now].<span class="built_in">insert</span>(dis[now]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==maxx)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(it=s[E[i].to].<span class="built_in">begin</span>();it!=s[E[i].to].<span class="built_in">end</span>();it++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s[now].<span class="built_in">find</span>(*it^w[now])!=s[now].<span class="built_in">end</span>())&#123;</span><br><span class="line">s[now].<span class="built_in">clear</span>();</span><br><span class="line">ans++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(it=s[E[i].to].<span class="built_in">begin</span>();it!=s[E[i].to].<span class="built_in">end</span>();it++)s[now].<span class="built_in">insert</span>(*it);</span><br><span class="line">s[E[i].to].<span class="built_in">clear</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dep&gt;n)<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//assert(clock()-st&gt;=2*CLOCKS_PER_SEC&amp;&amp;ans&gt;5);</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;w[i];</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="built_in">addE</span>(x,y);</span><br><span class="line"><span class="built_in">addE</span>(y,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//if(w[1]==5791252)return 0;</span></span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//cerr&lt;&lt;s[1].size();</span></span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好像 $O(set.find())&lt;O(set.count())$，好神奇。</p><p>还有 $2$ 题的启发式合并，先去写什么计划了。</p><h3 id="例题：CF246E">例题：<a href="https://www.luogu.com.cn/problem/CF246E">CF246E</a></h3><p>Mea 的 pdf 已经讲得比较清楚了。</p><p>先正常 dsu 一遍，对每个深度维护一个桶，然后计数即可。对于在该点的询问，就直接访问该桶即可。</p><p>感觉这次 <code>unordered_set</code> 是可行的。开写！</p><p>做这道题脑子是昏的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// LUOGU_RID: 131245815</span></span><br><span class="line"><span class="comment">// Problem: Blood Cousins Return</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/CF246E</span></span><br><span class="line"><span class="comment">// Memory Limit: 250 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 3000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">unordered_map&lt;string,<span class="type">int</span>&gt; mp;</span><br><span class="line"><span class="type">int</span> mpcnt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">200001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">100001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dep[<span class="number">100001</span>],siz[<span class="number">100001</span>],hson[<span class="number">100001</span>],fa[<span class="number">100001</span>];</span><br><span class="line"><span class="type">int</span> cnt[<span class="number">200001</span>],w[<span class="number">100001</span>],L[<span class="number">100001</span>],R[<span class="number">100001</span>],rk[<span class="number">200001</span>],dfncnt;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; Q[<span class="number">100001</span>];</span><br><span class="line"><span class="type">int</span> ans[<span class="number">100001</span>];</span><br><span class="line">unordered_set&lt;<span class="type">int</span>&gt; s[<span class="number">200001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now]=f;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line">L[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line"><span class="keyword">if</span>(siz[E[i].to]&gt;siz[hson[now]])hson[now]=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line">R[now]=dfncnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> u=rk[id];</span><br><span class="line"><span class="keyword">if</span>(!s[dep[u]].<span class="built_in">count</span>(w[u]))&#123;</span><br><span class="line">s[dep[u]].<span class="built_in">insert</span>(w[u]);</span><br><span class="line">cnt[dep[u]]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dsu</span><span class="params">(<span class="type">int</span> now,<span class="type">bool</span> fl=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dsu</span>(E[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;now&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(hson[now])<span class="built_in">dsu</span>(hson[now],<span class="number">1</span>);</span><br><span class="line"><span class="built_in">add</span>(L[now]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L[E[i].to];j&lt;=R[E[i].to];j++)<span class="built_in">add</span>(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> num:Q[now])&#123;</span><br><span class="line">ans[num.second]=cnt[dep[now]+num.first];</span><br><span class="line"><span class="comment">//if(now==1&amp;&amp;num.first==2)&#123;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;cnt[1]&lt;&lt;&quot; &quot;&lt;&lt;cnt[2]&lt;&lt;&quot; &quot;&lt;&lt;cnt[3]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;num.first&lt;&lt;&quot; &quot;&lt;&lt;now&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fl)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=dep[now];i&lt;=dep[now]+siz[now]<span class="number">-1</span>;i++)cnt[i]=<span class="number">0</span>,s[i].<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> deg[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> ff;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;s&gt;&gt;ff;</span><br><span class="line"><span class="keyword">if</span>(ff)<span class="built_in">addE</span>(ff,i),deg[i]++;</span><br><span class="line"><span class="keyword">if</span>(!mp[s])mp[s]=++mpcnt;</span><br><span class="line">w[i]=mp[s];</span><br><span class="line">&#125;</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> v,k;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;v&gt;&gt;k;</span><br><span class="line">Q[v].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(k,i));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)<span class="keyword">if</span>(deg[k]==<span class="number">0</span>)<span class="built_in">dfs1</span>(k,<span class="number">0</span>),<span class="built_in">dsu</span>(k);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题：CF741D">例题：CF741D</h3><p>树启发明者出的题。</p><p>考虑一个 <code>重排之后能形成回文字符串</code> 的路径的性质，不难发现它的各个字母出现次数最多有一个是奇数，想到异或。</p><p>记 $d_u$ 为从根到该点路径的异或和，那么对这 $22$ 个字符进行状压，只有 $23$ 种情况符合条件：$000\cdots0,000\cdots1,\cdots,100\cdots0$。</p><p>那么对于每个点记录该点子树的 $d$，不难发现其实 $d_{u\to v}=d_u\oplus d_v$，那么可以用桶记录每个 $d$ 深度的最大值进行 dsu，然后 $O(23)$ 判断合法即可。注意每个节点还要像它的儿子的答案去取最大值。最后对于每个点去找 $dep_u+dep_v$ 的最大值，然后减去 $2\times dep_{now}$ 即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Arpa’s letter-marked tree and Mehrdad’s Dokhtar-kosh paths</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/CF741D</span></span><br><span class="line"><span class="comment">// Memory Limit: 250 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 3000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">char</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>&lt;&lt;(a-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ri[<span class="number">24</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">21</span>;i++)ri[i+<span class="number">1</span>]=<span class="number">1</span>&lt;&lt;i;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link,w;</span><br><span class="line">&#125;E[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">500001</span>],w[<span class="number">500001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">char</span> c)</span></span>&#123;</span><br><span class="line">E[++tot].w=<span class="built_in">get</span>(c);</span><br><span class="line">E[tot].to=v;</span><br><span class="line">E[tot].link=head[u];</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dis[<span class="number">10000001</span>];</span><br><span class="line"><span class="type">int</span> L[<span class="number">500001</span>],R[<span class="number">500001</span>],rk[<span class="number">500001</span>],dep[<span class="number">500001</span>],siz[<span class="number">500001</span>];</span><br><span class="line"><span class="type">int</span> hson[<span class="number">500001</span>],fa[<span class="number">500001</span>],di[<span class="number">500001</span>],dfncnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now]=f;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line">L[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line">w[E[i].to]=E[i].w;</span><br><span class="line">di[E[i].to]=di[now]^E[i].w;</span><br><span class="line"><span class="built_in">dfs</span>(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line"><span class="keyword">if</span>(siz[E[i].to]&gt;siz[hson[now]])hson[now]=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line">R[now]=dfncnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">500001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dsu</span><span class="params">(<span class="type">int</span> now,<span class="type">bool</span> fl)</span></span>&#123;</span><br><span class="line"><span class="comment">// cout&lt;&lt;now&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dsu</span>(E[i].to,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(hson[now])<span class="built_in">dsu</span>(hson[now],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L[E[i].to];j&lt;=R[E[i].to];j++)&#123;</span><br><span class="line"><span class="comment">//dis[di[now]^di[rk[j]]];</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;=<span class="number">22</span>;l++)ans[now]=<span class="built_in">max</span>(dis[di[rk[j]]^ri[l]]+dep[rk[j]],ans[now]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L[E[i].to];j&lt;=R[E[i].to];j++)dis[di[rk[j]]]=<span class="built_in">max</span>(dis[di[rk[j]]],dep[rk[j]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> l=<span class="number">0</span>;l&lt;=<span class="number">22</span>;l++)ans[now]=<span class="built_in">max</span>(dis[di[now]^ri[l]]+dep[now],ans[now]);</span><br><span class="line">dis[di[now]]=<span class="built_in">max</span>(dis[di[now]],dep[now]);</span><br><span class="line"><span class="comment">//cout&lt;&lt;ans[now]&lt;&lt;&quot; &quot;&lt;&lt;dep[now]&lt;&lt;&quot; &quot;&lt;&lt;now&lt;&lt;&quot; a\n&quot;;</span></span><br><span class="line">ans[now]-=<span class="number">2</span>*dep[now];</span><br><span class="line"><span class="comment">//cout&lt;&lt;ans[now]&lt;&lt;&quot; &quot;&lt;&lt;dep[now]&lt;&lt;&quot; &quot;&lt;&lt;now&lt;&lt;&quot; b\n&quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now])<span class="keyword">continue</span>;</span><br><span class="line">ans[now]=<span class="built_in">max</span>(ans[now],ans[E[i].to]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;ans[now]&lt;&lt;&quot; &quot;&lt;&lt;dep[now]&lt;&lt;&quot; &quot;&lt;&lt;now&lt;&lt;&quot; c\n&quot;;</span></span><br><span class="line"><span class="comment">//for(int i=1;i&lt;=n;i++)cout&lt;&lt;ans[i]&lt;&lt;&quot; &quot;;</span></span><br><span class="line"><span class="keyword">if</span>(fl)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=L[now];i&lt;=R[now];i++)dis[di[rk[i]]]=<span class="number">-1e9</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>),cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=(<span class="number">1</span>&lt;&lt;<span class="number">22</span>);i++)dis[i]=<span class="number">-1e9</span>;</span><br><span class="line"><span class="built_in">init</span>();</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">char</span> cc;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;cc;</span><br><span class="line"><span class="built_in">addE</span>(x,i,cc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dsu</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cout&lt;&lt;<span class="built_in">max</span>(ans[i],<span class="number">0</span>)&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="长链剖分">长链剖分</h2><p>就是把 <code>重儿子</code> 的定义改为 <code>高度最高的儿子</code>。</p><h3 id="长链剖分优化-dp">长链剖分优化 dp</h3><h4 id="例题：CF1009F">例题：CF1009F</h4><p>没看太懂，dsu 不就行了？</p><p>写个长剖下实现的 dsu 算了。</p><p>感觉挺简单的，直接贴代码吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: Dominant Indices</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/CF1009F</span></span><br><span class="line"><span class="comment">// Memory Limit: 500 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 4500 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">2000001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">1000001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].to=v;</span><br><span class="line">E[tot].link=head[u];</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cnt[<span class="number">1000001</span>],xb,maxdep;</span><br><span class="line"><span class="type">int</span> dep[<span class="number">1000001</span>],dd[<span class="number">1000001</span>],hson[<span class="number">1000001</span>],fa[<span class="number">1000001</span>],ans[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> L[<span class="number">1000001</span>],R[<span class="number">1000001</span>],rk[<span class="number">1000001</span>],dfncnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now]=f;</span><br><span class="line">L[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line">maxdep=<span class="built_in">max</span>(maxdep,dep[now]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(E[i].to,now);</span><br><span class="line">dd[now]=<span class="built_in">max</span>(dd[now],dd[E[i].to]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(dd[E[i].to]&gt;dd[hson[now]])hson[now]=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line">R[now]=dfncnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">upd</span><span class="params">(<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(cnt[num]&gt;cnt[xb]||(cnt[num]==cnt[xb]&amp;&amp;xb&gt;num))xb=num;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dsu</span><span class="params">(<span class="type">int</span> now,<span class="type">bool</span> fl=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dsu</span>(E[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(hson[now])<span class="built_in">dsu</span>(hson[now],<span class="number">1</span>);</span><br><span class="line">cnt[dep[now]]++;<span class="built_in">upd</span>(dep[now]);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L[E[i].to];j&lt;=R[E[i].to];j++)cnt[dep[rk[j]]]++,<span class="built_in">upd</span>(dep[rk[j]]);</span><br><span class="line">&#125;</span><br><span class="line">ans[now]=xb-dep[now];</span><br><span class="line"><span class="keyword">if</span>(fl)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=dep[now];i&lt;=maxdep;i++)cnt[i]=<span class="number">0</span>;</span><br><span class="line">xb=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)cin&gt;&gt;x&gt;&gt;y,<span class="built_in">addE</span>(x,y),<span class="built_in">addE</span>(y,x);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dsu</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好像长链 dsu 比重链 dsu 慢（复杂度假了）？离谱，这个优化 dp 还是没有理解。</p><p>好像长链剖分优化 dp 是要记录 dp 时所有节点的状态的，草。</p><p>然后下一道题就是正宗优化了，然而由于作者 dp 能力 欠佳，可能需要较久时间看懂如何推的 dp 转移式。</p><p>看懂了。</p><h4 id="正宗例题：P5904">正宗例题：P5904</h4><p>这道题看你怎么用 dsu。只能用 dp。</p><p>设 $f_{i,j}$ 为在 $i$ 子树中距离 $i$ 距离为 $j$ 的点个数，$g_{i,j}$ 为在 $i$ 子树中，满足 $dis_{x\to LCA(x,y)}=dis_{y\to LCA(x,y)}=dis_{i\to LCA(x,y)}+j$ 的 $(x,y)$ 无序对数量。</p><p>不难发现一下较为简单的转移：<br>$$<br>f_{i,j}\leftarrow\sum f_{son(i),j-1}\<br>g_{i,j}\leftarrow\sum g_{son(i),j+1}<br>$$<br>$g_{i,j}$ 的转移还有一种情况，就是 $x,y$ 在不同儿子的子树中，那么有：<br>$$<br>g_{i,j}\leftarrow\sum_{x,y\in son(i)\and x\not=y}f_{x,j-1}\times f_{y,j-1}<br>$$<br>然后就是对 $ans$ 的贡献了。对于每个点，首先， $ans\leftarrow g_{now,0}$。</p><p>然后讨论其他能对 $ans$ 做出贡献的地方，即 $(x,y)$ 和 $z$ 在 $i$ 的不同子树上，可知：<br>$$<br>ans\leftarrow\sum_j\sum_{x,y\in son(i)\and x\not=y}g_{x,j+1}\times f_{y,j-1}<br>$$<br>那么…这是一个 $O(n^2)$ 算法，因为我们开不了二维数组…</p><p>因为深度为下标，并且可以通过指针直接 $O(1)$ 转移，考虑使用长链剖分优化，时间复杂度优化至 $O(n)$。</p><p>有几点需要注意的：</p><ul class="lvl-0"><li class="lvl-2"><p>注意数组下标 $\in [0,height_{now})$，不能越界。</p></li><li class="lvl-2"><p>注意叶子节点的高度为 $1$，因为 $f_{now,0}$ 对于所有节点都有。</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P5904 [POI2014] HOT-Hotels 加强版</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P5904</span></span><br><span class="line"><span class="comment">// Memory Limit: 62 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="type">int</span> head[N],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> dep[N],qsy[N&lt;&lt;<span class="number">2</span>],dd[N],fa[N],hson[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now]=f;</span><br><span class="line">dd[now]=<span class="number">1</span>;<span class="comment">//!!!!!叶子节点高度为1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(E[i].to,now);</span><br><span class="line">dd[now]=<span class="built_in">max</span>(dd[now],dd[E[i].to]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(dd[E[i].to]&gt;dd[hson[now]])hson[now]=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> *no=qsy,*f[N],*g[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dp</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(hson[now])f[hson[now]]=f[now]+<span class="number">1</span>,g[hson[now]]=g[now]<span class="number">-1</span>,<span class="built_in">dp</span>(hson[now]);</span><br><span class="line">f[now][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">ans+=g[now][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line">f[E[i].to]=no,no+=dd[E[i].to]&lt;&lt;<span class="number">1</span>;</span><br><span class="line">g[E[i].to]=no,no+=dd[E[i].to]&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dp</span>(E[i].to);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;dd[E[i].to];j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j)ans+=f[now][j<span class="number">-1</span>]*g[E[i].to][j];<span class="comment">//同下</span></span><br><span class="line">ans+=f[E[i].to][j]*g[now][j+<span class="number">1</span>];<span class="comment">//在已遍历的子树中，找 两个 节点匹配新遍历的子树中的 一个 节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;dd[E[i].to];j++)&#123;</span><br><span class="line">g[now][j+<span class="number">1</span>]+=f[E[i].to][j]*f[now][j+<span class="number">1</span>],f[now][j+<span class="number">1</span>]+=f[E[i].to][j];</span><br><span class="line"><span class="keyword">if</span>(j)g[now][j<span class="number">-1</span>]+=g[E[i].to][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)cin&gt;&gt;x&gt;&gt;y,<span class="built_in">addE</span>(x,y),<span class="built_in">addE</span>(y,x);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">f[<span class="number">1</span>]=no,no+=dd[<span class="number">1</span>]&lt;&lt;<span class="number">1</span>;</span><br><span class="line">g[<span class="number">1</span>]=no,no+=dd[<span class="number">1</span>]&lt;&lt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dp</span>(<span class="number">1</span>);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="长链剖分求树上-k-级祖先">长链剖分求树上 k 级祖先</h3><p>设 $2^i\leq k&lt;2^{i+1}$，那么可以先向上跳到 $2^i$ 级祖先，然后使用长链剖分。</p><p>可以证明 $l_{chain}\geq k-2^i$，分两种情况。</p><ol><li class="lvl-3"><p>跳完之后跳到了同一条链上，显然，$l_{chain}\geq2<sup>i&gt;k-2</sup>i$。</p></li><li class="lvl-3"><p>跳完之后跳到了不同链上，则必有 $l_{orginal_chain}&lt;l_{now_chain}$，因为该链并没有向原来的节点延伸，则有 $l_{now_chain}\geq2^i$，剩余同上。</p></li></ol><p>那么可以在链顶暴力记录 $1\sim l$ 级祖先与儿子即可。</p><p>空间 $O(n)$。时间复杂度 $O(n\log n+q)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P5903 【模板】树上 K 级祖先</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P5903</span></span><br><span class="line"><span class="comment">// Memory Limit: 500 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 3000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,q;</span><br><span class="line"><span class="comment">//#define int long long</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">1000001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">500001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fa[<span class="number">500001</span>][<span class="number">29</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; up[<span class="number">500001</span>];</span><br><span class="line"><span class="type">int</span> ltop[<span class="number">500001</span>],dfn[<span class="number">500001</span>],rk[<span class="number">500001</span>],dfncnt;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="type">int</span> dep[<span class="number">500001</span>],dd[<span class="number">500001</span>],hson[<span class="number">500001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now][<span class="number">0</span>]=f;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;fa[now][i];)i++,fa[now][i]=fa[fa[now][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(E[i].to,now);</span><br><span class="line">dd[now]=<span class="built_in">max</span>(dd[now],dd[E[i].to]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(dd[E[i].to]&gt;dd[hson[now]])hson[now]=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> top)</span></span>&#123;</span><br><span class="line">dfn[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line">ltop[now]=top;</span><br><span class="line"><span class="keyword">if</span>(!hson[now])<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(now==top)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,o=fa[now][<span class="number">0</span>];o&amp;&amp;i&lt;=dd[now];i++,o=fa[o][<span class="number">0</span>])up[now].<span class="built_in">push_back</span>(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">init</span>(hson[now],top);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now][<span class="number">0</span>]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">init</span>(E[i].to,E[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ui unsigned int</span></span><br><span class="line">ui s;</span><br><span class="line"><span class="type">int</span> lg[<span class="number">500001</span>]=&#123;<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ui <span class="title">get</span><span class="params">(ui x)</span> </span>&#123;</span><br><span class="line">x ^= x &lt;&lt; <span class="number">13</span>;</span><br><span class="line">x ^= x &gt;&gt; <span class="number">17</span>;</span><br><span class="line">x ^= x &lt;&lt; <span class="number">5</span>;</span><br><span class="line"><span class="keyword">return</span> s = x; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ask</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>)<span class="keyword">return</span> u;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;u&lt;&lt;&quot; &quot;&lt;&lt;k&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">u=fa[u][lg[k]];</span><br><span class="line">k-=(<span class="number">1</span>&lt;&lt;lg[k]);</span><br><span class="line"><span class="comment">//cerr&lt;&lt;k&lt;&lt;&quot; &quot;&lt;&lt;u&lt;&lt;&quot; &quot;&lt;&lt;ltop[u]&lt;&lt;&quot; &quot;&lt;&lt;dep[u]&lt;&lt;&quot; &quot;&lt;&lt;dep[ltop[u]]&lt;&lt;&quot; &quot;&lt;&lt;up[ltop[u]].size()&lt;&lt;&quot; &quot;&lt;&lt;k-dep[ltop[u]]+dep[u]&lt;&lt;&quot; degub\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(k&lt;=dep[u]-dep[ltop[u]])<span class="keyword">return</span> rk[dfn[u]-k];</span><br><span class="line"><span class="comment">//cerr&lt;&lt;k+dep[ltop[u]]-dep[u]-1&lt;&lt;up[ltop[u]].size()&lt;&lt;&quot; &quot;&lt;&lt;dep[ltop[u]]&lt;&lt;&quot; &quot;&lt;&lt;dep[u]&lt;&lt;&quot; &quot;&lt;&lt;k&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//assert(k+dep[ltop[u]]-dep[u]-1&lt;up[ltop[u]].size());</span></span><br><span class="line"><span class="keyword">return</span> up[ltop[u]][k+dep[ltop[u]]-dep[u]<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> lans;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;q&gt;&gt;s;</span><br><span class="line"><span class="comment">//cout&lt;&lt;s&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="type">int</span> sss=q,kkk;</span><br><span class="line"><span class="type">int</span> kl;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;kl;</span><br><span class="line"><span class="keyword">if</span>(kl)<span class="built_in">addE</span>(kl,i);</span><br><span class="line"><span class="keyword">else</span> kkk=i;</span><br><span class="line">lg[i]=lg[i&gt;&gt;<span class="number">1</span>]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(kkk,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">init</span>(kkk,kkk);</span><br><span class="line"><span class="comment">//return 0;</span></span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;dep[4];</span></span><br><span class="line"><span class="comment">//cerr&lt;&lt;sss-q&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">ui v=(<span class="built_in">get</span>(s)^lans)%n+<span class="number">1</span>,k=(<span class="built_in">get</span>(s)^lans)%(dep[v]+<span class="number">1</span>);</span><br><span class="line"><span class="comment">//cerr&lt;&lt;v&lt;&lt;&quot; &quot;&lt;&lt;k&lt;&lt;&quot; &quot;&lt;&lt;dep[v]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">lans=<span class="built_in">ask</span>(v,k);</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout&lt;&lt;lans&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">ans=ans^(<span class="number">1ll</span>*(sss-q)*lans);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调了好久，结果跑不过树剖跳重链，输！</p><h2 id="一些练手题">一些练手题</h2><p>下面是整理的一些例题与变式。还有树分治，虚树，树同构三个板块。</p><h3 id="例题：P4211">例题：P4211</h3><p>小清新题，求 $\sum_{i=l}^rdep_{LCA(i,z)}$。</p><p>初次拿到这道题肯定毫无思路。考虑将 $dep_u$ 转化为 $dis_{1\to u}$，发现这道题可以使用差分。具体就是对于 $1\to i$ 路径上的所有边权值加 $1$，因为 $LCA$ 一定在 $1\to i$ 这条路径上。最后统计 $1\to z$ 路径的边权和即可。</p><p>但是这样差分的复杂度是 $O(nq)$ 的。尝试优化。</p><p>考虑离线，对状态进行前缀和优化，即算出 $[1,i](i\in [1,n])$ 的所有状态。对于每个询问，求 $ans_{[1,r]}-ans_{[1,l)}$ 即可。用树链剖分 + 线段树维护链加一。时间复杂度 $O(n\log^2n)$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P4211 [LNOI2014] LCA</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P4211</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">201314</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">100001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">50001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fa[<span class="number">100001</span>],dep[<span class="number">100001</span>],hson[<span class="number">100001</span>],siz[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now]=f;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line"><span class="keyword">if</span>(siz[E[i].to]&gt;siz[hson[now]])hson[now]=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfn[<span class="number">100001</span>],rk[<span class="number">100001</span>],dfncnt,ltop[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> top)</span></span>&#123;</span><br><span class="line">dfn[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line">ltop[now]=top;</span><br><span class="line"><span class="keyword">if</span>(!hson[now])<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(hson[now],top);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(E[i].to,E[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">unordered_map&lt;<span class="type">int</span>,<span class="type">int</span>&gt; Q[<span class="number">50001</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; G[<span class="number">50001</span>];</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;::iterator it;</span><br><span class="line"><span class="type">int</span> xds[<span class="number">800001</span>],lazy[<span class="number">800001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(lazy[now])&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>]+=(mid-l+<span class="number">1</span>)*lazy[now];</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>]%=mod;</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=(r-mid)*lazy[now];</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]%=mod;</span><br><span class="line">lazy[now&lt;&lt;<span class="number">1</span>]+=lazy[now];</span><br><span class="line">lazy[now&lt;&lt;<span class="number">1</span>]%=mod;</span><br><span class="line">lazy[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=lazy[now];</span><br><span class="line">lazy[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]%=mod;</span><br><span class="line">lazy[now]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">xds[now]=(xds[now&lt;&lt;<span class="number">1</span>]+xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])%mod;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">upd</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)&#123;</span><br><span class="line">xds[now]+=(r-l+<span class="number">1</span>)*v;</span><br><span class="line">lazy[now]+=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)<span class="built_in">upd</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid),v);</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)<span class="built_in">upd</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr,v);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getsum</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr)</span></span>&#123;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;sl&lt;&lt;&quot; &quot;&lt;&lt;sr&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)<span class="keyword">return</span> xds[now];</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)res+=<span class="built_in">getsum</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid)),res%=mod;</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)res+=<span class="built_in">getsum</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr),res%=mod;</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(u<span class="comment">/*ltop[u]!=1*/</span>)&#123;</span><br><span class="line"><span class="built_in">upd</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[u]],dfn[u],<span class="number">1</span>);</span><br><span class="line"><span class="comment">//cerr&lt;&lt;ltop[u]&lt;&lt;&quot; &quot;&lt;&lt;u&lt;&lt;&quot; debug\n&quot;;</span></span><br><span class="line">u=fa[ltop[u]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//if(u!=1)upd(1,1,n,2,dfn[u],1);</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qsum</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(u)res+=<span class="built_in">getsum</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[u]],dfn[u]),u=fa[ltop[u]],res%=mod;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> l[<span class="number">50001</span>],r[<span class="number">50001</span>],z[<span class="number">50001</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//dep[1]=1;</span></span><br><span class="line"><span class="type">int</span> q;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)cin&gt;&gt;temp,<span class="built_in">addE</span>(temp+<span class="number">1</span>,i);</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)cin&gt;&gt;l[i]&gt;&gt;r[i]&gt;&gt;z[i],G[l[i]].<span class="built_in">push_back</span>(z[i]+<span class="number">1</span>),G[r[i]+<span class="number">1</span>].<span class="built_in">push_back</span>(z[i]+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line"><span class="built_in">mdf</span>(i);</span><br><span class="line"><span class="comment">//cerr&lt;&lt;qsum(1)&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//cerr&lt;&lt;i&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(it=G[i].<span class="built_in">begin</span>();it!=G[i].<span class="built_in">end</span>();it++)<span class="keyword">if</span>(Q[i][*it]==<span class="number">0</span>)Q[i][*it]=<span class="built_in">qsum</span>(*it);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;Q[r[i]+1][z[i]+1]&lt;&lt;&quot; &quot;&lt;&lt;Q[l[i]][z[i]+1]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="comment">//cout&lt;&lt;(Q[r[i]+1][z[i]+1]-Q[l[i]][z[i]+1]+(r[i]-l[i]+1)+mod)%mod&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">cout&lt;&lt;(Q[r[i]+<span class="number">1</span>][z[i]+<span class="number">1</span>]-Q[l[i]][z[i]+<span class="number">1</span>]+mod)%mod&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线段树又写挂 $2$ 次，悲。</p><h3 id="例题：P5305">例题：P5305</h3><p>这道题是上一道题的扩展版。</p><p>不难想到继续离线做，但是需要用线段树支持区间加 $1<sup>k-0</sup>k,2<sup>k-1</sup>k\cdots (d+1)<sup>k-d</sup>k$ 的操作。</p><p>考虑标记这段区间被标记覆盖了多少次，预处理出 $d^k$ 的值，然后每次下放标记的时候，就加上 $lazy\times(dep_{rk_{r}}<sup>k-(dep_{rk_l}-1)</sup>k)$ 即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P5305 [GXOI/GZOI2019] 旧词</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P5305</span></span><br><span class="line"><span class="comment">// Memory Limit: 500 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod=<span class="number">998244353</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">a+=b;</span><br><span class="line">a%=mod;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">minu</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">a-=b%mod;</span><br><span class="line">a=(a+mod)%mod;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> _k[<span class="number">50001</span>],n,m,k;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">ksm</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(b==<span class="number">1</span>)<span class="keyword">return</span> a;</span><br><span class="line"><span class="keyword">return</span> (b&amp;<span class="number">1</span>?a:<span class="number">1</span>)*(<span class="built_in">ksm</span>(a*a%mod,b/<span class="number">2</span>))%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">100001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">50001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">head[u]=tot;</span><br><span class="line">E[tot].to=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fa[<span class="number">50001</span>],dep[<span class="number">50001</span>],siz[<span class="number">50001</span>],hson[<span class="number">50001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now]=f;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line"><span class="keyword">if</span>(siz[E[i].to]&gt;siz[hson[now]])hson[now]=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfn[<span class="number">50001</span>],rk[<span class="number">50001</span>],ltop[<span class="number">50001</span>],dfncnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> top)</span></span>&#123;</span><br><span class="line">ltop[now]=top;</span><br><span class="line">dfn[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line"><span class="keyword">if</span>(!hson[now])<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(hson[now],top);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(E[i].to,E[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> xds[<span class="number">400001</span>];</span><br><span class="line"><span class="type">int</span> lazy[<span class="number">400001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(lazy[now])&#123;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">lazy[now&lt;&lt;<span class="number">1</span>]+=lazy[now];</span><br><span class="line">lazy[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=lazy[now];</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>]+=<span class="built_in">minu</span>(_k[dep[rk[mid]]],_k[dep[rk[l]]<span class="number">-1</span>])*lazy[now]%mod;</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>]%=mod;</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=<span class="built_in">minu</span>(_k[dep[rk[r]]],_k[dep[rk[mid]]])*lazy[now]%mod;</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]%=mod;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;mid&lt;&lt;&quot; &quot;&lt;&lt;mid+1&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;xds[now&lt;&lt;1]&lt;&lt;&quot; &quot;&lt;&lt;xds[now&lt;&lt;1|1]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">lazy[now]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">xds[now]=<span class="built_in">sum</span>(xds[now&lt;&lt;<span class="number">1</span>],xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">upd</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)&#123;</span><br><span class="line">lazy[now]++;</span><br><span class="line">xds[now]+=<span class="built_in">minu</span>(_k[dep[rk[r]]],_k[dep[rk[l]]<span class="number">-1</span>])%mod;</span><br><span class="line">xds[now]%=mod;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;xds[now]&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;l-1&lt;&lt;&quot; &quot;&lt;&lt;dep[rk[r]]&lt;&lt;&quot; &quot;&lt;&lt;dep[rk[l-1]]&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;now&lt;&lt;&quot; &quot;&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;sl&lt;&lt;&quot; &quot;&lt;&lt;sr&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)<span class="built_in">upd</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid));</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)<span class="built_in">upd</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getsum</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)<span class="keyword">return</span> xds[now];</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)res=<span class="built_in">sum</span>(res,<span class="built_in">getsum</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid)));</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)res=<span class="built_in">sum</span>(res,<span class="built_in">getsum</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr));</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(u)<span class="built_in">upd</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[u]],dfn[u]),u=fa[ltop[u]];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qsum</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(u)res=<span class="built_in">sum</span>(res,<span class="built_in">getsum</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[u]],dfn[u])),u=fa[ltop[u]];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; Q[<span class="number">50001</span>];</span><br><span class="line"><span class="type">int</span> ans[<span class="number">50001</span>];</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">_k[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)_k[i]=<span class="built_in">ksm</span>(i,k);</span><br><span class="line">dep[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)cin&gt;&gt;x,<span class="built_in">addE</span>(x,i);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line">Q[x].<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(i,y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">mdf</span>(i);</span><br><span class="line"><span class="type">int</span> si=Q[i].<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;si;j++)ans[Q[i][j].first]=<span class="built_in">qsum</span>(Q[i][j].second);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题：P2146">例题：P2146</h3><p>不难看出 <code>install u</code> 操作是修改所有 $1\to u$ 路径上的节点状态为已安装，而 <code>uninstall u</code> 操作是修改以 $u$ 为根的子树的所有节点的状态为未安装。我们需要一种数据结构维护这些，并且需要输出每次修改了多少个。</p><p>线段树就够了。维护已安装状态出现的次数即可。设定三个懒标记：</p><ul class="lvl-0"><li class="lvl-2"><p>$lazy=0$，无需操作。</p></li><li class="lvl-2"><p>$lazy=1$，将当前区间内的所有节点设定为已安装。</p></li><li class="lvl-2"><p>$lazy=2$，将当前区间内的所有节点设定为未安装。</p></li></ul><p>下放懒标记时分类讨论，然后在修改时统计修改后的值与原来的值的差的绝对值即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P2146 [NOI2015] 软件包管理器</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P2146</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">200005</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">100005</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dep[<span class="number">100001</span>],siz[<span class="number">100001</span>],hson[<span class="number">100001</span>],fa[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now]=f;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs1</span>(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line"><span class="keyword">if</span>(siz[E[i].to]&gt;siz[hson[now]])hson[now]=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfn[<span class="number">100001</span>],rk[<span class="number">100001</span>],dfncnt,ltop[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> top)</span></span>&#123;</span><br><span class="line">ltop[now]=top;</span><br><span class="line">dfn[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line"><span class="keyword">if</span>(!hson[now])<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(hson[now],top);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(E[i].to,E[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> xds[<span class="number">400001</span>];<span class="comment">//统计 `1` 的个数</span></span><br><span class="line"><span class="type">int</span> lazy[<span class="number">400001</span>];<span class="comment">//1-&gt;全部置 `1`;2-&gt;全部置 `0`</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">xds[now]=xds[now&lt;&lt;<span class="number">1</span>]+xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!lazy[now])<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(lazy[now]==<span class="number">1</span>)&#123;</span><br><span class="line">lazy[now&lt;&lt;<span class="number">1</span>]=lazy[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>]=mid-l+<span class="number">1</span>;</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=r-mid;</span><br><span class="line">lazy[now]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">lazy[now&lt;&lt;<span class="number">1</span>]=lazy[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">lazy[now]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">upd</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr,<span class="type">bool</span> ty)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)&#123;</span><br><span class="line"><span class="type">int</span> org=xds[now];</span><br><span class="line"><span class="keyword">if</span>(ty==<span class="number">1</span>)lazy[now]=<span class="number">1</span>,xds[now]=r-l+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> lazy[now]=<span class="number">2</span>,xds[now]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(org-xds[now]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="comment">//cerr&lt;&lt;now&lt;&lt;&quot; &quot;&lt;&lt;l&lt;&lt;&quot; &quot;&lt;&lt;r&lt;&lt;&quot; &quot;&lt;&lt;sl&lt;&lt;&quot; &quot;&lt;&lt;sr&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)res+=<span class="built_in">upd</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid),ty);</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)res+=<span class="built_in">upd</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr,ty);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">mdf</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(u)res+=<span class="built_in">upd</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[u]],dfn[u],<span class="number">1</span>),u=fa[ltop[u]];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line">string s;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)cin&gt;&gt;x,<span class="built_in">addE</span>(x+<span class="number">1</span>,i);</span><br><span class="line">cin&gt;&gt;q;</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=q;i++)&#123;</span><br><span class="line">cin&gt;&gt;s&gt;&gt;x;</span><br><span class="line">x++;</span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;i&#x27;</span>)cout&lt;&lt;<span class="built_in">mdf</span>(x)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;<span class="built_in">upd</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[x],dfn[x]+siz[x]<span class="number">-1</span>,<span class="number">0</span>)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线段树记得开 $4$ 倍空间！！！！</p><h3 id="例题（？）：P3258">例题（？）：P3258</h3><p>树上差分例题。</p><p>细节较多，但是题意是真的读不懂。</p><p>小猫第一次要到达 $a_1$，所以显然先要在 $a_1$ 处拿一块糖果。</p><p>然后出发时的房间都不用拿糖果，于是要对 $a_1\sim a_n$ 去重。</p><p>然后就是普通点差分即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P3258 [JLOI2014] 松鼠的新家</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P3258</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">600001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">300001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">head[u]=tot;</span><br><span class="line">E[tot].to=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> w[<span class="number">100001</span>];</span><br><span class="line"><span class="type">int</span> fa[<span class="number">300001</span>][<span class="number">26</span>],dep[<span class="number">300001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now][<span class="number">0</span>]=f;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;fa[now][i];)i++,fa[now][i]=fa[fa[now][i<span class="number">-1</span>]][i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(E[i].to,now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LCA</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[u]&gt;dep[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=dep[v]-dep[u],ci=<span class="number">0</span>;i;i&gt;&gt;=<span class="number">1</span>,ci++)<span class="keyword">if</span>(i&amp;<span class="number">1</span>)v=fa[v][ci];</span><br><span class="line"><span class="keyword">if</span>(u==v)<span class="keyword">return</span> u;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">23</span>;i&gt;=<span class="number">0</span>;i--)<span class="keyword">if</span>(fa[u][i]!=fa[v][i])u=fa[u][i],v=fa[v][i];</span><br><span class="line"><span class="keyword">return</span> fa[u][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">300001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now][<span class="number">0</span>])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">calc</span>(E[i].to);</span><br><span class="line">ans[now]+=ans[E[i].to];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Q[<span class="number">300001</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;Q[i];</span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)cin&gt;&gt;x&gt;&gt;y,<span class="built_in">addE</span>(x,y),<span class="built_in">addE</span>(y,x);</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="type">int</span> lca=<span class="built_in">LCA</span>(Q[i],Q[i+<span class="number">1</span>]);</span><br><span class="line">ans[Q[i]]++,ans[Q[i+<span class="number">1</span>]]++,ans[lca]--,ans[fa[lca][<span class="number">0</span>]]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">calc</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)ans[Q[i]]--;</span><br><span class="line">ans[Q[<span class="number">1</span>]]++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题：P4315">例题：P4315</h3><p>树剖 + 线段树的综合题，很适合练手。</p><p>我这道题线段树写挂了，然后调了 2h。</p><p>没什么可说的，注意路径 $LCA$ 不要查询或修改，然后注意标记下放即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P4315 月下“毛景树”</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P4315</span></span><br><span class="line"><span class="comment">// Memory Limit: 125 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">string s;</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link,w;</span><br><span class="line">&#125;E[<span class="number">200001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">100001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">E[tot].w=w;</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dw[<span class="number">100001</span>];</span><br><span class="line"><span class="type">int</span> dep[<span class="number">100001</span>],fa[<span class="number">100001</span>],siz[<span class="number">100001</span>],hson[<span class="number">100001</span>],w[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now]=f;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+<span class="number">1</span>;</span><br><span class="line">w[E[i].to]=E[i].w;</span><br><span class="line">dw[(i+<span class="number">1</span>)/<span class="number">2</span>]=E[i].to;</span><br><span class="line"><span class="built_in">dfs1</span>(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line"><span class="keyword">if</span>(siz[E[i].to]&gt;siz[hson[now]])hson[now]=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfn[<span class="number">100001</span>],rk[<span class="number">100001</span>],dfncnt,ltop[<span class="number">100001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> top)</span></span>&#123;</span><br><span class="line">ltop[now]=top;</span><br><span class="line">dfn[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line"><span class="keyword">if</span>(!hson[now])<span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(hson[now],top);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs2</span>(E[i].to,E[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> xds[<span class="number">400001</span>],sumtag[<span class="number">400001</span>],covtag[<span class="number">400001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">xds[now]=<span class="built_in">max</span>(xds[now&lt;&lt;<span class="number">1</span>],xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//assert(xds[now]!=98318);</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bulid</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">xds[now]=w[rk[l]];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line"><span class="built_in">bulid</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="built_in">assert</span>(!(covtag[now]&amp;&amp;sumtag[now]));</span><br><span class="line"><span class="keyword">if</span>(covtag[now])&#123;<span class="comment">//covtag存要覆盖的数+1</span></span><br><span class="line">covtag[now]--;</span><br><span class="line">sumtag[now&lt;&lt;<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">sumtag[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>]=covtag[now];</span><br><span class="line">xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=covtag[now];</span><br><span class="line">covtag[now&lt;&lt;<span class="number">1</span>]=covtag[now]+<span class="number">1</span>;</span><br><span class="line">covtag[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=covtag[now]+<span class="number">1</span>;</span><br><span class="line">covtag[now]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(sumtag[now])&#123;</span><br><span class="line"><span class="keyword">if</span>(covtag[now&lt;&lt;<span class="number">1</span>])covtag[now&lt;&lt;<span class="number">1</span>]+=sumtag[now],xds[now&lt;&lt;<span class="number">1</span>]=covtag[now&lt;&lt;<span class="number">1</span>]<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> sumtag[now&lt;&lt;<span class="number">1</span>]+=sumtag[now],xds[now&lt;&lt;<span class="number">1</span>]+=sumtag[now];</span><br><span class="line"><span class="keyword">if</span>(covtag[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])covtag[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=sumtag[now],xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=covtag[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> sumtag[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=sumtag[now],xds[now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+=sumtag[now];</span><br><span class="line">sumtag[now]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">cov</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)&#123;</span><br><span class="line">covtag[now]=v+<span class="number">1</span>;</span><br><span class="line">sumtag[now]=<span class="number">0</span>;</span><br><span class="line">xds[now]=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)<span class="built_in">cov</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid),v);</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)<span class="built_in">cov</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr,v);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)&#123;</span><br><span class="line"><span class="keyword">if</span>(covtag[now])covtag[now]+=v;</span><br><span class="line"><span class="keyword">else</span> sumtag[now]+=v;</span><br><span class="line">xds[now]+=v;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)<span class="built_in">add</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(mid,sr),v);</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)<span class="built_in">add</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr,v);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getmax</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> sl,<span class="type">int</span> sr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==sl&amp;&amp;r==sr)<span class="keyword">return</span> xds[now];</span><br><span class="line"><span class="built_in">pushdown</span>(now,l,r);</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(sl&lt;=mid)res=<span class="built_in">max</span>(res,<span class="built_in">getmax</span>(now&lt;&lt;<span class="number">1</span>,l,mid,sl,<span class="built_in">min</span>(sr,mid)));</span><br><span class="line"><span class="keyword">if</span>(sr&gt;mid)res=<span class="built_in">max</span>(res,<span class="built_in">getmax</span>(now&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,<span class="built_in">max</span>(sl,mid+<span class="number">1</span>),sr));</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">uadd</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(ltop[u]!=ltop[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[ltop[u]]&gt;dep[ltop[v]])<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[u]],dfn[u],w),u=fa[ltop[u]];</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[v]],dfn[v],w),v=fa[ltop[v]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u!=v)&#123;</span><br><span class="line"><span class="keyword">if</span>(dfn[u]&gt;dfn[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line"><span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[u]+<span class="number">1</span>,dfn[v],w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ucover</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(ltop[u]!=ltop[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[ltop[u]]&gt;dep[ltop[v]])<span class="built_in">cov</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[u]],dfn[u],w),u=fa[ltop[u]];</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cov</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[v]],dfn[v],w),v=fa[ltop[v]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u!=v)&#123;</span><br><span class="line"><span class="keyword">if</span>(dfn[u]&gt;dfn[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line"><span class="built_in">cov</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[u]+<span class="number">1</span>,dfn[v],w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qmax</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(ltop[u]!=ltop[v])&#123;</span><br><span class="line"><span class="keyword">if</span>(dep[ltop[u]]&gt;dep[ltop[v]])res=<span class="built_in">max</span>(res,<span class="built_in">getmax</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[u]],dfn[u])),u=fa[ltop[u]];</span><br><span class="line"><span class="keyword">else</span> res=<span class="built_in">max</span>(res,<span class="built_in">getmax</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[ltop[v]],dfn[v])),v=fa[ltop[v]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(u!=v)&#123;</span><br><span class="line"><span class="keyword">if</span>(dfn[u]&gt;dfn[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line">res=<span class="built_in">max</span>(res,<span class="built_in">getmax</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[u]+<span class="number">1</span>,dfn[v]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)cin&gt;&gt;x&gt;&gt;y&gt;&gt;z,<span class="built_in">addE</span>(x,y,z),<span class="built_in">addE</span>(y,x,z);</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dfs2</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">bulid</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line"><span class="type">int</span> de=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">cin&gt;&gt;s;</span><br><span class="line">de++;</span><br><span class="line"><span class="comment">//cout&lt;&lt;de&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;S&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;M&#x27;</span>)cin&gt;&gt;x&gt;&gt;y,cout&lt;&lt;<span class="built_in">qmax</span>(x,y)&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">0</span>]==<span class="string">&#x27;A&#x27;</span>)cin&gt;&gt;x&gt;&gt;y&gt;&gt;z,<span class="built_in">uadd</span>(x,y,z);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[<span class="number">1</span>]==<span class="string">&#x27;h&#x27;</span>)cin&gt;&gt;x&gt;&gt;y,<span class="built_in">cov</span>(<span class="number">1</span>,<span class="number">1</span>,n,dfn[dw[x]],dfn[dw[x]],y);</span><br><span class="line"><span class="keyword">else</span> cin&gt;&gt;x&gt;&gt;y&gt;&gt;z,<span class="built_in">ucover</span>(x,y,z);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终于结束了，之后再补剩余的题（理论来讲还有 $3$ 道）。</p><h1>树分治</h1><p>分为点分治，边分治，和点分树，边分树。</p><p>此处先只写点分治，其他的科技后面再补。</p><p><a href="https://www.luogu.com.cn/blog/command-block/shu-fen-zhi-xiao-ji">1</a></p><p><a href="https://www.luogu.com.cn/blog/jzp1115/bian-fen-zhi">2</a></p><h2 id="点分治">点分治</h2><p>本来想写 $3$ 道点分治的，结果这三道都可以用 dsu 做，那么，就先写两道，然后有一道用 dsu 和点分治都写一遍，另外一道就只用点分治写就行了。</p><p>小声 bb：虚树会鸽，所以写完这个和树哈希就跑路了。</p><p>点分治常用于处理大规模路径信息。</p><p>具体地，我们每次选取一个点，处理经过该点的所有路径的信息，然后删去该点，递归处理该点所有子树。假设共递归 $h$ 层，时间复杂度 $O(hn)$。</p><p>显然，每块取重心分治最优，时间复杂度 $O(n\log n)$。</p><h3 id="例题：P3806">例题：P3806</h3><p>提供两种 $O(mn\log n)$ 做法。</p><ol><li class="lvl-3"><p>dsu</p></li></ol><p>当我使用 dsu：无语死了，这是什么简单题。</p><p>不管输出格式一发就过了，40ms。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P3806 【模板】点分治 1</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P3806</span></span><br><span class="line"><span class="comment">// Memory Limit: 500 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 200000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,x,y,z;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link,w;</span><br><span class="line">&#125;E[<span class="number">20001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">10001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">E[++tot].link=head[u];</span><br><span class="line">E[tot].to=v;</span><br><span class="line">head[u]=tot;</span><br><span class="line">E[tot].w=w;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dep[<span class="number">10001</span>],siz[<span class="number">10001</span>],fa[<span class="number">10001</span>],hson[<span class="number">10001</span>];</span><br><span class="line"><span class="type">int</span> R[<span class="number">10001</span>],L[<span class="number">10001</span>],rk[<span class="number">10001</span>],dfncnt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now]=f;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line">L[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f)<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+E[i].w;</span><br><span class="line"><span class="built_in">dfs1</span>(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line"><span class="keyword">if</span>(siz[E[i].to]&gt;siz[hson[now]])hson[now]=E[i].to;</span><br><span class="line">&#125;</span><br><span class="line">R[now]=dfncnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Q[<span class="number">101</span>];</span><br><span class="line"><span class="type">bool</span> ans[<span class="number">101</span>];</span><br><span class="line">unordered_set&lt;<span class="type">int</span>&gt; s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dsu</span><span class="params">(<span class="type">int</span> now,<span class="type">bool</span> fl=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dsu</span>(E[i].to);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(hson[now])<span class="built_in">dsu</span>(hson[now],<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||E[i].to==hson[now])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L[E[i].to];j&lt;=R[E[i].to];j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=m;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">count</span>(Q[k]+<span class="number">2</span>*dep[now]-dep[rk[j]]))ans[k]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L[E[i].to];j&lt;=R[E[i].to];j++)s.<span class="built_in">insert</span>(dep[rk[j]]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=m;k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(s.<span class="built_in">count</span>(dep[now]+Q[k]))ans[k]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">s.<span class="built_in">insert</span>(dep[now]);</span><br><span class="line"><span class="keyword">if</span>(fl)<span class="keyword">return</span>;</span><br><span class="line">s.<span class="built_in">clear</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)cin&gt;&gt;x&gt;&gt;y&gt;&gt;z,<span class="built_in">addE</span>(x,y,z),<span class="built_in">addE</span>(y,x,z);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)cin&gt;&gt;Q[i];</span><br><span class="line"><span class="built_in">dfs1</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">dsu</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)cout&lt;&lt;(ans[i]?<span class="string">&quot;AYE\n&quot;</span>:<span class="string">&quot;NAY\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于可以开 $10^4$ 个 <code>unordered_set</code>，这道题应该还可以继续优化，但是作者太懒了。</p><ol start="2"><li class="lvl-3"><p>点分治</p></li></ol><p>重心写挂了，然后虚空调试 1.5h，草！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P3806 【模板】点分治 1</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P3806</span></span><br><span class="line"><span class="comment">// Memory Limit: 500 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 200000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link,w;</span><br><span class="line">&#125;E[<span class="number">20001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">10001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">E[++tot].w=w;</span><br><span class="line">E[tot].to=v;</span><br><span class="line">E[tot].link=head[u];</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> Q[<span class="number">101</span>],ans[<span class="number">101</span>];</span><br><span class="line"><span class="type">int</span> dep[<span class="number">10001</span>],dis[<span class="number">10001</span>],dp[<span class="number">10001</span>]=&#123;<span class="number">1000000000</span>&#125;,fa[<span class="number">10001</span>];</span><br><span class="line"><span class="type">int</span> vis[<span class="number">10001</span>],sum,siz[<span class="number">10001</span>];</span><br><span class="line"><span class="type">int</span> rt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">fa[now]=f;</span><br><span class="line">sum++;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==fa[now]||vis[E[i].to])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">dfs</span>(E[i].to,now);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> L[<span class="number">10001</span>],R[<span class="number">10001</span>],rk[<span class="number">10001</span>],dfncnt;</span><br><span class="line"><span class="type">void</span> _dfs(<span class="type">int</span> now,<span class="type">int</span> f)&#123;</span><br><span class="line">L[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f||vis[E[i].to])<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+E[i].w;</span><br><span class="line">_dfs(E[i].to,now);</span><br><span class="line">&#125;</span><br><span class="line">R[now]=dfncnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> _getrt(<span class="type">int</span> now,<span class="type">int</span> f)&#123;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line">dp[now]=<span class="number">0</span>;<span class="comment">//!!!注意清零!!!</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f||vis[E[i].to])<span class="keyword">continue</span>;</span><br><span class="line">_getrt(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line">dp[now]=<span class="built_in">max</span>(siz[E[i].to],dp[now]);</span><br><span class="line">&#125;</span><br><span class="line">dp[now]=<span class="built_in">max</span>(dp[now],sum-siz[now]);</span><br><span class="line"><span class="keyword">if</span>(dp[now]&lt;dp[rt])rt=now;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getrt</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">rt=dfncnt=<span class="number">0</span>;</span><br><span class="line">_getrt(now,<span class="number">0</span>);</span><br><span class="line">dep[rt]=<span class="number">0</span>;</span><br><span class="line">_dfs(rt,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> s[<span class="number">10000001</span>];</span><br><span class="line"><span class="type">int</span> in[<span class="number">10000001</span>],cn;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">vis[now]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;__LINE__&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">s[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;__LINE__&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">cn=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[E[i].to])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L[E[i].to];j&lt;=R[E[i].to];j++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=m;k++)<span class="keyword">if</span>(Q[k]-dep[rk[j]]&gt;=<span class="number">0</span>&amp;&amp;Q[k]-dep[rk[j]]&lt;=<span class="number">1e7</span>&amp;&amp;s[Q[k]-dep[rk[j]]])ans[k]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;__LINE__&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L[E[i].to];j&lt;=R[E[i].to];j++)<span class="keyword">if</span>(dep[rk[j]]&lt;=<span class="number">1e7</span>&amp;&amp;!s[dep[rk[j]]])s[dep[rk[j]]]=<span class="number">1</span>,in[++cn]=dep[rk[j]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=cn;i++)s[in[i]]=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//cout&lt;&lt;now&lt;&lt;&quot; &quot;&lt;&lt;__LINE__&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[E[i].to])<span class="keyword">continue</span>;</span><br><span class="line">sum=siz[E[i].to];</span><br><span class="line"><span class="built_in">getrt</span>(E[i].to);</span><br><span class="line"><span class="comment">//cerr&lt;&lt;rt&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="built_in">solve</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)cin&gt;&gt;x&gt;&gt;y&gt;&gt;z,<span class="built_in">addE</span>(x,y,z),<span class="built_in">addE</span>(y,x,z);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)cin&gt;&gt;Q[i];</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">getrt</span>(<span class="number">1</span>),<span class="built_in">solve</span>(rt);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)cout&lt;&lt;(ans[i]?<span class="string">&quot;AYE\n&quot;</span>:<span class="string">&quot;NAY\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例题：P4178">例题：P4178</h3><p>考虑这道题是求 $[0,k]$ 的路径数量，那么我们不难发现这道题就是单点修改，区间前缀和查询，使用树状数组维护即可。</p><p>注意树状数组的上界是 $k$，不是 $n$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P4178 Tree</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P4178</span></span><br><span class="line"><span class="comment">// Memory Limit: 500 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,k;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link,w;</span><br><span class="line">&#125;E[<span class="number">800001</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">400001</span>],tot;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">E[++tot].w=w;</span><br><span class="line">E[tot].to=v;</span><br><span class="line">E[tot].link=head[u];</span><br><span class="line">head[u]=tot;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dep[<span class="number">400001</span>],vis[<span class="number">400001</span>],siz[<span class="number">400001</span>],dp[<span class="number">400001</span>]=&#123;<span class="number">998244353</span>&#125;,rt;</span><br><span class="line"><span class="type">int</span> sum,dfncnt,L[<span class="number">400001</span>],R[<span class="number">400001</span>];</span><br><span class="line"><span class="type">int</span> T[<span class="number">400002</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getsum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">res+=T[x];</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;&quot; getting\n&quot;;</span></span><br><span class="line">x-=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">upd</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x&lt;=k)&#123;<span class="comment">//注意树状数组范围</span></span><br><span class="line">T[x]+=v;</span><br><span class="line"><span class="comment">//cout&lt;&lt;x&lt;&lt;&quot; updating\n&quot;;</span></span><br><span class="line">x+=<span class="built_in">lowbit</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> rk[<span class="number">400001</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">L[now]=++dfncnt;</span><br><span class="line">rk[dfncnt]=now;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f||vis[E[i].to])<span class="keyword">continue</span>;</span><br><span class="line">dep[E[i].to]=dep[now]+E[i].w;</span><br><span class="line"><span class="built_in">dfs</span>(E[i].to,now);</span><br><span class="line">&#125;</span><br><span class="line">R[now]=dfncnt;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> _getrt(<span class="type">int</span> now,<span class="type">int</span> f)&#123;</span><br><span class="line">dp[now]=<span class="number">0</span>;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i].to==f||vis[E[i].to])<span class="keyword">continue</span>;</span><br><span class="line">_getrt(E[i].to,now);</span><br><span class="line">siz[now]+=siz[E[i].to];</span><br><span class="line">dp[now]=<span class="built_in">max</span>(siz[E[i].to],dp[now]);</span><br><span class="line">&#125;</span><br><span class="line">dp[now]=<span class="built_in">max</span>(dp[now],sum-siz[now]);</span><br><span class="line"><span class="keyword">if</span>(dp[now]&lt;dp[rt])rt=now;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getrt</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">rt=dfncnt=<span class="number">0</span>;</span><br><span class="line">sum=siz[now];</span><br><span class="line">_getrt(now,<span class="number">0</span>);</span><br><span class="line">dep[rt]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(rt,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//cerr&lt;&lt;rt&lt;&lt;&quot; debug\n&quot;;</span></span><br><span class="line"><span class="comment">//cerr&lt;&lt;__LINE__&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">vis[now]=<span class="number">1</span>;</span><br><span class="line"><span class="comment">//upd(1,1);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[E[i].to])<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L[E[i].to];j&lt;=R[E[i].to];j++)<span class="keyword">if</span>(dep[rk[j]]&lt;=k)ans+=<span class="built_in">getsum</span>(k-dep[rk[j]])+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=L[E[i].to];j&lt;=R[E[i].to];j++)<span class="keyword">if</span>(dep[rk[j]]&lt;=k)<span class="built_in">upd</span>(dep[rk[j]],<span class="number">1</span>);</span><br><span class="line"><span class="comment">//cerr&lt;&lt;E[i].to&lt;&lt;&quot; &quot;&lt;&lt;ans&lt;&lt;&quot; test\n&quot;;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;now&lt;&lt;&quot; &quot;&lt;&lt;ans&lt;&lt;&quot;\n&quot;;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=k;i++)T[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now];i;i=E[i].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[E[i].to])<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">getrt</span>(E[i].to);</span><br><span class="line"><span class="built_in">solve</span>(rt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="type">int</span> x,y,z;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)cin&gt;&gt;x&gt;&gt;y&gt;&gt;z,<span class="built_in">addE</span>(x,y,z),<span class="built_in">addE</span>(y,x,z);</span><br><span class="line">cin&gt;&gt;k;</span><br><span class="line">siz[<span class="number">1</span>]=n;</span><br><span class="line"><span class="built_in">getrt</span>(<span class="number">1</span>),<span class="built_in">solve</span>(rt);</span><br><span class="line">cout&lt;&lt;ans;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还剩下两道题作为以后的练习题，直接进入树哈希。</p><h1>树同构（树哈希）</h1><p>顾名思义，就是检查两棵树的结构是否相同。</p><p>有 AHU 算法和树哈希两种比较方式，而树哈希更常用，于是就用树哈希来求解。</p><p>最常用的树哈希基于多重集的一个哈希函数。由于树点有子节点，那么哈希函数可以写成：<br>$$<br>f(x)=(c+\sum_{v\in son(x)}g(f(v)))\bmod m<br>$$<br>其中 $g$ 函数是一个映射，通常使用 xor shift：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="title">shift</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> x)</span></span>&#123;</span><br><span class="line">    x^=mask;</span><br><span class="line">    x^=x&lt;&lt;<span class="number">13</span>;</span><br><span class="line">    x^=x&gt;&gt;<span class="number">7</span>;</span><br><span class="line">    x^=x&lt;&lt;<span class="number">17</span>;</span><br><span class="line">    x^=mask;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然可以选择不同的移位位数，但是 <code>x^=mask</code> 是防止树哈希被卡的关键一步。</p><p>看样子错误率较高？错误的。</p><p>有人证明了当哈希值域 $m=O(n^x)(x\geq3)$ 时，它的错误率是 $O(\frac{1}{n})$，甚至可以达到 $O(\frac{1}{\operatorname{poly}(n)})$ 的，但是看不懂，所以不搬了。</p><p>模板题：P5043 [BJOI2015]树的同构</p><p>对于无根树，我们要找一个关键点来进行树哈希。（或者使用换根 dp）</p><p>考虑树的重心只有两个，那么可以以重心为根进行哈希，如果重心有两个，就取较小的一个哈希值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Problem: P5043 【模板】树同构（[BJOI2015]树的同构）</span></span><br><span class="line"><span class="comment">// Contest: Luogu</span></span><br><span class="line"><span class="comment">// URL: https://www.luogu.com.cn/problem/P5043</span></span><br><span class="line"><span class="comment">// Memory Limit: 250 MB</span></span><br><span class="line"><span class="comment">// Time Limit: 1000 ms</span></span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="comment">// Powered by CP Editor (https://cpeditor.org)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n[<span class="number">51</span>],m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> to,link;</span><br><span class="line">&#125;E[<span class="number">101</span>][<span class="number">51</span>];</span><br><span class="line"><span class="type">int</span> head[<span class="number">51</span>][<span class="number">51</span>],tot[<span class="number">51</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addE</span><span class="params">(<span class="type">int</span> now,<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">E[++tot[now]][now].link=head[u][now];</span><br><span class="line">E[tot[now]][now].to=v;</span><br><span class="line">head[u][now]=tot[now];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> rt[<span class="number">2</span>],siz[<span class="number">51</span>],dp[<span class="number">51</span>]=&#123;<span class="number">998244353</span>&#125;;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">getrt</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">dp[now]=<span class="number">0</span>;</span><br><span class="line">siz[now]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now][id];i;i=E[i][id].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i][id].to==f)<span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">getrt</span>(id,E[i][id].to,now);</span><br><span class="line">siz[now]+=siz[E[i][id].to];</span><br><span class="line">dp[now]=<span class="built_in">max</span>(dp[now],siz[E[i][id].to]);</span><br><span class="line">&#125;</span><br><span class="line">dp[now]=<span class="built_in">max</span>(dp[now],n[id]-siz[now]);</span><br><span class="line"><span class="keyword">if</span>(dp[now]==dp[rt[<span class="number">0</span>]])rt[<span class="number">1</span>]=now;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(dp[now]&lt;dp[rt[<span class="number">0</span>]])rt[<span class="number">0</span>]=now,rt[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ull unsigned long long<span class="comment">//自然溢出</span></span></span><br><span class="line">ull hh[<span class="number">51</span>];</span><br><span class="line"><span class="comment">//const ull mod=13331;</span></span><br><span class="line">ull mask=chrono::steady_clock::<span class="built_in">now</span>().<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line"><span class="function">ull <span class="title">S</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">x^=mask;</span><br><span class="line">x^=x&lt;&lt;<span class="number">5</span>;</span><br><span class="line">x^=x&gt;&gt;<span class="number">7</span>;</span><br><span class="line">x^=x&lt;&lt;<span class="number">13</span>;</span><br><span class="line">x^=mask;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ull <span class="title">gethash</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> now,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> H=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=head[now][id];i;i=E[i][id].link)&#123;</span><br><span class="line"><span class="keyword">if</span>(E[i][id].to==f)<span class="keyword">continue</span>;</span><br><span class="line">H=(H+<span class="built_in">S</span>(<span class="built_in">gethash</span>(id,E[i][id].to,now)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> H;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> ans[<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;m;</span><br><span class="line"><span class="type">int</span> temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">cin&gt;&gt;n[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n[i];j++)&#123;</span><br><span class="line">cin&gt;&gt;temp;</span><br><span class="line"><span class="keyword">if</span>(temp)<span class="built_in">addE</span>(i,temp,j),<span class="built_in">addE</span>(i,j,temp);</span><br><span class="line">&#125;</span><br><span class="line">rt[<span class="number">0</span>]=rt[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">getrt</span>(i,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">hh[i]=<span class="built_in">gethash</span>(i,rt[<span class="number">0</span>],<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(rt[<span class="number">1</span>])hh[i]=<span class="built_in">min</span>(hh[i],<span class="built_in">gethash</span>(i,rt[<span class="number">1</span>],<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(hh[i]==hh[j])&#123;</span><br><span class="line">ans[i]=j;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经测试，自然溢出的正确率最高。</p><p>下班！</p><h1>虚树</h1><p>鸽…咕咕咕…</p><h1>练习题</h1><p>鸽…咕咕咕…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;鲜花&lt;/h1&gt;
&lt;p&gt;听 Mea 讲树论，但是还是脱不了修锅的命运（&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;注：本文中，&lt;code&gt;dfs 序&lt;/code&gt; 等同于 &lt;code&gt;dfn 序&lt;/code&gt;。&lt;/p&gt;
&lt;h1&gt;树的基础&lt;/h1&gt;
&lt;h2 id=&quot;树的直径&quot;&gt;树的直径&lt;/h2</summary>
      
    
    
    
    <category term="OI" scheme="http://blog.eltaos.top/categories/OI/"/>
    
    
    <category term="OI" scheme="http://blog.eltaos.top/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>1001周总结</title>
    <link href="http://blog.eltaos.top/2023/1001%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.eltaos.top/2023/1001%E5%91%A8%E6%80%BB%E7%BB%93/</id>
    <published>2023-10-01T07:12:00.000Z</published>
    <updated>2023-10-01T07:12:42.774Z</updated>
    
    <content type="html"><![CDATA[<h2 id="鲜花">鲜花</h2><p>lxs 的歌好好听！</p><p><a href="https://npm.elemecdn.com/blog-uses/music/lxs.mp3">下载lxs.mp3</a></p><h2 id="考试">考试</h2><p>lxs contest #1(184-re)那场属于是放水了，看到不会 T2 直接不做了，赛时的时候甚至去调了一道根号分治，如如题，结果是 $r$ 和 $l$ 写反了。</p><p>lxs contest #2(188-re)挂了 20 分，因为没开 long long，如如！直接沦为暴力分。T2 写莫队乱搞过去（但是挂了 20）了，这还是我第一次考试写莫队，但是没想到可以用前缀和 $O(1)$ 解决。T1 不会是首次，但是 T3 不知道怎么算期望，T4 看不懂，直接放弃（</p><p>以下是在 #188 赛后未评讲时看懂了的题的简要思路：</p><p>#184 T1：模拟，略。</p><p>#184 T2：考虑一个结论，段数不超过 $2$，那么直接 dp 求最大单调上升子序列即可。</p><p>#188 T2：先双指针求出以每个点为起点的最短满足条件的子段，然后推式子+前缀和即可，当然，莫队这种方法对于无脑求解是很管用的，毕竟这比出题人的目标复杂度（$O(n \log^2n)$）快多了。</p><h2 id="做题">做题</h2><p>为什么国庆不讲课？</p><p><font size=5>为什么国庆不讲课？</font></p><p><font size=6>为什么国庆不讲课？</font></p><p>这导致只能补题…</p><p>如果分块的题不卡常那可以多做几道（</p><p>补了几道优先队列，准备尽量补一些 dp 的题。</p><p>计算几何该复习了…（辛普森，启动！）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;鲜花&quot;&gt;鲜花&lt;/h2&gt;
&lt;p&gt;lxs 的歌好好听！&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://npm.elemecdn.com/blog-uses/music/lxs.mp3&quot;&gt;下载lxs.mp3&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;考试&quot;&gt;考试&lt;/h2&gt;
&lt;p</summary>
      
    
    
    
    <category term="OI" scheme="http://blog.eltaos.top/categories/OI/"/>
    
    
    <category term="OI" scheme="http://blog.eltaos.top/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>20230924周总结</title>
    <link href="http://blog.eltaos.top/2023/20230924%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.eltaos.top/2023/20230924%E5%91%A8%E6%80%BB%E7%BB%93/</id>
    <published>2023-10-01T07:11:00.000Z</published>
    <updated>2023-10-01T07:11:46.290Z</updated>
    
    <content type="html"><![CDATA[<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=1965041412&auto=1&height=66"></iframe><h1>20230924周总结</h1><p>该文同步发布到我的个人博客上。（什么？你说你不知道我的个人博客在哪里？很好！）</p><h2 id="What-I’ve-Learned">What I’ve Learned</h2><p>对于dp，除了树形dp一窍不通。讲dp优化那天全程掉线。</p><p>图写的非常顺手，Tarjan基本已掌握，就是判断题目中对于求哪些连通分量还需加强。</p><p>之前我一遇到树或者图就不想写，现在除了树或者图或者计算几何其他都只想着找规律了。</p><p>在0922（周五）那天自己把费用流的所有算法写了一遍，主要是想比较一下各种算法的效率，然后感觉现在费用流比最大流都还好写。</p><h2 id="About-Exams">About Exams</h2><p>这周只考了一场。</p><p>T1简单规律题，但是CF评级2600，笑死。</p><p>T2毒瘤计算几何，谁知道多边形的重心怎么求啊，差评。</p><p>T3，T4不会，跳了。</p><p>罚坐30min。</p><h2 id="Things-going-to-do">Things going to do</h2><ul class="lvl-0"><li class="lvl-2"><p>写费用流题解（幸亏没关题解区</p></li><li class="lvl-2"><p>狂肝dp。</p></li></ul><p>没了</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><p>&lt;br&gt;</p><h1><font size=10>鸠鸠可爱捏！</font></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=330 height=86 src=&quot;//music.163.com/outchain/player?type=2&amp;id=1965</summary>
      
    
    
    
    <category term="OI" scheme="http://blog.eltaos.top/categories/OI/"/>
    
    
    <category term="OI" scheme="http://blog.eltaos.top/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>Splay and LCT</title>
    <link href="http://blog.eltaos.top/2023/Splay-and-LCT/"/>
    <id>http://blog.eltaos.top/2023/Splay-and-LCT/</id>
    <published>2023-10-01T07:08:00.000Z</published>
    <updated>2020-01-19T07:13:14.397Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><p><strong>从这里开始，信竞的路就开始向未来延伸了</strong></p><p>之前觉得信息竞赛不过是打打电脑，敲敲代码，从来没想到这其实是对思维的一种锻炼。</p><p>信息竞赛的终端是NOI，也就是国赛，那场比赛会让一部分人极度高兴，也会让一部分人迷惘，无奈，最后退役，除这两者之外，也会有一些人陷入沉思——</p><blockquote><p>无数高二的OIer，他们两年，三年，甚至五年，六年的OI生涯，就在走出NOI赛场的那一刻，彻底终结。</p></blockquote><p>原文链接：<a href="https://blog.csdn.net/weixin_43960287/article/details/126443477?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-126443477-blog-111053886.235%5Ev38%5Epc_relevant_anti_vip&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-126443477-blog-111053886.235%5Ev38%5Epc_relevant_anti_vip&amp;utm_relevant_index=2">link</a>（经过2d左右的寻找终于找到了）</p><p>…</p><p>让我们开始吧…</p><h1>什么是Splay？</h1><p>用一个经典问题引入：</p><p>你需要维护一些数，其中需要提供以下操作：</p><ol><li class="lvl-3"><p>插入 $x$ 数</p></li><li class="lvl-3"><p>删除 $x$ 数(若有多个相同的数，应只删除一个)</p></li><li class="lvl-3"><p>查询 $x$ 数的排名(排名定义为比当前数小的数的个数 $+1$ )</p></li><li class="lvl-3"><p>查询排名为 $x$ 的数</p></li><li class="lvl-3"><p>求 $x$ 的前驱(前驱定义为小于 $x$，且最大的数)</p></li><li class="lvl-3"><p>求 $x$ 的后继(后继定义为大于 $x$，且最小的数)</p></li></ol><p>$1\leq n \leq 10^5$</p><p>因为有操作2，这道题暴力的时间复杂度是 $O(n^2)$ 的。</p><p>那么，二叉搜索树就出现了——</p><p>二叉搜索树是一种二叉树的树形数据结构，其定义如下：</p><ol><li class="lvl-3"><p>空树是二叉搜索树。</p></li><li class="lvl-3"><p>若二叉搜索树的左子树不为空，则其左子树上所有点的附加权值均小于其根节点的值。</p></li><li class="lvl-3"><p>若二叉搜索树的右子树不为空，则其右子树上所有点的附加权值均大于其根节点的值。</p></li><li class="lvl-3"><p>二叉搜索树的左右子树均为二叉搜索树。</p></li></ol><p>上述定义来源于 OI Wiki。</p><p>二叉搜索树上的基本操作所花费的时间与这棵树的高度成正比。对于一个有 $n$ 个结点的二叉搜索树中，这些操作的最优时间复杂度为 $O(\log n)$，最坏为 $O(n)$。</p><p>而 Splay 的出现就是为了防止二叉搜索树退化成链从而导致不能保证时间复杂度。</p><h1>如何实现Splay？</h1><h3 id="一些基本变量">一些基本变量</h3><table><thead><tr><th>rt</th><th>tot</th><th>fa[i]</th><th>ch[i][0/1]</th><th>v[i]</th><th>cnt[i]</th><th>stre_size[i]</th></tr></thead><tbody><tr><td>根节点编号</td><td>节点个数</td><td>父亲</td><td>左右儿子编号</td><td>节点权值</td><td>权值出现次数</td><td>子树大小或其他</td></tr></tbody></table><p>还有…</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> lson 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson 1</span></span><br></pre></td></tr></table></figure><h3 id="一些基本操作">一些基本操作</h3><h4 id="maintain">maintain()</h4><p>和 pushup() 是一个道理，更新子树大小或者题中要我们维护的信息。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">maintain</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">stre_size[x]=stre_size[ch[x][rson]]+stre_size[ch[x][lson]]+cnt[x];<span class="comment">//这个是维护子树大小</span></span><br><span class="line"><span class="comment">//sum[x]=sum[ch[x][rson]]+sum[ch[x][rson]]+cnt[x]*v[x];//这个是维护权值和，但是多开一个数组</span></span><br><span class="line"><span class="comment">//还有其他各种各样的</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="get">get()</h4><p>获取节点 $x$ 是父亲的哪个儿子。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ch[fa[x]][rson]==x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="clear">clear()</h4><p>用来销毁节点 $x$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    fa[x]=v[x]=cnt[x]=stre_size[x]=ch[x][lson]=ch[x][rson]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="旋转-rotate">旋转-rotate()</h3><p>在讲 Splay 如何让二叉搜索树不退化成链前，先说说实现 Splay 最重要的操作：左旋与右旋。</p><p><img src="https://oi-wiki.org/ds/images/splay-rotate.svg" alt=""></p><p>没看明白？想想二叉搜索树的性质！旋转前后都要保证二叉搜索树的性质，也就是左 $&lt;$ 中 $&lt;$ 右！</p><p>假如说以上图右旋 2 节点为例，2 节点需要向上一层，根据二叉搜索树的性质，1 节点处的值是大于 2 节点处的值，那么在新树里，1 就是 2 的右儿子。同样的，可以推出 5 节点的值是大于 2 节点的值，同时 1 节点的值大于 5 节点的值，所以在新树中，5 是 1 的左儿子。</p><p>以此类推，我们可以推出旋转的通用方法：</p><ol><li class="lvl-3"><p>假设要旋转的节点为 $x$，它的父亲是 $y$，$x$ 是 $y$ 的 $chk$ 儿子（左 $→ 0$，右 $→ 1$），那么 $x$ 的 $chk$ $xor$ $1$ 儿子是 $y$ 的 $chk$ 儿子，<strong>还要记得把这个儿子（如果这个儿子存在的话）的父亲设为 $y$</strong>。</p></li><li class="lvl-3"><p>$y$ 的父亲为 $x$，$x$ 的 $chk$ $xor$ $1$ 儿子为 $y$。（注意按顺序来）</p></li><li class="lvl-3"><p>设原来的 $y$ 的父亲是 $z$，那么 $x$ 的父亲是 $z$，如果 $z$ 存在（不为 $0$），那么设原来 $z$ 的 $k$ 儿子是 $y$，现在 $z$ 的 $k$ 儿子是 $x$。</p></li><li class="lvl-3"><p><strong>最后从下到上更新信息即可。</strong>(易漏)</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> y=fa[x],z=fa[y];</span><br><span class="line">    <span class="type">bool</span> chk=<span class="built_in">get</span>(x);</span><br><span class="line">    fa[y]=x;</span><br><span class="line">    ch[y][chk]=ch[x][chk^<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(ch[x][chk^<span class="number">1</span>])fa[ch[x][chk^<span class="number">1</span>]]=y;</span><br><span class="line">    ch[x][chk^<span class="number">1</span>]=y;</span><br><span class="line">    fa[x]=z;</span><br><span class="line">    <span class="keyword">if</span>(z)ch[z][ch[z][rson]==y]=x;</span><br><span class="line">    <span class="built_in">maintain</span>(y);</span><br><span class="line">    <span class="built_in">maintain</span>(x);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="splay">splay()</h3><p>Splay 的最核心操作，目的是把一个节点旋转到根节点上。</p><p>分为以下几种情况：</p><ol><li class="lvl-3"><p><strong>zig</strong>操作：在 splay 操作开始时节点具有奇数深度时用于 splay 的最后一步。</p></li></ol><p><img src="https://oi-wiki.org/ds/images/splay-zig.svg" alt=""></p><p>直接将节点 $x$ 旋转即可。</p><p><s>甚至这个图和上面旋转的那个图一模一样…</s></p><ol start="2"><li class="lvl-3"><p><strong>zig-zig</strong>操作：当节点的父亲与该节点都是他们的父亲的同侧儿子时使用。</p></li></ol><p><img src="https://oi-wiki.org/ds/images/splay-zig-zig.svg" alt=""></p><p>可能有些抽象了。</p><p>如果还是直接旋转两次节点 $x$ 的话，这个图就会从这样</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/5wyjcaxi.png" alt=""></p><p>变成…</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/6eqnhvy9.png" alt=""></p><p>这样…</p><p>好像确实不是我们想要的，对吧？</p><p>稍微模拟一下过程可以发现，因为节点 $0$ 无法旋转，那么应该先旋转节点 $1$，即待旋转节点 $3$ 的父亲，在旋转节点 $3$。</p><p>具体过程演示：</p><p>整张图应该先变成这样：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/rweodtoi.png" alt=""></p><p>然后再旋转节点 $3$，变成这样：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/2f8t0vi3.png" alt=""></p><p>这就是我们想要的了，但是前提是节点 $3$ 的爷爷节点 $0$ 存在。</p><ol start="3"><li class="lvl-3"><p><strong>zig-zag</strong>操作：当节点的父亲与该节点是他们的父亲的异侧儿子时使用。</p></li></ol><p><img src="https://oi-wiki.org/ds/images/splay-zig-zag.svg" alt=""></p><p>还是老样子，先尝试只旋转节点 $x$。</p><p>整张图的变换过程差不多长这样：</p><p><img src="https://cdn.luogu.com.cn/upload/image_hosting/yn1i5n14.png" alt=""> $→$ <img src="https://cdn.luogu.com.cn/upload/image_hosting/j4zzq4lk.png" alt=""> $→$ <img src="https://cdn.luogu.com.cn/upload/image_hosting/lwfmjwt6.png" alt=""></p><p>诶？这好像是就是我们需要的！</p><p>于是，针对于这种情况，旋转两次原来的节点 $x$ 即可。</p><p>整合上面三种情况，就可以写出 splay() 的代码了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;fa[x];<span class="built_in">rotate</span>(x))&#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[fa[x]])<span class="built_in">rotate</span>((<span class="built_in">get</span>(x)==<span class="built_in">get</span>(fa[x]))?fa[x]:x);</span><br><span class="line">    &#125;</span><br><span class="line">    rt=x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这可能不够，有些时候我们 splay 到一个特定节点就停了，所以还要新增一个参数，改进后的函数长这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> tar=<span class="number">0</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(;fa[x]!=tar;<span class="built_in">rotate</span>(x))&#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[fa[x]]!=tar)<span class="built_in">rotate</span>(<span class="built_in">get</span>(x)==<span class="built_in">get</span>(fa[x])?fa[x]:x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tar==<span class="number">0</span>)rt=x;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="insert">insert()</h3><p>插入分为这几步：</p><ol><li class="lvl-3"><p>如果树是空的，直接插入根节点即可。</p></li><li class="lvl-3"><p>如果要插入的值与正遍历到的值相等，直接 <code>cnt[cur]++</code> 即可。</p></li><li class="lvl-3"><p>如果要插入的值大于当前值，则向右遍历，小于则向左遍历，直到遍历到第一个空节点时插入。</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!rt)&#123;</span><br><span class="line">        v[++tot]=x;</span><br><span class="line">        rt=tot;</span><br><span class="line">        cnt[rt]++;</span><br><span class="line">        <span class="built_in">maintain</span>(rt);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cur=rt,buf=fa[cur];</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[cur]==x)&#123;</span><br><span class="line">            cnt[cur]++;</span><br><span class="line">            <span class="built_in">maintain</span>(cur);</span><br><span class="line">            <span class="built_in">maintain</span>(buf);<span class="comment">//爸爸也要上传信息!</span></span><br><span class="line">            <span class="built_in">splay</span>(cur);<span class="comment">//最后都要splay!!!!!</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        buf=cur;</span><br><span class="line">        cur=ch[cur][v[cur]&lt;x];</span><br><span class="line">        <span class="keyword">if</span>(!cur)&#123;</span><br><span class="line">            cnt[++tot]++;</span><br><span class="line">            ch[buf][v[buf]&lt;x]=tot;</span><br><span class="line">            v[tot]=x;</span><br><span class="line">            fa[tot]=buf;</span><br><span class="line">            <span class="built_in">maintian</span>(tot);</span><br><span class="line">            <span class="built_in">maintain</span>(buf);</span><br><span class="line">            <span class="built_in">splay</span>(tot);<span class="comment">//最后都要splay!!!!!!!!!!!!!!!!!!</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，如果是在特定的两个元素之间插入，那么可以将这两个元素先 splay 到根，此时这两个元素之间必然为空，直接插入即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="built_in">splay</span>(l);</span><br><span class="line">    <span class="built_in">splay</span>(r,l);</span><br><span class="line">    ch[r][lson]=++tot;</span><br><span class="line">    v[tot]=x;</span><br><span class="line">    cnt[tot]++;</span><br><span class="line">    fa[tot]=r;</span><br><span class="line">    <span class="built_in">maintain</span>(tot);</span><br><span class="line">    <span class="built_in">maintain</span>(r);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（注：上面这种插入很少见，请谨慎使用）</p><h3 id="numx-rank-search">numx_rank_search()</h3><p>即查询数 $x$ 的排名。</p><p>同样的，遍历一遍即可。</p><ol><li class="lvl-3"><p>如果当前数的值大于 $x$，则向左子树寻找。</p></li><li class="lvl-3"><p>如果当前数的值小于 $x$，则将当前排名加上 <code>stre_size[ch[cur][lson]]+cnt[cur]</code> 在向右子树遍历。</p></li><li class="lvl-3"><p>当当前数正好等于 $x$ 或当前遍历到的节点为空时，返回当前排名 +1。</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">numx_rank_search</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> cur=rt,res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v[cur]&gt;x)&#123;</span><br><span class="line">            <span class="keyword">if</span>(!ch[cur][lson])&#123;</span><br><span class="line">                <span class="built_in">splay</span>(cur);</span><br><span class="line">                <span class="keyword">return</span> res+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=ch[cur][lson];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            res+=stre_size[ch[cur][lson]];</span><br><span class="line">            <span class="keyword">if</span>(v[cur]&lt;x)&#123;</span><br><span class="line">                res+=cnt[cur];</span><br><span class="line">                <span class="keyword">if</span>(!ch[cur][rson])&#123;</span><br><span class="line">                    <span class="built_in">splay</span>(cur);</span><br><span class="line">                    <span class="keyword">return</span> res+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                cur=ch[cur][rson];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">splay</span>(cur);</span><br><span class="line">                <span class="keyword">return</span> res+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="rankx-num-search">rankx_num_search()</h3><p>即查询排名为 $x$ 的数是什么。</p><p>与 numx_rank_search() 很类似。设 $x$ 是剩余排名。</p><ol><li class="lvl-3"><p>若 $x$ 大于左子树的大小，那就将 $x$ 减去左子树的大小，再减去当前节点的 <code>cnt</code>，如果此时 $x$ 大于 $0$ ，那就可以继续向右子树寻找，否则直接返回当前的值。</p></li><li class="lvl-3"><p>若 $x$ <strong>不大于</strong>左子树的大小，直接向左子树寻找即可。</p></li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">rankx_num_search</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> cur=rt;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=stre_size[ch[x][lson]])&#123;<span class="comment">//据说加了判断左子树非空会更严谨，实测确实会更快一点</span></span><br><span class="line">            cur=ch[x][lson];</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        x-=stre_size[ch[x][lson]]+cnt[x];</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">splay</span>(cur);</span><br><span class="line">            <span class="keyword">return</span> cur;<span class="comment">//也可返回 v[cur]</span></span><br><span class="line">        &#125;</span><br><span class="line">        cur=ch[x][rson];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="del">del()</h3><p>即删除数 $x$。</p><p>这里要用到还没有提到的函数：查找前驱。</p><h4 id="方法一">方法一</h4><p>遍历查找一遍数 $x$ 并 splay，如果找到的节点的 <code>cnt</code> 大于 $1$，那么可以直接 <code>cnt[cur]--</code> 即可。否则要合并两个子树。</p><p>如何合并？</p><ol><li class="lvl-3"><p>如果两个树有空树，直接返回那个树或者空树即可。</p></li><li class="lvl-3"><p>先将左子树中的最大值 splay 到根，然后连接右子树，更新信息即可。</p></li></ol><p>左子树中的最大值就是查找原根结点的前驱，即为左子树中一直向右最终遍历到的点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">numx_rank_search</span>(x);<span class="comment">//这一步就是查找加splay</span></span><br><span class="line">    <span class="keyword">if</span>(cnt[rt]&gt;<span class="number">1</span>)&#123;<span class="comment">//易漏!</span></span><br><span class="line">        cnt[rt]--;</span><br><span class="line">        <span class="built_in">maintain</span>(rt);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!ch[rt][lson]&amp;&amp;!ch[rt][rson])&#123;</span><br><span class="line">        <span class="built_in">clear</span>(rt);</span><br><span class="line">        rt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!ch[rt][lson])&#123;</span><br><span class="line">        <span class="type">int</span> ed_rt=rt;</span><br><span class="line">        fa[ch[rt][rson]]=<span class="number">0</span>;<span class="comment">//注意是左儿子还是右儿子</span></span><br><span class="line">        rt=ch[rt][rson];</span><br><span class="line">        <span class="built_in">clear</span>(ed_rt);<span class="comment">//注意清理目标</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!ch[rt][rson])&#123;</span><br><span class="line">        <span class="type">int</span> ed_rt=rt;</span><br><span class="line">        fa[ch[rt][lson]]=<span class="number">0</span>;</span><br><span class="line">        rt=ch[rt][lson];</span><br><span class="line">        <span class="built_in">clear</span>(ed_rt);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ed_rt=rt;</span><br><span class="line">    <span class="type">int</span> cur=ch[rt][lson];</span><br><span class="line">    <span class="keyword">while</span>(ch[cur][rson])cur=ch[cur][rson];<span class="comment">//查找前驱用的函数内部就差不多是这样</span></span><br><span class="line">    <span class="built_in">splay</span>(cur);<span class="comment">//此时ed_rt一定没有左子树，可以较方便的删除</span></span><br><span class="line">    ch[rt][rson]=ch[ed_rt][rson];</span><br><span class="line">    fa[ch[rt][rson]]=cur;</span><br><span class="line">    <span class="built_in">clear</span>(ed_rt);</span><br><span class="line">    <span class="built_in">maintain</span>(rt);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方法二">方法二</h4><p>把后继与前驱按顺序 splay 到根，这时原来的节点一定在后继左子树并且只有这一个节点在这棵子树中，直接断绝父子关系即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">numx_rank_search</span>(x);</span><br><span class="line">    <span class="type">int</span> cur1=rt,cur2=rt;</span><br><span class="line">    <span class="keyword">if</span>(ch[rt][lson])&#123;</span><br><span class="line">        cur1=ch[rt][lson];</span><br><span class="line">        <span class="keyword">while</span>(ch[cur1][rson])cur1=ch[cur1][rson];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch[rt][rson])&#123;</span><br><span class="line">        cur2=ch[rt][rson];</span><br><span class="line">        <span class="keyword">while</span>(ch[cur2][lson])cur2=ch[cur2][lson];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(cur2);</span><br><span class="line">    <span class="built_in">splay</span>(cur1);</span><br><span class="line">    <span class="keyword">if</span>(cnt[ch[cur2][lson]]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">        cnt[ch[cur2][lson]]--;</span><br><span class="line">        <span class="built_in">splay</span>(ch[cur2][lson]);</span><br><span class="line">        <span class="built_in">maintain</span>(ch[cur2][lson]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">clear</span>(ch[cur2][lson]);</span><br><span class="line">    ch[cur2][lson]=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">maintain</span>(cur2);</span><br><span class="line">    <span class="built_in">maintain</span>(cur1);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="search-prenum">search_prenum()</h3><p>即查找前驱。前面已提到核心代码，但是如果该数不在树里怎么办？</p><p>先插入，运算完了，删除即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">search_prenum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">insert</span>(x);</span><br><span class="line">    <span class="type">int</span> cur=rt;</span><br><span class="line">    <span class="keyword">if</span>(ch[rt][lson])&#123;</span><br><span class="line">        cur=ch[rt][lson];</span><br><span class="line">        <span class="keyword">while</span>(ch[cur][rson])cur=ch[cur][rson];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(cur);</span><br><span class="line">    <span class="built_in">del</span>(x);</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="search-nextnum">search_nextnum()</h3><p>与前驱基本一样。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">search_prenum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">insert</span>(x);</span><br><span class="line">    <span class="type">int</span> cur=rt;</span><br><span class="line">    <span class="keyword">if</span>(ch[rt][rson])&#123;</span><br><span class="line">        cur=ch[rt][rson];</span><br><span class="line">        <span class="keyword">while</span>(ch[cur][lson])cur=ch[cur][lson];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">splay</span>(cur);</span><br><span class="line">    <span class="built_in">del</span>(x);</span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Splay 到这里完结撒花！</p><h3 id="代码整合">代码整合</h3><p>贴的直接是模板的 AC 代码，可能与上面的代码有些不一样的地方。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson 1</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Splay</span>&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> rt;<span class="comment">//根节点编号</span></span><br><span class="line"><span class="type">int</span> tot;<span class="comment">//节点个数</span></span><br><span class="line"><span class="type">int</span> fa[<span class="number">10000001</span>];<span class="comment">//各个节点的父亲</span></span><br><span class="line"><span class="type">int</span> ch[<span class="number">10000001</span>][<span class="number">2</span>];<span class="comment">//左右儿子编号</span></span><br><span class="line"><span class="type">int</span> v[<span class="number">10000001</span>];<span class="comment">//节点权值</span></span><br><span class="line"><span class="type">int</span> cnt[<span class="number">10000001</span>];<span class="comment">//权值出现次数</span></span><br><span class="line"><span class="type">int</span> stre_size[<span class="number">10000001</span>];<span class="comment">//各个节点子树大小</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">maintain</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//在改变节点位置后，将节点 x 的 size 更新。</span></span><br><span class="line"><span class="keyword">if</span>(x)stre_size[x]=(ch[x][lson]?stre_size[ch[x][lson]]:<span class="number">0</span>)+(ch[x][rson]?stre_size[ch[x][rson]]:<span class="number">0</span>)+cnt[x];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//判断节点 x 是父亲节点的左儿子还是右儿子。</span></span><br><span class="line"><span class="keyword">return</span> ch[fa[x]][rson]==x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//销毁节点 x。</span></span><br><span class="line">fa[x]=ch[x][lson]=ch[x][rson]=v[x]=cnt[x]=stre_size[x]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//为了使 Splay 保持平衡而进行旋转操作，旋转的本质是将某个节点上移一个位置。</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rotate</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> y=fa[x],z=fa[y],chk=<span class="built_in">get</span>(x);</span><br><span class="line">ch[y][chk]=ch[x][chk^<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span>(ch[y][chk])fa[ch[y][chk]]=y;</span><br><span class="line">ch[x][chk^<span class="number">1</span>]=y,fa[y]=x,fa[x]=z;</span><br><span class="line"><span class="keyword">if</span>(z)ch[z][ch[z][rson]==y]=x;</span><br><span class="line"><span class="built_in">maintain</span>(y);</span><br><span class="line"><span class="built_in">maintain</span>(x);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//每访问一个节点 x 后都要强制将其旋转到根节点。</span></span><br><span class="line"><span class="keyword">for</span>(;fa[x];<span class="built_in">rotate</span>(x))</span><br><span class="line"><span class="keyword">if</span>(fa[fa[x]])&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">get</span>(fa[x])==<span class="built_in">get</span>(x))<span class="built_in">rotate</span>(fa[x]);<span class="comment">//!!!!!</span></span><br><span class="line"><span class="keyword">else</span> <span class="built_in">rotate</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">rt=x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*Self-add functions are here*/</span></span><br><span class="line"><span class="comment">//插入操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!rt)&#123;<span class="comment">//如果树空了，则直接插入根并退出。</span></span><br><span class="line">v[++tot]=x;</span><br><span class="line">cnt[tot]++;</span><br><span class="line">rt=tot;</span><br><span class="line"><span class="built_in">maintain</span>(rt);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> cur=rt,buf=<span class="number">0</span>;<span class="comment">//这一次的和上一次的(fa[rt]=0) </span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(v[cur]==x&amp;&amp;cnt[cur])&#123;<span class="comment">//如果当前节点的权值等于 k 则增加当前节点的大小并更新节点和父亲的信息，将当前节点进行 Splay 操作。</span></span><br><span class="line">cnt[cur]++;</span><br><span class="line"><span class="built_in">maintain</span>(cur);</span><br><span class="line"><span class="built_in">maintain</span>(buf);</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">buf=cur;</span><br><span class="line">cur=ch[cur][x&gt;v[cur]];<span class="comment">//左子树任意节点的值 &lt; 根节点的值 &lt; 右子树任意节点的值。</span></span><br><span class="line"><span class="comment">//按照二叉查找树的性质向下找，找到空节点就插入即可</span></span><br><span class="line"><span class="keyword">if</span>(!cur)&#123;</span><br><span class="line">fa[++tot]=buf;</span><br><span class="line">ch[buf][x&gt;v[buf]]=tot;</span><br><span class="line">v[tot]=x;</span><br><span class="line">cnt[tot]++;</span><br><span class="line"><span class="built_in">maintain</span>(tot);</span><br><span class="line"><span class="built_in">maintain</span>(buf);</span><br><span class="line"><span class="built_in">splay</span>(tot);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询 x 的排名</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">numx_rank_search</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>,cur=rt;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//如果 x 比当前节点的权值小，向其左子树查找。</span></span><br><span class="line"><span class="keyword">if</span>(x&lt;v[cur])&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!ch[cur][lson])&#123;</span><br><span class="line">                    <span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> res+<span class="number">1</span>;</span><br><span class="line">&#125;cur=ch[cur][lson];</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果 x 比当前节点的权值大，将答案加上左子树（size）和当前节点（cnt）的大小，向其右子树查找。</span></span><br><span class="line">res+=(ch[cur][lson]?stre_size[ch[cur][lson]]:<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(x&gt;v[cur])&#123;</span><br><span class="line">res+=cnt[cur];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!ch[cur][rson])&#123;</span><br><span class="line">                        <span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> res+<span class="number">1</span>;</span><br><span class="line">&#125;cur=ch[cur][rson];</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果 x 与当前节点的权值相同，将答案加 1 并返回。</span></span><br><span class="line"><span class="comment">//注意最后需要进行 Splay 操作。</span></span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> res+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询排名 x 的数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rankx_num_search</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> cur=rt;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"><span class="comment">//如果左子树非空且剩余排名 x 不大于左子树的大小 size，那么向左子树查找。</span></span><br><span class="line"><span class="keyword">if</span>(ch[cur][lson]&amp;&amp;x&lt;=stre_size[ch[cur][lson]])&#123;</span><br><span class="line">cur=ch[cur][lson];</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//否则将 x 减去左子树的和根的大小。</span></span><br><span class="line">x-=stre_size[ch[cur][lson]]+cnt[cur];</span><br><span class="line"><span class="comment">//如果此时 x 的值小于等于 0，则返回根节点的权值</span></span><br><span class="line"><span class="keyword">if</span>(x&lt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//注意最后需要进行 Splay 操作!!!!!!!!!</span></span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="keyword">return</span> v[cur];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//否则继续向右子树查找。</span></span><br><span class="line">cur=ch[cur][rson];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除操作</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">del</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="comment">//首先将 x 旋转到根的位置。</span></span><br><span class="line"><span class="built_in">numx_rank_search</span>(x);<span class="comment">//最后都是splay了的</span></span><br><span class="line"><span class="comment">//如果 cnt[x]&gt;1（有不止一个 x），那么将 cnt[x] 减 1 并退出</span></span><br><span class="line"><span class="keyword">if</span>(cnt[rt]&gt;<span class="number">1</span>)&#123;</span><br><span class="line">cnt[rt]--;</span><br><span class="line"><span class="built_in">maintain</span>(rt);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//否则，合并它的左右两棵子树即可。</span></span><br><span class="line"><span class="comment">//如何合并？</span></span><br><span class="line"><span class="comment">//设两棵树的根节点分别为 x 和 y，那么我们要求 x 树中的最大值小于 y 树中的最小值。</span></span><br><span class="line"><span class="comment">//如果 x 和 y 其中之一或两者都为空树，直接返回不为空的那一棵树的根节点或空树。</span></span><br><span class="line"><span class="keyword">if</span>(!ch[rt][lson]&amp;&amp;!ch[rt][rson])&#123;</span><br><span class="line"><span class="built_in">clear</span>(rt);</span><br><span class="line">rt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ch[rt][lson])&#123;</span><br><span class="line">                <span class="type">int</span> ed_rt=rt; </span><br><span class="line">rt=ch[rt][rson];</span><br><span class="line">                fa[rt]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">clear</span>(ed_rt);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ch[rt][rson])&#123;</span><br><span class="line">                <span class="type">int</span> ed_rt=rt;</span><br><span class="line">rt=ch[rt][lson];</span><br><span class="line">                fa[rt]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">clear</span>(ed_rt);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//否则将 x 树中的最大值 Splay 到根，然后把它的右子树设置为 y 并更新节点的信息，然后返回这个节点。</span></span><br><span class="line"><span class="type">int</span> ed_rt=rt;</span><br><span class="line"><span class="type">int</span> cur=ch[rt][lson];</span><br><span class="line"><span class="keyword">while</span>(ch[cur][rson])cur=ch[cur][rson];</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="comment">//查找前驱(无需insert或del，所以就直接复制上来了) </span></span><br><span class="line">ch[rt][rson]=ch[ed_rt][rson];</span><br><span class="line">fa[ch[rt][rson]]=rt;</span><br><span class="line"><span class="built_in">clear</span>(ed_rt);</span><br><span class="line"><span class="built_in">maintain</span>(rt);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//另一个思路</span></span><br><span class="line"><span class="comment">//将rt的前驱与后继都Splay，此时，rt会在后继的左儿子处，直接断绝关系即可</span></span><br><span class="line"><span class="comment">//void del(int x)&#123;</span></span><br><span class="line"><span class="comment">//int cur=ch[rt][lson];</span></span><br><span class="line"><span class="comment">//while(ch[cur][rson])cur=ch[cur][rson];</span></span><br><span class="line"><span class="comment">//int curr=ch[rt][rson];</span></span><br><span class="line"><span class="comment">//while(ch[cur][lson])cur=ch[cur][lson];</span></span><br><span class="line"><span class="comment">//splay(curr);</span></span><br><span class="line"><span class="comment">//splay(cur);</span></span><br><span class="line"><span class="comment">//int temp=ch[curr][lson];</span></span><br><span class="line"><span class="comment">//if(cnt[temp]&gt;1)&#123;</span></span><br><span class="line"><span class="comment">//cnt[temp]--;</span></span><br><span class="line"><span class="comment">//maintain(temp);</span></span><br><span class="line"><span class="comment">//splay(temp);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else&#123;</span></span><br><span class="line"><span class="comment">//ch[curr][lson]=0;</span></span><br><span class="line"><span class="comment">//maintain(curr);</span></span><br><span class="line"><span class="comment">//maintain(cur);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//return;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//查询前驱</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">search_prenum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="comment">//前驱定义为小于 x 的最大的数</span></span><br><span class="line"><span class="comment">//转化:</span></span><br><span class="line"><span class="comment">//将 x 插入（此时 x 已经在根的位置了）</span></span><br><span class="line"><span class="built_in">insert</span>(x);</span><br><span class="line"><span class="comment">//前驱即为 x 的左子树中最右边的节点</span></span><br><span class="line"><span class="type">int</span> cur=ch[rt][lson];</span><br><span class="line"><span class="keyword">if</span>(!cur)<span class="keyword">return</span> cur;<span class="comment">//没有这种数 </span></span><br><span class="line"><span class="keyword">while</span>(ch[cur][rson])cur=ch[cur][rson]<span class="comment">/*,cout&lt;&lt;v[cur]&lt;&lt;&quot; test&quot;&lt;&lt;endl;*/</span>;</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line">            </span><br><span class="line"><span class="built_in">del</span>(x);<span class="comment">//最后将 x 删除即可。</span></span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查询后继:与前驱极其类似</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">search_nextnum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="comment">//后继定义为大于 x 的最小的数</span></span><br><span class="line"><span class="comment">//转化:</span></span><br><span class="line"><span class="comment">//将 x 插入（此时 x 已经在根的位置了）</span></span><br><span class="line"><span class="built_in">insert</span>(x);</span><br><span class="line"><span class="comment">//后继即为 x 的右子树中最左边的节点</span></span><br><span class="line"><span class="type">int</span> cur=ch[rt][rson];</span><br><span class="line"><span class="keyword">if</span>(!cur)<span class="keyword">return</span> cur;<span class="comment">//没有这种数 </span></span><br><span class="line"><span class="keyword">while</span>(ch[cur][lson])cur=ch[cur][lson];</span><br><span class="line"><span class="built_in">splay</span>(cur);</span><br><span class="line"><span class="built_in">del</span>(x);<span class="comment">//最后将 x 删除即可。</span></span><br><span class="line"><span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br><span class="line">&#125;tree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;P6136_5.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line"><span class="type">int</span> n,m,op,x,last=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        cin&gt;&gt;x;</span><br><span class="line">        tree.<span class="built_in">insert</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">cin&gt;&gt;op;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">tree.<span class="built_in">insert</span>(x^last);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">2</span>)&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">tree.<span class="built_in">del</span>(x^last);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">3</span>)&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">last=tree.<span class="built_in">numx_rank_search</span>(x^last);</span><br><span class="line">            ans^=last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">4</span>)&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">last=tree.<span class="built_in">rankx_num_search</span>(x^last);</span><br><span class="line">            ans^=last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">5</span>)&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">last=tree.v[tree.<span class="built_in">search_prenum</span>(x^last)];</span><br><span class="line">            ans^=last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(op==<span class="number">6</span>)&#123;</span><br><span class="line">cin&gt;&gt;x;</span><br><span class="line">last=tree.v[tree.<span class="built_in">search_nextnum</span>(x^last)];</span><br><span class="line">            ans^=last;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//if(!(m%10000))cout&lt;&lt;m&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line">    cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模板地址：<a href="https://www.luogu.com.cn/problem/P6136">here</a></p><h1>从 Splay 到 LCT</h1><p>鸽…</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;前言&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;从这里开始，信竞的路就开始向未来延伸了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;之前觉得信息竞赛不过是打打电脑，敲敲代码，从来没想到这其实是对思维的一种锻炼。&lt;/p&gt;
&lt;p&gt;信息竞赛的终端是NOI，也就是国赛，那场比赛会让一部分人极度高兴，也</summary>
      
    
    
    
    <category term="OI" scheme="http://blog.eltaos.top/categories/OI/"/>
    
    
    <category term="OI" scheme="http://blog.eltaos.top/tags/OI/"/>
    
  </entry>
  
  <entry>
    <title>SP22343-NORMA2-Norma</title>
    <link href="http://blog.eltaos.top/2023/SP22343-NORMA2-Norma/"/>
    <id>http://blog.eltaos.top/2023/SP22343-NORMA2-Norma/</id>
    <published>2023-08-28T14:58:45.000Z</published>
    <updated>2023-10-01T07:09:39.086Z</updated>
    
    <content type="html"><![CDATA[<p>双倍经验：<a href="http://www.luogu.com.cn/problem/P6406">$P6406$</a></p><h2 id="题目描述">题目描述</h2><p>给定一个序列$ a_i,\cdots,a_n $，求：</p><p>$$ \sum_{i=1}^{n} \sum_{j=i}^{n} (j-i+1) \min(a_i,a_{i+1},\cdots,a_j) \max(a_i,a_{i+1},\cdots,a_j) $$</p><h2 id="分析">分析</h2><p>根据 $ n \leq 5\times10^5 $，$O(n^3)$ 的暴力肯定要炸，于是考虑分治，即把序列分成左区间与右区间，分别计算以下三种情况：</p><ol><li class="lvl-3"><p>区间左右端点均落在左区间。</p></li><li class="lvl-3"><p>区间左右端点均落在右区间。</p></li><li class="lvl-3"><p>区间左端点落在左区间，区间右端点落在右区间。</p></li></ol><p>其中第 $1$，$2$ 种情况用分治递归解决就行了，于是来着重解决如何求第 $3$ 种情况的问题。</p><p>首先，暴力枚举求第 $3$ 种情况的时间复杂度显然是 $O(n^2)$，总时间复杂度是 $O(n^2 \log n)$，肯定是过不了的。于是可以想一些关于区间的优化：</p><p>线段树？好吧，这个蒟蒻作者不会线段树维护区间最大最小值。</p><p>单调队列？虽然使用单调队列可以不用分治，但是由于区间长度是不定的，这也需要 $O(n^2)$ 的时间复杂度，还是过不了。</p><p>前缀和？前缀最小最大值的前缀和？这能算吗…好像真可以…</p><p>于是用分治+前缀和预处理，$O(n \log n)$ 的时间复杂度就能过掉此题。</p><h2 id="具体实现">具体实现</h2><p><s>（为什么要推这种式子啊）</s></p><p>如果在左区间内定一个下标 $ i $，对于每一个 $ i $，记 $ mi $ 为在 $ a_i,\cdots ,a_{mid} $ 内的最小值下标，$ mx $ 为该区间内最大值下标。显而易见，当 $ i=mid,mid-1,\cdots,1 $ 时，$ mi $ 与 $ mx $ 也是严格单调递减的。</p><p>同样的，记 $ mi_{to} $ 为右区间内最后一个大于 $ a[mi] $ 的下标，$ mx_{to} $ 为右区间内最后一个小于 $ a[mx] $ 的下标。同样显而易见的是，当 $ i=mid,mid-1,\cdots,1 $ 时，$ mi_{to} $ 与 $ mx_{to} $ 也是严格单调递增的。</p><p>所以，我们可以将第三种情况对于每一个 $ i $ 分 $ 3 $ 个部分来求：</p><h3 id="第一个部分：-mid-1-min-mi-to-mx-to">第一个部分：$ [mid+1,\min(mi_{to},mx_{to})) $</h3><p>这一部分最大值为 $ mx $，最小值为 $ mi $，直接等差数列求和就行了，这里就不赘述了。</p><h3 id="第二个部分：-min-mi-to-mx-to-max-mi-to-mx-to">第二个部分：$ [\min(mi_{to},mx_{to}),\max(mi_{to},mx_{to})) $</h3><p>这一部分 $ mi_{to} $ 与 $ mx_{to} $ 只有一个可用，这个时候就要用前缀和了。假定 $ mi_{to} &gt; mx_{to} $，最小值可用 $ mi_{to} $，最大值就只能用右区间的前缀最大值的前缀和。但是由于 $ i $ 不定，又不能针对于每一个 $ i $ 都算一遍（不然时间复杂度就爆炸了），所以前缀和要算两次，具体如下：</p><p>设 $ sum1_k $ 是 $ \max(a_{mid},\cdots,a_k) $ 的前缀和，$ sum2_k $ 是 $ (k + 1) \times \max(a_{mid},\cdots,a_k) $ 的前缀和。</p><p>由于区间长度为 $ k-i+1 $，所以可知，这一部分的贡献是 $ sum2[\max(mi_{to},mx_{to})]-sum2[\min(mi_{to},mx_{to})]-i\times(sum1[\max(mi_{to},mx_{to})]-sum1[\min(mi_{to},mx_{to})]) $。</p><p><s>（作者推式子好累，但打式子更累）</s></p><p>$ mi_{to} &lt; mx_{to} $ 是一样的。</p><h3 id="第三个部分：-max-mi-to-mx-to-r">第三个部分：$ [\max(mi_{to},mx_{to}),r] $</h3><p>只要第二部分搞出来了那这一部分就没什么问题了，不过是求 $ \max(a_{mid},\cdots,a_k) \times \min(a_{mid},\cdots,a_k) $ 和 $ (k+1)\times\max(a_{mid},\cdots,a_k) \times \min(a_{mid},\cdots,a_k)  $ 的前缀和就行了。</p><p>这样这道题就搞出来了。</p><p>什么？你说取模爆炸了？来试试 __int128 吧！（见代码）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">5e5</span>+<span class="number">5</span>;</span><br><span class="line"><span class="type">const</span> __int128 mod=<span class="number">1e9</span>;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> a[MAXN];</span><br><span class="line">__int128 summin1[MAXN],summin2[MAXN],summax1[MAXN],summax2[MAXN],summul1[MAXN],summul2[MAXN];</span><br><span class="line"><span class="function">__int128 <span class="title">fz</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span> a[l]*a[l];</span><br><span class="line"><span class="keyword">if</span>(l+<span class="number">1</span>==r)<span class="keyword">return</span> (a[l]*a[l]+a[r]*a[r]+<span class="number">2</span>*<span class="built_in">min</span>(a[l],a[r])*<span class="built_in">max</span>(a[l],a[r]));</span><br><span class="line">__int128 mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">__int128 ans=(<span class="built_in">fz</span>(l,mid)+<span class="built_in">fz</span>(mid+<span class="number">1</span>,r));</span><br><span class="line">__int128 nowmin=a[mid+<span class="number">1</span>],nowmax=a[mid+<span class="number">1</span>];</span><br><span class="line">summin1[mid]=summin2[mid]=summax1[mid]=summax2[mid]=summul1[mid]=summul2[mid]=<span class="number">0</span>;</span><br><span class="line">summin1[mid+<span class="number">1</span>]=a[mid+<span class="number">1</span>];</span><br><span class="line">summin2[mid+<span class="number">1</span>]=a[mid+<span class="number">1</span>]*(mid+<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=mid+<span class="number">2</span>;i&lt;=r;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;nowmin)nowmin=a[i];</span><br><span class="line">summin1[i]=summin1[i<span class="number">-1</span>]+nowmin;</span><br><span class="line">summin2[i]=(i+<span class="number">1</span>)*nowmin+summin2[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">summax1[mid+<span class="number">1</span>]=a[mid+<span class="number">1</span>];</span><br><span class="line">summax2[mid+<span class="number">1</span>]=a[mid+<span class="number">1</span>]*(mid+<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=mid+<span class="number">2</span>;i&lt;=r;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;nowmax)nowmax=a[i];</span><br><span class="line">summax1[i]=summax1[i<span class="number">-1</span>]+nowmax;</span><br><span class="line">summax2[i]=(i+<span class="number">1</span>)*nowmax+summax2[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">nowmin=a[mid+<span class="number">1</span>],nowmax=a[mid+<span class="number">1</span>];</span><br><span class="line">summul1[mid+<span class="number">1</span>]=a[mid+<span class="number">1</span>]*a[mid+<span class="number">1</span>];</span><br><span class="line">summul2[mid+<span class="number">1</span>]=a[mid+<span class="number">1</span>]*a[mid+<span class="number">1</span>]*(mid+<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=mid+<span class="number">2</span>;i&lt;=r;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i]&lt;nowmin)nowmin=a[i];</span><br><span class="line"><span class="keyword">if</span>(a[i]&gt;nowmax)nowmax=a[i];</span><br><span class="line">summul1[i]=summul1[i<span class="number">-1</span>]+nowmax*nowmin;</span><br><span class="line">summul2[i]=(i+<span class="number">1</span>)*nowmax*nowmin+summul2[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> mi=mid,mx=mid,mi_to=mid,mx_to=mid;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k=mid;k&gt;=l;k--)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[k]&lt;a[mi])mi=k;</span><br><span class="line"><span class="keyword">if</span>(a[k]&gt;a[mx])mx=k;</span><br><span class="line"><span class="keyword">while</span>(a[mi_to]&gt;=a[mi]&amp;&amp;mi_to&lt;=r)mi_to++;</span><br><span class="line"><span class="keyword">if</span>(mi_to&gt;mid)mi_to--;</span><br><span class="line"><span class="keyword">while</span>(a[mx_to]&lt;=a[mx]&amp;&amp;mx_to&lt;=r)mx_to++;</span><br><span class="line"><span class="keyword">if</span>(mx_to&gt;mid)mx_to--;</span><br><span class="line">ans+=(((<span class="built_in">min</span>(mi_to,mx_to)-k+<span class="number">1</span>+mid-k+<span class="number">2</span>)*(<span class="built_in">min</span>(mi_to,mx_to)-mid))*a[mi]*a[mx])/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(mi_to&gt;mx_to)ans+=(summax2[mi_to]-summax2[mx_to]-k*(summax1[mi_to]-summax1[mx_to]))*a[mi];</span><br><span class="line"><span class="keyword">else</span> ans+=(summin2[mx_to]-summin2[mi_to]-k*(summin1[mx_to]-summin1[mi_to]))*a[mx];</span><br><span class="line">ans+=(summul2[r]-summul2[<span class="built_in">max</span>(mx_to,mi_to)]-k*(summul1[r]-summul1[<span class="built_in">max</span>(mx_to,mi_to)]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class="line">cout&lt;&lt;(<span class="type">long</span> <span class="type">long</span>)((<span class="built_in">fz</span>(<span class="number">1</span>,n))%mod);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;双倍经验：&lt;a href=&quot;http://www.luogu.com.cn/problem/P6406&quot;&gt;$P6406$&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目描述&quot;&gt;题目描述&lt;/h2&gt;
&lt;p&gt;给定一个序列$ a_i,&#92;cdots,a_n $，求：&lt;/p&gt;
&lt;p&gt;$$ &#92;su</summary>
      
    
    
    
    <category term="OI" scheme="http://blog.eltaos.top/categories/OI/"/>
    
    
    <category term="题解" scheme="http://blog.eltaos.top/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>P2533 [AHOI2012] 信号塔</title>
    <link href="http://blog.eltaos.top/2023/P2533-AHOI2012-%E4%BF%A1%E5%8F%B7%E5%A1%94/"/>
    <id>http://blog.eltaos.top/2023/P2533-AHOI2012-%E4%BF%A1%E5%8F%B7%E5%A1%94/</id>
    <published>2023-08-28T14:44:52.000Z</published>
    <updated>2023-10-01T07:10:46.496Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述">题目描述</h3><p>给定 $ n $ 个点 $(x_i,y_i)$，求半径最小的圆使该圆能覆盖所有的点。</p><p>所以这是一道最小覆盖圆的板子题，双倍经验：<a href="https://www.luogu.com.cn/problem/P1742"><strong>P1742</strong></a></p><h3 id="实现">实现</h3><p>使用随机增量法：</p><p>很容易我们能证明，若第 $ i $ 个点不在前 $ i-1 $ 个点的最小覆盖圆上，那么第 $ i $ 个点在前 $ i $ 个点的最小覆盖圆上。</p><p>这个时候，就要求前 $ i $ 个点的最小覆盖圆了。在初始化时，把圆心设为第 $ i $ 个点的坐标，半径设为 $ 0 $，强制使这个点在圆上。然后枚举就行了，如果当前这个点在当前这个圆外时就去求第 $ i $ 个点与该点在圆上时的最小覆盖圆，这个时候就要枚举除这两个点以外的第三个点（三点定圆）。枚举结束后就能求出前 $ i $ 个点的最小覆盖圆。</p><p>注意循环不用从 $ 1 $ 到 $ n $ 全部枚一遍，这样会造成重复枚举。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">is_po_in_circle</span>(a[i],c))&#123;</span><br><span class="line">        c=<span class="built_in">get_circ</span>(<span class="number">0</span>,a[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i<span class="number">-1</span>;j++)</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">is_po_in_circle</span>(a[j],c))&#123;</span><br><span class="line">                c.r=<span class="built_in">dist</span>(a[i],a[j])/<span class="number">2</span>;</span><br><span class="line">                c.o.x=(a[i].x+a[j].x)/<span class="number">2</span>;</span><br><span class="line">                c.o.y=(a[i].y+a[j].y)/<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=j<span class="number">-1</span>;k++)</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">is_po_in_circle</span>(a[k],c))</span><br><span class="line">                        c=<span class="built_in">get_circle_from_po</span>(a[i],a[j],a[k]);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>现在最大的问题来了：两点加直径定圆很简单，但是三点定圆有点难度，所以开始推式子：</p><p>假设两点 $(x_1,y_1)$ 与 $(x_2,y_2)$，易得它们的中点是 $(\frac{x_1+x_2}{2},\frac{y_1+y_2}{2})$，经过它们的直线的斜率为 $\frac{y_1-y_2}{x_1-x_2}$。</p><p>因为三角形外接圆圆心（即外心）在在三条线段的中垂线上，故可知刚刚两个点的中垂线斜率为 $-\frac{x_1-x_2}{y_1-y_2}$。再代入刚刚的中点，把式子化为 $ Ax+By+C=0$ 的形式，可知中垂线解析式为：</p><p>$$ (x_1-x_2)x+(y_1-y_2)y+\frac{y_2^2-y_1^2+x_2^2-x_1^2}{2}=0 $$</p><p>其他两条直线是一样的，联立求交点即可，这样圆心和半径都求出来了。</p><h3 id="复杂度证明">复杂度证明</h3><p>这个看似时间复杂度是 $ O(n^3) $ 的做法实际上时间复杂度为 $O(n)$，证明如下：</p><p>由于所有点中，每次最多有 $3$ 个点来确定最小覆盖圆，所以每次只有最多 $\frac{3}{n}$ 的概率选到参与确定最小覆盖圆的点，即每个循环向下调用的概率不超过 $\frac{3}{n}$。</p><p>首先最后一层循环的复杂度是 $O(j)$ 的，向上可以推得第二层的时间复杂度为：</p><p>$$O(i)+\sum_{j=1}^i \frac{3}{i}O(j)$$</p><p>因为要经过随机排序，通过上面的式子容易得到这层的时间复杂度是 $O(i)$，那第一层的时间复杂度也显而易见是 $O(n)$ 了。</p><p>AC 代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">po</span>&#123;</span><br><span class="line">    <span class="type">double</span> x,y;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">vec</span>&#123;</span><br><span class="line">    <span class="type">double</span> A,B,C;<span class="comment">//Ax+By+C=0;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">circ</span>&#123;</span><br><span class="line">    po o;</span><br><span class="line">    <span class="type">double</span> r;</span><br><span class="line">&#125;;</span><br><span class="line">po a[<span class="number">2000001</span>];</span><br><span class="line">circ c;</span><br><span class="line"><span class="function">vec <span class="title">get_vec_from_po</span><span class="params">(po p,po q)</span></span>&#123;</span><br><span class="line">    vec v;</span><br><span class="line">    v.A=p.y-q.y;</span><br><span class="line">    v.B=q.x-p.x;</span><br><span class="line">    v.C=p.x*q.y-q.x*p.y;</span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">po <span class="title">get_po_from_vec</span><span class="params">(vec c,vec d)</span></span>&#123;</span><br><span class="line">    po pp;</span><br><span class="line">    pp.x=((<span class="type">double</span>)(-d.B*c.C+c.B*d.C)/(<span class="type">double</span>)(-c.B*d.A+c.A*d.B));</span><br><span class="line">    pp.y=((<span class="type">double</span>)(-d.A*c.C+c.A*d.C)/(<span class="type">double</span>)(c.B*d.A-c.A*d.B));</span><br><span class="line">    <span class="keyword">return</span> pp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">double</span> <span class="title">dist</span><span class="params">(po a,po b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sqrt</span>((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">is_po_in_circle</span><span class="params">(po test,circ d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> d.r&gt;=<span class="built_in">sqrt</span>((test.x-d.o.x)*(test.x-d.o.x)+(test.y-d.o.y)*(test.y-d.o.y));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">circ <span class="title">get_circle_from_po</span><span class="params">(po A,po B,po C)</span></span>&#123;</span><br><span class="line">    vec buf1,buf2;</span><br><span class="line">    buf1.A=<span class="number">2</span>*(A.x-B.x),buf1.B=<span class="number">2</span>*(A.y-B.y),buf1.C=B.x*B.x-A.x*A.x+B.y*B.y-A.y*A.y;</span><br><span class="line">    buf2.A=<span class="number">2</span>*(B.x-C.x),buf2.B=<span class="number">2</span>*(B.y-C.y),buf2.C=C.x*C.x-B.x*B.x+C.y*C.y-B.y*B.y;</span><br><span class="line">    circ temp;</span><br><span class="line">    temp.o=<span class="built_in">get_po_from_vec</span>(buf1,buf2);</span><br><span class="line">    temp.r=<span class="built_in">dist</span>(temp.o,A);</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">circ <span class="title">get_circ</span><span class="params">(<span class="type">double</span> r,po o)</span></span>&#123;</span><br><span class="line">    circ temp_;</span><br><span class="line">    temp_.r=r;</span><br><span class="line">    temp_.o=o;</span><br><span class="line">    <span class="keyword">return</span> temp_;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        cin&gt;&gt;a[i].x&gt;&gt;a[i].y;</span><br><span class="line">    <span class="built_in">random_shuffle</span>(a+<span class="number">1</span>, a+n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">is_po_in_circle</span>(a[i],c))&#123;</span><br><span class="line">            c=<span class="built_in">get_circ</span>(<span class="number">0</span>,a[i]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i<span class="number">-1</span>;j++)</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">is_po_in_circle</span>(a[j],c))&#123;</span><br><span class="line">                    c.r=<span class="built_in">dist</span>(a[i],a[j])/<span class="number">2</span>;</span><br><span class="line">                    c.o.x=(a[i].x+a[j].x)/<span class="number">2</span>;</span><br><span class="line">                    c.o.y=(a[i].y+a[j].y)/<span class="number">2</span>;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=j<span class="number">-1</span>;k++)</span><br><span class="line">                        <span class="keyword">if</span>(!<span class="built_in">is_po_in_circle</span>(a[k],c))</span><br><span class="line">                            c=<span class="built_in">get_circle_from_po</span>(a[i],a[j],a[k]);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    cout&lt;&lt;fixed&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt;c.o.x&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;c.o.y&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    cout&lt;&lt;fixed&lt;&lt;<span class="built_in">setprecision</span>(<span class="number">2</span>)&lt;&lt;c.r&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;题目描述&lt;/h3&gt;
&lt;p&gt;给定 $ n $ 个点 $(x_i,y_i)$，求半径最小的圆使该圆能覆盖所有的点。&lt;/p&gt;
&lt;p&gt;所以这是一道最小覆盖圆的板子题，双倍经验：&lt;a href=&quot;https://www.luogu.com.cn/problem/</summary>
      
    
    
    
    <category term="OI" scheme="http://blog.eltaos.top/categories/OI/"/>
    
    
    <category term="题解" scheme="http://blog.eltaos.top/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>Tree-Summing-UVA112</title>
    <link href="http://blog.eltaos.top/2023/Tree-Summing-UVA112/"/>
    <id>http://blog.eltaos.top/2023/Tree-Summing-UVA112/</id>
    <published>2023-08-28T14:42:09.000Z</published>
    <updated>2020-01-19T07:13:30.301Z</updated>
    
    <content type="html"><![CDATA[<p>这题主要算法最多<strong>普及-</strong>，输入的难度个人认为高达<strong>省选</strong>！（调输入的时间占做这题时间的九成！！！）</p><h3 id="题目描述">题目描述</h3><p>给出一棵整数的二叉树，请写一个程序判定是否存在这样一条从树根到树叶的路，路上的结点的总和等于一个特定的整数。</p><p>这道题极其坑人的的点在判断两个儿子是否都为叶节点和输入上。</p><h3 id="0x01-树的遍历">0x01 树的遍历</h3><p>这里推荐使用在线算法，因为写起来简单。</p><p>很容易发现在每次读入数时，我们就到达了一个叶节点或一颗子树的根节点，这个时候可以加和，等到该节点的子树遍历完之后像自己的父亲，也就是上一个节点回溯。回溯的过程很简单，就是把当前的加和减去现在节点的值。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//sign 是负数的标志</span></span><br><span class="line">cin&gt;&gt;po;</span><br><span class="line">sum+=po*sign;</span><br><span class="line"><span class="built_in">dfs</span>(dep+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">dfs</span>(dep+<span class="number">1</span>);</span><br><span class="line">sum-=po*sign;</span><br></pre></td></tr></table></figure><p>那么，知道了如何加和，那如何比较结果呢？</p><p>对于这道题，显然是在叶子节点处比较结果。那么，如何判断是否为叶子结点呢？</p><h3 id="0x02-判断是否为叶子节点">0x02 判断是否为叶子节点</h3><p>根据题意，叶子节点的格式是这样的：<code>(num()())</code>，要想判断叶子节点，就要判断两个空树。</p><p>方法一：如果读入第一个 <code>(</code> 后在探测下几个字符（探测的用法下一个部分要讲），如果为 <code>)()</code> 那就成功判断一个叶节点。</p><p>但是 C++ 自带的探测函数指针不后移，如果后移的话像 <code>()(...)</code> 这样的数据就会过度输入，对后面的遍历产生影响。</p><p>方法二：只探测每个树第一个 <code>(</code> 后是否为 <code>)</code>，如果是，就返回 $1$，如果一个节点的左右子树都是空树，那么才进行现在的加和与给定的数的比较。当然，探测到 <code>)</code> 后要指针后移，避免在下次遍历的开始读到右括号从而影响遍历。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(cin.<span class="built_in">peek</span>()==<span class="string">&#x27;)&#x27;</span>)&#123;<span class="comment">//探测下一个字符是否为&#x27;)&#x27;</span></span><br><span class="line">cin.<span class="built_in">ignore</span>();<span class="comment">//指针后移</span></span><br><span class="line"><span class="keyword">return</span> (sum==n);<span class="comment">//可以返回 1，也可以直接返回比较结果</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">temp+=<span class="built_in">dfs</span>(dep+<span class="number">1</span>);</span><br><span class="line">temp+=<span class="built_in">dfs</span>(dep+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(temp==<span class="number">2</span>)&#123;<span class="comment">//如果在上面返回 1，这里就要进行比较</span></span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这样的话，我们的递归函数的返回值就是该节点是否为子树，需要一个新的变量来存比较的结果。</p><p>主要算法都讲完了，但先别急，因为这道题的输入可以让你爆炸！！！</p><h3 id="0x03-输入">0x03 输入</h3><p>我推荐的方法是用探测和指针后移的方式来实现左右括号的读入与判断。</p><p>先介绍函数，探测函数是 <code>cin.peek()</code>，这个函数返回该指针的下一个字符。后移函数是 <code>cin.ignore()</code>，这个函数使当前输入的指针后移一位。读入的时候就从后移后的下一个字符开始读入，后移后指针所指的字符不读入。</p><p>首先，我们要实现对于空格和换行的跳过：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">space</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(cin.<span class="built_in">peek</span>()&lt;=<span class="number">32</span>)cin.<span class="built_in">ignore</span>();<span class="comment">//&#x27; &#x27;,&#x27;\n&#x27;,&#x27;\r&#x27;的ASCII值都小于等于32</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们就在想要探测并跳过左右括号或者负号时，先去空格等字符，然后读入，判断，跳过就行了（但是很容易写错！！！）。</p><p>完整 AC 代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">char</span> k,kk;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> n;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> sum=<span class="number">0</span>;</span><br><span class="line"><span class="type">bool</span> flag=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">space</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(cin.<span class="built_in">peek</span>()&lt;=<span class="number">32</span>)cin.<span class="built_in">ignore</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">long</span> <span class="type">long</span> dep)</span></span>&#123;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> po;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> temp=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">space</span>();</span><br><span class="line">cin.<span class="built_in">ignore</span>();</span><br><span class="line"><span class="built_in">space</span>();</span><br><span class="line"><span class="keyword">if</span>(cin.<span class="built_in">peek</span>()==<span class="string">&#x27;)&#x27;</span>)&#123;</span><br><span class="line">cin.<span class="built_in">ignore</span>();</span><br><span class="line"><span class="keyword">return</span> (sum==n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> sign=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(cin.<span class="built_in">peek</span>()==<span class="string">&#x27;-&#x27;</span>)&#123;</span><br><span class="line">sign=<span class="number">-1</span>;</span><br><span class="line">cin.<span class="built_in">ignore</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">space</span>();</span><br><span class="line">cin&gt;&gt;po;</span><br><span class="line">sum+=po*sign;</span><br><span class="line">temp+=<span class="built_in">dfs</span>(dep+<span class="number">1</span>);</span><br><span class="line">temp+=<span class="built_in">dfs</span>(dep+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span>(temp==<span class="number">2</span>)&#123;</span><br><span class="line">flag=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sum-=po*sign;</span><br><span class="line"><span class="built_in">space</span>();</span><br><span class="line">cin.<span class="built_in">ignore</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">string s;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> u=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">flag=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">s=(flag)?<span class="string">&quot;yes&quot;</span>:<span class="string">&quot;no&quot;</span>;</span><br><span class="line">cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这题主要算法最多&lt;strong&gt;普及-&lt;/strong&gt;，输入的难度个人认为高达&lt;strong&gt;省选&lt;/strong&gt;！（调输入的时间占做这题时间的九成！！！）&lt;/p&gt;
&lt;h3 id=&quot;题目描述&quot;&gt;题目描述&lt;/h3&gt;
&lt;p&gt;给出一棵整数的二叉树，请写一个程序判定是否存在这样</summary>
      
    
    
    
    <category term="OI" scheme="http://blog.eltaos.top/categories/OI/"/>
    
    
    <category term="题解" scheme="http://blog.eltaos.top/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>P8734 [蓝桥杯 2020 国 A] 奇偶覆盖</title>
    <link href="http://blog.eltaos.top/2023/P8734-%E8%93%9D%E6%A1%A5%E6%9D%AF-2020-%E5%9B%BD-A-%E5%A5%87%E5%81%B6%E8%A6%86%E7%9B%96/"/>
    <id>http://blog.eltaos.top/2023/P8734-%E8%93%9D%E6%A1%A5%E6%9D%AF-2020-%E5%9B%BD-A-%E5%A5%87%E5%81%B6%E8%A6%86%E7%9B%96/</id>
    <published>2023-08-28T14:28:58.000Z</published>
    <updated>2023-10-01T07:10:21.831Z</updated>
    
    <content type="html"><![CDATA[<h3 id="题目描述">题目描述</h3><p>在平面内有一些矩形，它们的两条边都平行于坐标轴。</p><p>我们称一个点被某个矩形覆盖，是指这个点在矩形的内部或者边界上。</p><p>请问，被奇数个矩形覆盖和被偶数（$\leq2$）个矩形覆盖的点的面积分别是多少?</p><h3 id="实现">实现</h3><p>显然这题是一道扫描线，不会扫描线的同学先去做<a href="https://www.luogu.com.cn/problem/P5490">这道题</a>。本题解就不讲扫描线是如何实现的了。</p><p>由于要奇偶分开输出，我们的线段树就不能像下面的代码一样只维护一个区间长度了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[now].num)&#123;</span><br><span class="line">tree[now].len=x[tree[now].r+<span class="number">1</span>]-x[tree[now].l];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tree[now].len=tree[now*<span class="number">2</span>].len+tree[now*<span class="number">2</span>+<span class="number">1</span>].len;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很显然，上面这份代码的 <code>len</code> 要被拆成两个，一个用来存奇数覆盖，一个用来存偶数覆盖。由于要保证奇加上偶的面积等于总面积并，我们需要修改原来的上推函数。</p><p>显然，这要分成 $3$ 种情况：</p><ul class="lvl-0"><li class="lvl-2"><p>没有覆盖：奇偶都只需要从左右儿子加和就行了。</p></li><li class="lvl-2"><p>覆盖的矩形数为奇数：此时当前的奇数长度更多要依赖区间长度计算，于是先算偶数长度。根据偶等于奇（当前覆盖矩形数）加奇（左右儿子），偶数长度是左右儿子奇数长度之和。又由于满足奇偶加和为总面积并，所以奇数长度就等于区间长度减刚刚才算的偶数长度。</p></li><li class="lvl-2"><p>覆盖的矩形数为偶数：根据奇等于偶加奇，奇数长度是左右儿子奇数长度之和。同上面的分析，偶数长度是区间长度减刚刚算的奇数长度。</p></li></ul><p>在扫描线的基础上这样修改完上推函数，这道题也就做完了。</p><p>提示：记得把空间开大一点！</p><p>AC 代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> x[<span class="number">2000001</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segtree</span>&#123;</span><br><span class="line"><span class="type">int</span> l;</span><br><span class="line"><span class="type">int</span> r;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> len1,len2,num;</span><br><span class="line">&#125;;</span><br><span class="line">segtree tree[<span class="number">4000050</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">defline</span>&#123;</span><br><span class="line"><span class="type">int</span> xl,xr,y;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> num;</span><br><span class="line">&#125;;</span><br><span class="line">defline line[<span class="number">4000050</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(defline a,defline b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.y&lt;b.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line">tree[now].l=l,tree[now].r=r;</span><br><span class="line">tree[now].len1=<span class="number">0</span>;</span><br><span class="line">tree[now].len2=<span class="number">0</span>;</span><br><span class="line">tree[now].num=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line"><span class="type">int</span> mid=(l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">build</span>(l,mid,now*<span class="number">2</span>),<span class="built_in">build</span>(mid+<span class="number">1</span>,r,now*<span class="number">2</span>+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> now)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(tree[now].num==<span class="number">0</span>)&#123;</span><br><span class="line">tree[now].len1=tree[now*<span class="number">2</span>].len1+tree[now*<span class="number">2</span>+<span class="number">1</span>].len1;</span><br><span class="line">tree[now].len2=tree[now*<span class="number">2</span>].len2+tree[now*<span class="number">2</span>+<span class="number">1</span>].len2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(tree[now].num%<span class="number">2</span>)&#123;</span><br><span class="line">tree[now].len2=tree[now*<span class="number">2</span>].len1+tree[now*<span class="number">2</span>+<span class="number">1</span>].len1;</span><br><span class="line">tree[now].len1=x[tree[now].r+<span class="number">1</span>]-x[tree[now].l]-tree[now].len2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">tree[now].len1=tree[now*<span class="number">2</span>].len1+tree[now*<span class="number">2</span>+<span class="number">1</span>].len1;</span><br><span class="line">tree[now].len2=x[tree[now].r+<span class="number">1</span>]-x[tree[now].l]-tree[now].len1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> now,<span class="type">int</span> num)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x[tree[now].r+<span class="number">1</span>]&lt;=l||x[tree[now].l]&gt;=r)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(x[tree[now].r+<span class="number">1</span>]&lt;=r&amp;&amp;x[tree[now].l]&gt;=l)&#123;</span><br><span class="line">tree[now].num+=num;</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">update</span>(l,r,now*<span class="number">2</span>,num);</span><br><span class="line"><span class="built_in">update</span>(l,r,now*<span class="number">2</span>+<span class="number">1</span>,num);</span><br><span class="line"><span class="built_in">pushup</span>(now);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> n,xlt,xrt,yup,ydown;</span><br><span class="line">ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line">cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">cin&gt;&gt;xlt&gt;&gt;ydown&gt;&gt;xrt&gt;&gt;yup;</span><br><span class="line">x[i*<span class="number">2</span><span class="number">-1</span>]=xlt;</span><br><span class="line">x[i*<span class="number">2</span>]=xrt;</span><br><span class="line">line[i*<span class="number">2</span><span class="number">-1</span>].xl=xlt;</span><br><span class="line">line[i*<span class="number">2</span><span class="number">-1</span>].xr=xrt;</span><br><span class="line">line[i*<span class="number">2</span><span class="number">-1</span>].y=ydown;</span><br><span class="line">line[i*<span class="number">2</span><span class="number">-1</span>].num=<span class="number">1</span>;</span><br><span class="line">line[i*<span class="number">2</span>].xl=xlt;</span><br><span class="line">line[i*<span class="number">2</span>].xr=xrt;</span><br><span class="line">line[i*<span class="number">2</span>].y=yup;</span><br><span class="line">line[i*<span class="number">2</span>].num=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">n*=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">sort</span>(x+<span class="number">1</span>,x+n+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">sort</span>(line+<span class="number">1</span>,line+n+<span class="number">1</span>,cmp);</span><br><span class="line"><span class="type">int</span> tot=<span class="built_in">unique</span>(x+<span class="number">1</span>,x+n+<span class="number">1</span>)-x<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">build</span>(<span class="number">1</span>,tot<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans1=<span class="number">0</span>,ans2=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">update</span>(line[i].xl,line[i].xr,<span class="number">1</span>,line[i].num);</span><br><span class="line">ans1+=tree[<span class="number">1</span>].len1*(line[i+<span class="number">1</span>].y-line[i].y);</span><br><span class="line">ans2+=tree[<span class="number">1</span>].len2*(line[i+<span class="number">1</span>].y-line[i].y);</span><br><span class="line">&#125;</span><br><span class="line">cout&lt;&lt;ans1&lt;&lt;endl&lt;&lt;ans2&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;题目描述&quot;&gt;题目描述&lt;/h3&gt;
&lt;p&gt;在平面内有一些矩形，它们的两条边都平行于坐标轴。&lt;/p&gt;
&lt;p&gt;我们称一个点被某个矩形覆盖，是指这个点在矩形的内部或者边界上。&lt;/p&gt;
&lt;p&gt;请问，被奇数个矩形覆盖和被偶数（$&#92;leq2$）个矩形覆盖的点的面积分别是多少?&lt;/</summary>
      
    
    
    
    <category term="OI" scheme="http://blog.eltaos.top/categories/OI/"/>
    
    
    <category term="题解" scheme="http://blog.eltaos.top/tags/%E9%A2%98%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>四月天</title>
    <link href="http://blog.eltaos.top/2023/17/"/>
    <id>http://blog.eltaos.top/2023/17/</id>
    <published>2023-04-13T15:40:00.000Z</published>
    <updated>2023-09-27T02:33:50.618Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="723f13727003201488357231ee73d3a42cd574eafe3f6adb7b7fc23dfe319dc0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是我这周星期四的一个小小的随笔。如果你现在的精神状态非常不好，去窗边看看风景，出门散散步，与朋友谈谈心，最重要的是要相信未来。我在这里与君共勉~</summary>
    
    
    
    <category term="关于我的琐碎小事" scheme="http://blog.eltaos.top/categories/%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%84%E7%90%90%E7%A2%8E%E5%B0%8F%E4%BA%8B/"/>
    
    
    <category term="学习" scheme="http://blog.eltaos.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="随笔" scheme="http://blog.eltaos.top/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>步入初三下的感想</title>
    <link href="http://blog.eltaos.top/2023/16/"/>
    <id>http://blog.eltaos.top/2023/16/</id>
    <published>2023-02-12T03:47:45.000Z</published>
    <updated>2023-09-27T02:32:48.879Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b1b1c23c46ab83f34b623adda6783e03dd4feb82d54e68c62b4ab560c5a9c8f8">eb0c39d974ec344f2c390a7d4fcbdea8173e26188b68e655aef7493d45ee144509e446c5c6f3b7ece2ff971ed9bef949d6cbde0910c759585438131bf2d5efe75cda71d47a678426658277dfbc52294ce1fb8c861f599430bc838772ce187cd83f2fc110f9ffbe323961be764f8926d837cae0892aced3a612ba991c30a655c14fbc41706ffe6f03d71ca640ce3abc55d3f7ddc020381c9d9c30eff478f9a629e020a14c9ab0b4613afb588750b9576c8704e06ba2dd37b47ed4e88dc554f1d789a25e2f81091ea662ecc4c7286e13598d1fcd3f3275acfbcb8c23ce0216957faa3b1ae8066cce1d3c6a0528fbb7a0ecad5d80d75967a2a22f95094a43e9643a99cf18a7bc4832971727e5fd75399f34e0930a52666e1ba667c7986eecfa3858faca43a9942178ebd0d753206c4c25b43ad533f64b2dd7018a48750e8eecda3d714a93c3c64d784928e4d3ae59b2663cdf8c520daa272f268b3c979026597b74bae80d3a5505375e09fc985e5547714bdd933e29e3483b3fdbb970e6d576e6728b126b943175e4eac3698c84c5a4075e633fca34928dc826a60aede025a2cf2af7862e6d0a661069653c0270ee336ee7cfd9e2ae209e00f404da71c650157bebf09d6e87c368cab605dfbdbbe19b51e83f5b6684e27ddb3be2540d7f78e0191a5a8c7e06cc4fe302c967b7b9002408164d9a7ba3ec06f7759715f73b0243aa7388938039c7bfcd07f0d523c08a4301ed1999ab52c59fe04269dec68a8288d3eed7fb84d1c97a495eff8427af6a5573cdb6ebe6151f2868b01aa73db021595fe089e896474d8e3c48c81bc5258f30021d359b88dd8a5a4bd1976ee50cebf8414c13fd20315279f2e6cc86207424cf5ee1cf6dbda77a6d2f37a8c198b9aa577398668130289b70f9e7fcd37881ab9d044c155045857ad9cee15010d9b21a13ac405d55b04abd3751bd5486959f34b7fe5d217081adddd83cb8fcce5dab5506c78101acd2b66e957d6fe93291be2beb62babc3f89ca38f3f5d8eeefd94cd9d10b8c2c81651ba4241a24e3bd2999d44b280f3bb6a91845338443909f8574b959da00872b6afe416a46a50a708e46b03e4e13cb178657382ec1368186f746a929f4872d8927cb815e9bb9aae19017c61090ba25d2cb30d4f82e184f834139e593309f4f0b70d014beb765f4cb65514604a0a7d74c9254e97c6e3417087d8ef114fddd0fe35ff00775db999fafb437daeeefda7d467f6f0fd3b82c85cd832ec0754189d712a7447935f9be4fe1c379bab53014613c4538b9ddf64aaaa26cf726c9b1ad10bf9e953485ac6c74debe650a06c1f0d0f3e57543868eadeb70ebdee865b8ee5a365267f992c9b36d49b07070bd416b93f23ccddf671169b9a1fad1358c7fc8446152b3598398750a0b5208dc0040058ce85d77914328e5c670158c18a2412eee036f07635aefbe2d8236f28266b9b1502b8b9470268f3dfc57d00a74a1b2f95b5915a3de96faa5433b4b173086608243df0e99b272b4196985732eaaa6d018de87b0ea33582cc514562769dabf5da77815768f0dafdc2da7f4a6420e1077fc4c97dd97756ed8691723b26519a4ce243477d36a3edb42a2dc3e98a9f9563cfa0f03c225a0e558852f0f91f983bcf67eba054339b1d24c47d7bf1b95a5e5f992a65100b18fa542bbd37f13917a10391fc66b47f046e022d872049e4899771910cb7e23ab39d08a0b2ae87fc9870e027104b0f94b8e18ea8f41c58f081c6b0e9c320a1b67ebfb0f35bce303c9f49aed4a167764dbbf75eeda31eb995b711802c248822cdd25459cfb2e3665f5cd1e9774cb8ebdd80d019688107c83398100541b6ace4c9c03b8dba8caf537b169671ce3c8c4138e3d60f87c98fe1b44ff5ce6c06ab4d20a01cc1bd3f11f3b72a548d1d91cd2eb256e40aa19be6a4f338ce608d696f7b14ea25e6b8d7206faf7675e11be21a254723ea3842bc64bc0f3760b00cc8b504b5b68c0c210af3d8c9252de53fb95903ed6c0247a3f9f6a8701156c73b309d8d5e27a22d0f4c7523f2c6c828253bcbcbebb427984492135cef79ac1b448fc2fa74295f0200b1cc5e07563aed01e22d236d81093d24269f75d6419c6a6910d082d9bf589f9541b5ffad39bade8ef0b815f40ae2ac241cccac3b9bf4966be10d573e909b0e922acfd138085462fa6694419408651592c4029b98a1bf9383dab90728c9a0ddbd9fbdbdeb7857d408d7517c1abd41a6ca6a84718b77f3614a4d2405f6b2868a9fe3ff7b1b6b89eadc246d32b9ad87d831a9c518aaac384a7bfd8320b4e22aa08262c29fce8d9a10a28f2841df73db164aba4c60eb1573aeb2ca5de510d2e8c77088988457ea504e9e16e70542d0cbd388e47685de145c44e416f8bf2453095b66e18aa87464d55c98e5f194ce73a0976126b234752aaea96431ef38eccce2685c9148933d21e6ea288f4bec085b7c9c08a58eaa73f004e0ef13cb84e4024cc082062d5d903185411dbb781fb8ef308e4f62fa0181f328d5cf889f428b2d6a59e47d44fc40243cb6b1068c0cefae2f0fe657f01c1084a2907f07fcc8984c931269ec6bca9d3f79e31bae3832e397b30a936fb075d8d956a6b12f183dd111580249306c76158c99df36f4ca4c325b7d5965c59a8a409e04ec219c737cdba82c422673436059a5d0c46fcf867800678f19b3f9be999268378852d048d3689e718d7378c46c03be348c5688b35a00c230bdef040d78ef2cf33cd4580b83c441cb19ffdc2f1bf3bda0f222bded8dfd8a11576d04d4070da8a204666d58970c475e6c415efe836ea3c655a9f20a965f06351ca9d512937589b27c4e2b743d16588ab763a76685e6fbdb2ab408ce777d9bfb6da10d051f50229d1ee5f793566fd0949d0cd3c58ad1abf2a74d3b653697f19a8385bc9fa9dffcb5ecd60c394879b92badba0d53f3c2a4e6ba34bad8feb9fc8afda8935fac1139ff97403c3070853ce3f418ddce8bc13be49b0dd0cd89295817c8abba3e5311abd3e8a314a316790dfc4dedff23c39bd96450b11d3189bd022531c0f05c4f2b4765e35f5d74ad167b047cd96a9b5b98094da241c21921376e7df33983eda9e59d17f5d1f9f8beb4e6ce72f397a7a5d585649ad7b24109d6d1fce0ecccbec74295d309ff525e58bddc11b8b7a4fc1ef8f47bbe9de1c3d2be49333a5748ce4abc7afb66d6d4dbad092326dcb705d33dd9896cb24c55e5e2fc7d8e3e23b98e26775ad561297c793747d17c7143667988bf582c3b389388d2531f4b9d1d4512395b03fcf9e97c67261d0401c63a29f6a37f137a3f9a3bb14d3d01093858b755fe78d7bcafcd081121b0a684f012b1150dd446c2375c6dffbfc3bae117d27d2b257b0141bf571c287297857b823abc4fc58cf7ab3626f223afa0b6f045d3cfc374ee3315810c6b69538e676e483af6c32fd09fc35d52bcb7ff2e29ad67b850a1717d69142f579ef8e5090dfdfc1a5396a8259256cc6605e22fb7ed6285c7d6d45e63527a65964832301f6902d66157adef89d63b4e0ddbe70826ea23fdaf500523cef64a749001eb5d32167f9218e03eeb4bcc9e912cbf37c6d5411a929100c030c89aa7977e8aa477a95544e0a7a43498072e17966a8</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="关于我的琐碎小事" scheme="http://blog.eltaos.top/categories/%E5%85%B3%E4%BA%8E%E6%88%91%E7%9A%84%E7%90%90%E7%A2%8E%E5%B0%8F%E4%BA%8B/"/>
    
    
    <category term="学习" scheme="http://blog.eltaos.top/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>RGB常用颜色对照表</title>
    <link href="http://blog.eltaos.top/2023/15/"/>
    <id>http://blog.eltaos.top/2023/15/</id>
    <published>2023-02-01T00:51:21.000Z</published>
    <updated>2023-02-01T03:00:58.018Z</updated>
    
    <content type="html"><![CDATA[<h1>前言</h1><p>RGB颜色是网页常用的一种颜色表示法，但是常用颜色的代码千奇百怪。下面整理了一常用颜色的代码值。</p><h1>使用方法</h1><p>以下代码仅适用于html文档。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span> </span><br><span class="line">这里是非颜色文字 </span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;%该颜色代码值%&quot;</span>&gt;</span> 这里是带颜色的文字 <span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>常用颜色代码值</h1><p>注：以下说明顺序：名称，代码，效果（部分颜色在暗色主题下显示不清，可将主题颜色调为亮色食用）</p><ul class="lvl-0"><li class="lvl-2"><p>黑色 #000000 <font color="#000000">黑色</font></p></li><li class="lvl-2"><p>红色 #FF0000 <font color="#FF0000">红色</font></p></li><li class="lvl-2"><p>白色 #FFFFFF <font color="#FFFFFF">白色</font></p></li><li class="lvl-2"><p>灰色 #CCCCCC <font color="#CCCCCC">灰色</font></p></li><li class="lvl-2"><p>黄色 #FFFF00 <font color="#FFFF00">黄色</font></p></li><li class="lvl-2"><p>紫红 #FF00FF <font color="#FF00FF">紫红</font></p></li><li class="lvl-2"><p>绿色 #00FF00 <font color="#00FF00">绿色</font></p></li><li class="lvl-2"><p>青色 #00FFFF <font color="#00FFFF">青色</font></p></li><li class="lvl-2"><p>蓝色 #0000FF <font color="#0000FF">蓝色</font></p></li><li class="lvl-2"><p>橙色 #FF7F00或#FF8000 <font color="#FF7F00">橙色</font></p></li><li class="lvl-2"><p>浅橙 #FFCC00 <font color="#FFCC00">浅橙</font></p></li></ul><p>以下是其他常用颜色的值：</p><p><a href="https://imgse.com/i/pSBKcDO"><img src="https://s1.ax1x.com/2023/02/01/pSBKcDO.png" alt="pSBKcDO.png"></a></p><p>当然，这并不是全部，你可以通过<a href="https://www.colorhexa.com/">www.colorhexa.com</a>找出（或调配出）你想要的颜色。</p>]]></content>
    
    
    <summary type="html">RGB颜色是网页常用的一种颜色表示法，但是常用颜色的代码千奇百怪。这篇博客整理了常用颜色的代码值，让网页颜色撰写不再困难。</summary>
    
    
    
    <category term="html" scheme="http://blog.eltaos.top/categories/html/"/>
    
    
    <category term="网站" scheme="http://blog.eltaos.top/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
</feed>
